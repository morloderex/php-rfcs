Typed Class Constants
=====================

:PHP-RFC: 0751
:Title: Typed Class Constants
:Author: Benas Seliuginas <benas.molis.iml@gmail.com>
:Status: Draft
:Type: Standards Track
:Created: 2020-07-06
:PHP-Version: 8.1
:Version: 1.0

Introduction
------------

TODO

Proposal
--------

Under this RFC, code like:

.. code:: php

   class Table {
       protected const TABLE_NAME = null;

       ...

       public function delete(): void {
           if (!is_string(static::TABLE_NAME) || !is_null(static::TABLE_NAME)) {
               throw new Exception('Type of TABLE_NAME must be string|null');
           }

           $this->database->delete(static::TABLE_NAME);
       }
   }

...might be written as:

.. code:: php

   class Table {
       protected const string|null TABLE_NAME = null;

       ...

       public function delete(): void {
           $this->database->delete(static::TABLE_NAME);
       }
   }

...without sacrificing any type-safety.

Supported types
~~~~~~~~~~~~~~~

Class constant type declarations support all type declarations supported
by PHP, with the exception of ``void``, ``callable``, ``object`` and
class names.

Class types (including ``self``, ``static`` and ``parent``) are not
supported because it is not useful and would be performance expensive.
For PHP, all objects are mutable. Since constants should never change at
runtime but objects can, ``object`` and class types are not supported.
Thus, the following examples are not allowed:

.. code:: php

   class Test {
       // this is illegal (because type is object)
       public const object A = 1;

       // this is illegal (because type is a class name)
       public const self B = 1;
   }

Meanwhile, ``void`` and ``callable`` types are not supported due to the
same issues as discussed in the `typed properties v2
RFC <https://wiki.php.net/rfc/typed_properties_v2#supported_types>`__.

Strict and coercive typing modes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``strict_types`` mode has no impact on behavior since class
constants are immutable and thus, the type check will be performed
anyways. This is consistent with the handling of typed properties'
default values.

Inheritance and variance
~~~~~~~~~~~~~~~~~~~~~~~~

Class constants are covariant. This means that the type of a class
constant is not allowed to be widen during inheritance. If the parent
class constant is private, then the type may change arbitrarily.

.. code:: php

   class Test {
       private const int A = 1;
       public const mixed B = 1;
       public const int C = 1;
   }

   class Test2 extends Test {
       // this is legal (because Test::A is private)
       public const string A = 'a';

       // this is legal
       public const int B = 0;

       // this is illegal
       public const mixed C = 0;
   }

The reason why class constant types are covariant is that they are read
only i. e. declared once. The change from ``int`` to ``mixed`` implies
that reads from the class constant may now return values of any type in
addition to integers.

Constant values
~~~~~~~~~~~~~~~

Constant values have to match the type of the class constant. The only
exception is that float class constants also accept integer constant
values, consistent with the handling for parameter/property types.

The following code illustrates legal and illegal constant values:

.. code:: php

   class Test {
       // this is legal
       public const string A = 'a';
       public const int B = 1;
       public const float C = 1.1;
       public const bool D = true;
       public const array E = ['a', 'b'];

       // this is legal
       public const iterable F = ['a', 'b'];
       public const mixed G = 1;
       public const string|array H = 'a';
       public const int|null I = null;

       // this is legal (special exemption)
       public const float J = 1;

       // this is illegal
       public const string K = 1;
       public const int L = null;
   }

If the constant value is a non compile-time evaluable initializer
expression, the constant value is not checked at compile-time. Instead
it will be checked during constant-updating, which will either occur
when an object of the class is instantiated or when the class constant
is being fetched. As such, the following code is legal:

.. code:: php

   class Test {
       public const int TEST = TEST;
   }

   define('TEST', 1);

   // this prints 1
   echo Test::TEST;

If the constant held an illegal type, a ``TypeError`` exception would be
generated during the object ``new Test()`` instantiation or when the
class constant ``Test::TEST`` is being fetched.

Reflection
~~~~~~~~~~

The ``ReflectionClassConstant`` class is extended by two methods:

.. code:: php

   class ReflectionClassConstant implements Reflector {
       ...

       public function getType(): ?ReflectionType {}
       public function hasType(): bool {}
   }

``getType()`` returns a ``ReflectionType`` if the class constant has a
type, and null otherwise. ``hasType()`` returns ``true`` if the class
constant has a type, and false otherwise. The behavior matches that of
``getType()``/``hasType()`` for parameters/properties and
``getReturnType()``/``hasReturnType()`` for return types.

Backwards incompatible changes
------------------------------

None.

Impact on extensions
--------------------

None.

To preserve backwards compatibility with extensions, a new function
``zend_declare_typed_class_constant()`` is introduced while keeping the
original ``zend_declare_class_constant_ex()`` function intact.

Vote
----

Question: Add support for typed class constants?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Voting Choices
^^^^^^^^^^^^^^

-  Yes
-  No

Implementation
--------------

`GitHub Pull Request <https://github.com/php/php-src/pull/5815>`__

Additional Metadata
-------------------

:Original Authors: Benas Seliuginas benas.molis.iml@gmail.com
:Original PHP Version: PHP 8.1
:Slug: typed_class_constants
:Wiki URL: https://wiki.php.net/rfc/typed_class_constants
