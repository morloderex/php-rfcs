Add Str_starts_with() And Str_ends_with() Functions
===================================================

:PHP-RFC: 0704
:Title: Add Str_starts_with() And Str_ends_with() Functions
:Author: Will Hudgins <will@wkhudgins.info>
:Status: Implemented
:Type: Standards Track
:Created: 2020-03-25
:PHP-Version: 8.0
:Version: 0.5

Introduction
------------

| ``str_starts_with`` checks if a string begins with another string and
  returns a boolean value (``true``/``false``) whether it does.
| ``str_ends_with`` checks if a string ends with another string and
  returns a boolean value (``true``/``false``) whether it does.

Typically this functionality is accomplished by using existing string
functions such as ``substr``, ``strpos``/``strrpos``, ``strncmp``, or
``substr_compare`` (often combined with ``strlen``). These bespoke
userland implementations have various downsides, discussed further
below.

The ``str_starts_with`` and ``str_ends_with`` functionality is so
commonly needed that many major PHP frameworks support it, including
`Symfony <https://symfony.com/doc/5.0/components/string.html#methods-to-search-and-replace>`__,
`Laravel <https://laravel.com/docs/7.x/helpers#method-starts-with>`__,
`Yii <https://www.yiiframework.com/doc/api/2.0/yii-helpers-basestringhelper#startsWith()-detail>`__,
`FuelPHP <https://fuelphp.com/docs/classes/str.html#/method_starts_with>`__,
and `Phalcon <https://docs.phalcon.io/3.4/en/api/phalcon_text>`__  [1]_.

Checking the start and end of strings is a very common task which should
be easy. Accomplishing this task is not easy now and that is why many
frameworks have chosen to include it. This is also why other high-level
programming languages---as diverse as JavaScript, Java, Haskell, and
Matlab---have implemented this functionality. Checking the start and end
of a string should not be a task which requires pulling in a PHP
framework or developing a potentially suboptimal (or worse, buggy)
function in userland.

Downsides of Common Userland Approaches
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| Ad hoc userland implementations of this functionality are *less
  intuitive* than dedicated functions (this is especially true for new
  PHP developers and developers who frequently switch between PHP and
  other languages---many of which include this functionality natively).
| The implementation is also *easy to get wrong* (especially with the
  ``===`` comparison).
| Additionally, there are *performance issues* with many userland
  implementations.

*Note: some implementations add "*\ ``$needle === "" ||``\ *" and/or
"*\ ``strlen($needle) <= strlen($haystack) &&``\ *" guards to handle
empty needle values and/or avoid warnings.*

str_starts_with
^^^^^^^^^^^^^^^

.. code:: php

   substr($haystack, 0, strlen($needle)) === $needle

This is memory inefficient because it requires an unnecessary copy of
part of the haystack.

.. code:: php

   strpos($haystack, $needle) === 0

This is potentially CPU inefficient because it will unnecessarily search
along the whole haystack if it doesn't find the needle.

.. code:: php

   strncmp($haystack, $needle, strlen($needle)) === 0 // generic
   strncmp($subject, "prefix", 6) === 0 // ad hoc

This is efficient but requires providing the needle length as a separate
argument, which is either verbose (repeat "``$needle``") or error prone
(hard-coded number).

str_ends_with
^^^^^^^^^^^^^

.. code:: php

   substr($haystack, -strlen($needle)) === $needle

This is memory inefficient (see above).

.. code:: php

   strpos(strrev($haystack), strrev($needle)) === 0

This is doubly inefficient because it requires reversing both the
haystack and the needle as well as applying ``strpos`` (see above).

.. code:: php

   strrpos($haystack, $needle) === strlen($haystack) - strlen($needle)

This is verbose and also potentially CPU inefficient.

.. code:: php

   substr_compare($haystack, $needle, -strlen($needle)) === 0 // generic
   substr_compare($subject, "suffix", -6) === 0 // ad hoc

This is efficient but either verbose or error prone (see ``strncmp``
above).

Proposal
--------

Add two new basic functions: ``str_starts_with`` and ``str_ends_with``:

.. code:: php

   str_starts_with ( string $haystack , string $needle ) : bool
   str_ends_with ( string $haystack , string $needle ) : bool

| ``str_starts_with()`` checks if ``$haystack`` begins with ``$needle``.
  If ``$needle`` is longer than ``$haystack``, it returns ``false``;
  else, it compares each character in ``$needle`` with the corresponding
  character in ``$haystack`` (aligning both strings at their start),
  returning ``false`` if it encounters a mismatch, and ``true``
  otherwise.
| ``str_ends_with()`` does the same thing but aligning both strings at
  their end.

Examples below:

.. code:: php

   $str = "beginningMiddleEnd";
   if (str_starts_with($str, "beg")) echo "printed\n";
   if (str_starts_with($str, "Beg")) echo "not printed\n";
   if (str_ends_with($str, "End")) echo "printed\n";
   if (str_ends_with($str, "end")) echo "not printed\n";

   // empty strings:
   if (str_starts_with("a", "")) echo "printed\n";
   if (str_starts_with("", "")) echo "printed\n";
   if (str_starts_with("", "a")) echo "not printed\n";
   if (str_ends_with("a", "")) echo "printed\n";
   if (str_ends_with("", "")) echo "printed\n";
   if (str_ends_with("", "a")) echo "not printed\n";

Note: the behavior concerning empty strings is in accordance with what
is described in the accepted `str_contains
RFC </rfc/str_contains#proposal>`__. This behavior is also the same as
is common with other languages, including Java and Python.

Backward Incompatible Changes
-----------------------------

This could break functions existing in userland with the same names. But
see `the corresponding section in the str_contains
RFC </rfc/str_contains#backward_incompatible_changes>`__ for a
discussion illustrating how this concern may be mitigated and why it
does not justify the rejection of this RFC.

Proposed PHP Version(s)
-----------------------

PHP 8

RFC Impact
----------

-  **To SAPIs:** Will add the aforementioned functions to all PHP
   environments.
-  **To Existing Extensions:** None.
-  **To Opcache:** No effect.
-  **New Constants:** No new constants.
-  **php.ini Defaults:** No changed php.ini settings.

Votes
-----

Voting closes 2020-05-04

Question: Add str_starts_with and str_ends_with as described
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Voting Choices
^^^^^^^^^^^^^^

-  yes
-  no

Patches and Tests
-----------------

-  https://github.com/php/php-src/pull/5300

Implementation
--------------

After the project is implemented, this section should contain

#. the version(s) it was merged to
#. a link to the git commit(s)
#. a link to the PHP manual entry for the feature

References
----------

-  Implementation of similar methods/functions in other languages:

   -  JavaScript:
      `String#startsWith() <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith>`__
      and
      `String#endsWith() <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith>`__
   -  Python:
      `str#startswith() <https://docs.python.org/3/library/stdtypes.html#str.startswith>`__
      and
      `str#endswith() <https://docs.python.org/3/library/stdtypes.html#str.endswith>`__
   -  Java:
      `String#startsWith() <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#startsWith(java.lang.String)>`__
      and
      `String#endsWith() <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#endsWith(java.lang.String)>`__
      (and Apache Commons Lang
      `StringUtils.startsWith() <https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html#startsWith-java.lang.CharSequence-java.lang.CharSequence->`__
      and
      `StringUtils.endsWith() <https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html#endsWith-java.lang.CharSequence-java.lang.CharSequence->`__)
   -  Ruby:
      `String#start_with?() <https://ruby-doc.org/core-2.1.1/String.html#method-i-start_with-3F>`__
      and
      `String#end_with?() <https://ruby-doc.org/core-2.1.1/String.html#method-i-end_with-3F>`__
   -  Go:
      `strings.HasPrefix() <https://golang.org/pkg/strings/#HasPrefix>`__
      and
      `strings.HasSuffix() <https://golang.org/pkg/strings/#HasSuffix>`__
   -  Haskell:
      `Data.String.Utils.startswith <https://hackage.haskell.org/package/MissingH-1.4.0.1/docs/Data-String-Utils.html#v:startswith>`__
      and
      `Data.String.Utils.endswith <https://hackage.haskell.org/package/MissingH-1.4.0.1/docs/Data-String-Utils.html#v:endswith>`__
      (aliases of
      `Data.List.isPrefixOf <https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-List.html#v:isPrefixOf>`__
      and
      `Data.List.isSuffixOf <https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-List.html#v:isSuffixOf>`__)
   -  MATLAB:
      `startsWith() <https://www.mathworks.com/help/matlab/ref/startswith.html>`__
      and
      `endsWith() <https://www.mathworks.com/help/matlab/ref/endswith.html>`__

-  PHP feature request: `bugid@50434 <bugid@50434>`__ (and duplicates:
   `bugid@60630 <bugid@60630>`__, `bugid@67035 <bugid@67035>`__,
   `bugid@74449 <bugid@74449>`__)
-  Accepted RFC for related function: `PHP RFC:
   str_contains </rfc/str_contains>`__
-  Rejected Prior RFC: `PHP RFC:
   rfc:add_str_begin_and_end_functions </rfc/add_str_begin_and_end_functions>`__

-  Discussion on the php.internals mailing list:
   https://externals.io/message/109318

Rejected Features
-----------------

-  **Case-insensitive** and **multibyte** variants were included in the
   previous version of this RFC, which was declined. See also `the
   related section in the str_contains
   RFC </rfc/str_contains#case-insensitivity_and_multibyte_strings>`__.

.. [1]
   some of those links are for ``str_starts_with`` functionality, but
   the mentioned frameworks also contain ``str_ends_with``
   functionality, often visible on the same web page

Additional Metadata
-------------------

:Original Authors: Will Hudgins, will@wkhudgins.info
:Original Date: 2020-03-25 (**Updated**: 2020-05-05)
:Original Status: Accepted
:Slug: add_str_starts_with_and_ends_with_functions
:Wiki URL: https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions
