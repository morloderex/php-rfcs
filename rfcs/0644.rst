Change The Precedence Of The Concatenation Operator
===================================================

:PHP-RFC: 0644
:Title: Change The Precedence Of The Concatenation Operator
:Author: Bob Weinand <bobwei9@hotmail.com>
:Status: Implemented
:Type: Standards Track
:Created: 2019-03-28
:PHP-Version: 7.4
:Version: 1.0

Introduction
------------

It's been a long standing issue that an (unparenthesized) expression
with '+', '-' and '.' evaluates left-to-right.

.. code:: php

   echo "sum: " . $a + $b;

   // current behavior: evaluated left-to-right
   echo ("sum: " . $a) + $b;

   // desired behavior: addition and subtraction have a higher precendence
   echo "sum :" . ($a + $b);

This RFC aims to change that behavior to be less error-prone and more
intuitive.

Proposal
--------

Currently the precedence of '.', '+' and '-' operators are equal. Any
combination of these operators are simply evaluated left-to-right.

This is counter-intuitive though: you rarely want to add or subtract
concatenated strings which in general are not numbers. However, given
PHPs capability of seamlessly converting an integer to a string,
concatenation of these values is desired.

Thus, the RFC proposes to give '.' an inferior precedence to '+' and
'-', so that additions and subtractions are always performed before the
concatenation. Concretely, the new precedence will be right below '<<'
and '>>' operators, given them also being "math" operators and not
usable with non-numeric strings.

Backward Incompatible Changes
-----------------------------

Every unparenthesized expression featuring an '-' or '+' after a '.'
will change behavior. As an example, the expression ``"3" . "5" + 7``
will now be equal to "312" instead of previously 42.

While this is a subtle behavior change in that it will give different
outputs without notice or warning, it is trivially possible to
statically analyze the code and find all instances where this happens.
As to my knowledge these occurrences are quite rare as it almost always
is an error in the current form, rendering the impact minimal.

As Nikita mentioned on the mailing list:
http://news.php.net/php.internals/105442 - the impact to existing
open-source code is de facto invisible; all found occurrences are actual
bugs. This is a strong indicator that the overall impact will also be
very minimal.

Proposed PHP Version(s)
-----------------------

PHP 8, with a deprecation notice in PHP 7.4 upon encountering an
unparenthesized expression containing an '.' before a '+' or '-'.

Vote
----

Voting started 2019-04-30 and ends 2019-05-14. The first (primary)
voting requires a 2/3 majority. The second (secondary) voting requires a
50%+1 majority.

Question: Change the precedence of the concatenation operator as proposed in PHP 8?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Voting Choices
^^^^^^^^^^^^^^

-  Yes
-  No

Question: Emit a deprecation notice in PHP 7.4 if the RFC is accepted?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. _voting-choices-1:

Voting Choices
^^^^^^^^^^^^^^

-  Yes
-  No

Patch
-----

-  https://github.com/php/php-src/pull/4001 (PHP 7.4)
-  https://github.com/php/php-src/pull/4002 (PHP 8)

Additional Metadata
-------------------

:Original Authors: Bob Weinand, bobwei9@hotmail.com
:Slug: concatenation_precedence
:Wiki URL: https://wiki.php.net/rfc/concatenation_precedence
