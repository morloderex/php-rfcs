Functional Elements To Work With Aggregations
=============================================

:PHP-RFC: 0009
:Title: Functional Elements To Work With Aggregations
:Author: Lars Strojny <lstrojny@php.net>
:Status: Draft
:Type: Standards Track
:Created: 2023-08-22
:Version: 1.0

This RFC is still in progress

Functional elements to work with aggregations
=============================================

Abstract
~~~~~~~~

A common pattern in PHP is iterating through a list of objects and
executing certain methods of the objects. This is especially common when
it comes to 1:n-relations (e.g. one object, n adapters). This proposal
is meant to abstract those iterations in convenient functional
constructs by adding method call iterators and iterator functions.

Current usage patterns
~~~~~~~~~~~~~~~~~~~~~~

UC-1: Iterating over an aggregation of objects
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: php

   foreach ($list as $element) {
       $element->method();
   }

UC-2: Iterating over an aggregation of objects and keeping the results
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: php

   $result = array();
   foreach ($list as $element) {
       $result[] = $element->method();
   }

UC-3: Iterating over an aggregation of objects and conditionally executing a method
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: php

   foreach ($list as $element) {
       if ($element->conditionalMethod()) {
           $element->method();
       }
   }

UC-4: Iterating over an aggregation of objects and conditionally executing a method while keeping the results
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: php

   $result = array();
   foreach ($list as $element) {
       if ($element->conditionalMethod()) {
           $result[] = $element->method();
       }
   }

Required functionality
~~~~~~~~~~~~~~~~~~~~~~

Extracting the required functionality to leads to the following required
additions:

-  `class CallIterator </rfc/functional-elements/call-iterator>`__: a
   simple iterator which walks over a traversable list (including
   arrays) and calls a specified method. The CallIterator might
   optionally gather the results
-  `function
   is_traversable() </rfc//functional-elements/is-traversable>`__:
   Returns true if a list is traversable
   (Iterator/IteratorAggregate/array)
-  `function iterate() </rfc/functional-elements/iterate>`__: Walks over
   a traversable list and does nothing
-  function iterator_true(): Walks over a traversable list and assumes
   every element to be bool(true)
-  function iterator_false(): Walks over a traversable list and assumes
   every element to be bool(false)

Modified use cases
~~~~~~~~~~~~~~~~~~

.. _uc-1-iterating-over-an-aggregation-of-objects-1:

UC-1: Iterating over an aggregation of objects
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: php

   iterate(new CallIterator($list, 'method'));

.. _uc-2-iterating-over-an-aggregation-of-objects-and-keeping-the-results-1:

UC-2: Iterating over an aggregation of objects and keeping the results
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: php

   $result = iterate(new CallIterator($list, 'method'), true);

Additional Metadata
-------------------

:Class Calliterator: a simple iterator which walks over a traversable list (including arrays) and calls a specified method. The CallIterator might optionally gather the results
:Function Is_traversable(): Returns true if a list is traversable (Iterator/IteratorAggregate/array)
:Function Iterate(): Walks over a traversable list and does nothing
:Function Iterator_false(): Walks over a traversable list and assumes every element to be bool(false)
:Function Iterator_true(): Walks over a traversable list and assumes every element to be bool(true)
:Slug: functional-elements
:Wiki URL: https://wiki.php.net/rfc/functional-elements
