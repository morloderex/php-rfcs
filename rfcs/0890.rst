Static Class
============

:PHP-RFC: 0890
:Title: Static Class
:Author: Paul Morris <bilge@scriptfusion.com>
:Status: Draft
:Type: Standards Track
:Created: 2024-06-23
:PHP-Version: 8.4
:Version: 1.3

Introduction
------------

A static class is a class that cannot be instantiated, and whose members
(properties and methods) are all static. Implicit static classes can be
created today, by simply only including static members. However,
explicitly marking a class as static has several advantages:

-  Clear expression of developer intent.
-  Language-level compile-time checks to verify no instance members are
   included anywhere in the inheritance chain.
-  Language-level runtime checks to verify the class is never
   instantiated by any mechanism.

Of these advantages, the first can be somewhat mitigated with a
`userland
trait <https://github.com/ScriptFUSION/StaticClass/blob/master/src/StaticClass.php>`__,
but as such traits are non-standard, there is no consistent way to
identify them between projects. Moreover, the language-level checks
cannot be so easily satisfied, thus are better suited for inclusion in
PHP.

Proposal
--------

A *static class* is so marked with the existing ``static`` keyword,
adjacent to the class declaration.

.. code:: php

   static class Foo {}

We introduce the ``static`` keyword at the class level to preclude the
need to create a private constructor. That is,
``function __construct()`` is a compile-time error in a static class.
Furthermore, attempting to instantiate a static by any means, whether
with the ``new`` keyword, ``ReflectionClass::newInstance*`` methods or
``unserialize()`` hacks, is strictly forbidden and will result in a
runtime error.

Whilst the goals of this RFC so expressed are fairly straightforward, we
acknowledge there are many finer points to consider. In particular:

#. Should a static class imply ``final`` (as in C#)?
#. Should a static class prohibit inheritance (as in C#)?
#. Should a static class permit state?
#. Should traits be permitted in a static class?
#. Which magic methods should be supported?

To answer these questions, we consider the principal reason to mark a
class static is to move from an implicit declaration to the explicit.
Ergo, any decision precluding the developer from doing so is invalid,
since it coerces them to avoid explicit static, defeating its purpose.
Thus we derive the following razor:

   We cannot remove features from a static class that would otherwise be
   present in a standard class.

Following this razor we arrive at the following design.

#. A static class may be marked ``final``, but in the absence of such a
   mark, may still be extended.
#. A static class may extend other static classes, provided the parents
   are also marked ``static``.
#. A static class may have static properties.
#. A static class may use traits, provided they introduce no instance
   members.
#. All static magic methods must be supported, i.e. just
   ``__callStatic()``.

Static keyword for class members
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

One question our razor cannot answer is whether static member
declarations still require the ``static`` keyword in a static class.

Marking a class ``readonly`` makes marking properties with the same
*optional*, thus one might argue ``static`` should follow suit. However,
I opine it should not. Unlike ``readonly``, which typically applies to
properties declared near the head of the class (by convention) where the
same modifier is also applied, static members appear throughout the full
length of the class body. That is, it should be apparent when jumping
anywhere into a static class that its members are static, without having
to check the class declaration. Therefore this RFC still requires the
``static`` modifier for all members regardless of whether the class is
also marked ``static``, to prevent them appearing as instance members.
Aside, this is commensurate with the C# approach.

Mutually exclusive modifiers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When ``static`` is applied to a class, the following other class-level
modifiers become invalid and will raise compile-time errors.

-  ``abstract`` — This modifier exists to denote a class cannot be
   instantiated, but the ``static`` modifier already carries this
   meaning.
-  ``readonly`` — Read-only properties are only supported for instance
   properties, but instance properties are forbidden by ``static``.

Inheritance
~~~~~~~~~~~

A static class only permits extending a parent class that is also marked
``static``. A non-static class cannot extend a static class.

Anonymous classes
~~~~~~~~~~~~~~~~~

Anonymous classes are always instantiated and thus at odds with the
concept of a static class. That is, the notion of an *anonymous static
class* is inherently invalid and not supported.

Dynamic properties
~~~~~~~~~~~~~~~~~~

Undeclared object properties can be added *dynamically* to object
instances, but since static classes cannot be instantiated, there is
nothing to attach such properties to. Static properties must always be
declared explicitly.

Reflection extensions
~~~~~~~~~~~~~~~~~~~~~

A new ``ReflectionClass::isStatic`` method should be added, returning
``true`` when the class is so marked, otherwise ``false``.

Backward Incompatible Changes
-----------------------------

None known.

Future Scope
------------

#. As noted in `Readonly properties
   2.0 <readonly_properties_v2#restrictions>`__, read-only static
   properties are not supported due to a technical limitation. If that
   limitation should ever be lifted, we could revisit lifting the
   restriction on mutual exclusivity with the ``readonly`` modifier.
#. Static interfaces may be introduced later if there is such a demand.
#. Static traits may be introduced later if there is such a demand.

Proposed Voting Choices
-----------------------

-  A simple yes/no vote to include this feature.

References
----------

-  `Static Classes and Static Class Members (C# Programming
   Guide) <https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members>`__

Rejected Features
-----------------

Forbidding static class type declarations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It should be regarded as an error to use a static class as a type
declaration, since they cannot be instantiated and thus the requirement
can never be fulfilled by a matching instance. However, it is not
technically possible to forbid such declarations within PHP itself
because type checking is done when an instance is passed at runtime (and
we can never have such an instance). The engine does not support type
checking at compile time for function/method signatures. Such a check
would be a good candidate for third party static analysers instead.

Special thanks
--------------

I would feel remiss not to give thanks to the following list
contributors whose high quality feedback made significant contributions
to this RFC.

-  Mike Schinkel
-  Alexandru Pătrănescu
-  Claude Pache
-  Everyone else who engaged with this proposal.

Thank you!

Additional Metadata
-------------------

:Implementation: https://github.com/php/php-src/pull/14861
:Original Authors: Paul Morris bilge@scriptfusion.com
:Original PHP Version: PHP 8.4
:Original Status: Under Discussion
:Slug: static_class
:Wiki URL: https://wiki.php.net/rfc/static_class
