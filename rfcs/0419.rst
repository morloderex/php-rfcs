Trailing Commas In List Syntax
==============================

:PHP-RFC: 0419
:Title: Trailing Commas In List Syntax
:Author: Sammy Kaye Powers <me@sammyk.me>
:Status: Implemented
:Type: Standards Track
:Created: 2015-11-03
:PHP-Version: 7.2
:Version: 0.1

Introduction
------------

This RFC proposes allowing trailing commas for all list syntax.

Per the feedback on the internals list, this RFC broadens the scope of
the `original RFC to allow trailing commas in function
arguments </rfc/revisit-trailing-comma-function-args>`__ to all list
syntax.

Arrays in PHP have long since supported trailing commas.

Trailing array commas
^^^^^^^^^^^^^^^^^^^^^

.. code:: php

   $foo = [
       'foo',
       'bar',
   ];

This makes for clean diffs and easy appending of new values in
user-land.

Unfortunately, the other lists do not share the same luxury.

Raises a parse error
^^^^^^^^^^^^^^^^^^^^

.. code:: php

   <?php
   use Foo\Bar\{
       Foo,
       Bar,
       Baz,
   };

Proposal
--------

This RFC proposes allowing trailing commas in all list syntax in order
to:

#. Offer a consistent API and match the existing array functionality.
#. Make it easy to append new elements to a list in user-land.
#. Have cleaner diffs (so only one line shows up as being modified when
   appending elements instead of two).
#. It makes code reviews a tiny bit faster and for really large
   codebases, that time adds up. (`Sara
   Golemon <https://people.php.net/user.php?username=pollita>`__
   explained `why HHVM added the trailing comma
   syntax <https://www.mail-archive.com/internals@lists.php.net/msg81138.html>`__.)

The following lists would allow trailing commas:

#. Grouped namepaces
#. Function/method arguments (declarations & calls)
#. Interface implementations on a class
#. Trait implementations on a class
#. Class member lists
#. Inheriting variables from the parent scope in anonymous functions

`Marcio Almada <https://people.php.net/user.php?username=marcio>`__
posted a gist with `examples of trailing
commas <https://gist.github.com/marcioAlmada/75f8f1d47da5dcac2e57>`__
for the various lists (shown below):

Trailing commas for all lists
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: php

   <?php
   // Grouped namepaces
   use Foo\Bar\{ Foo, Bar, Baz, };

   // Arrays (already possible)
   $array = [1, 2, 3,];

   // Function/method arguments (call)
   fooCall($arg1, $arg2, $arg3,);

   class Foo implements
       // Interface implementations on a class
       FooInterface,
       BarInterface,
       BazInterface,
   {
       // Trait implementations on a class
       use
           FooTrait,
           BarTrait,
           BazTrait,
       ;
       
       // Class member lists
       const
           A = 1010,
           B = 1021,
           C = 1032,
           D = 1043,
       ;
       protected
           $a = 'foo',
           $b = 'bar',
           $c = 'baz',
       ;
       private
           $blah,
       ;
       
       // Function/method arguments (declaration)
       function something(FooBarBazInterface $in, FooBarBazInterface $out,) : bool
       {
       }
   }

   // Inheriting variables from the parent scope in anonymous functions
   $foo = function ($bar) use (
       $a,
       $b,
       $c,
   ) {
       // . . . 
   };

Discussion Points
-----------------

There are a number of questions that have already been discussed on the
internals list.

How will it work with variadics?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

PHP allows for multiple splats in one call so trailing commas would work
the same way.

.. code:: php

   foo(
       ...$args,
       ...$moreArgs,
       ...$evenMoreArgs,
   );

Why allocate resources to make this happen
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The actual implementation for adding tailing commas to function
arguments/calls is `two
lines <https://github.com/sgolemon/php-src/compare/master...trailing-comma#diff-7eff82c2c5b45db512a9dc49fb990bb8L517>`__.
Implementing the functionality to all lists would not require many more
changes to the php-src codebase.

You could just use leading commas
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: php

   function foo(
      $bar
     ,$baz
     ,$boo
   ) { ... }

#. Leading commas would break away from PSRs
#. Parsing leading commas cause cognitive overhead whereas standard
   practice calls for trailing commas

The arguments for & against are weak
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**TL;DR:**

-  **For it:** It's handy. (And the reasons detailed above).
-  **Against:** It's ugly. There are only minor gains.

Backward Incompatible Changes
-----------------------------

This change would have no breaking changes.

Proposed PHP Version
--------------------

PHP 7.2

Proposed Voting Choices
-----------------------

Each trailing comma list syntax has its own vote and requires a 2/3
majority to pass.

Function/method arguments (declarations & calls)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: php

   // Function/method arguments (call)
   fooCall(
       $arg1,
       $arg2,
       $arg3,
   );
       
   // Function/method arguments (declaration)
   function something(
       FooBarBazInterface $in,
       FooBarBazInterface $out,
   ) : bool {
   }

Question: Allow trailing commas in function/method arguments (declarations and calls)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Voting Choices
^^^^^^^^^^^^^^

-  Yes
-  No

Grouped namepaces
~~~~~~~~~~~~~~~~~

.. code:: php

   <?php
   use Foo\Bar\{
       Foo,
       Bar,
       Baz,
   };

Question: Allow trailing commas in grouped namepaces
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. _voting-choices-1:

Voting Choices
^^^^^^^^^^^^^^

-  Yes
-  No

Interface implementations on a class
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: php

   class Foo implements
       FooInterface,
       BarInterface,
       BazInterface,
   {
   }

Question: Allow trailing commas in interface implementations on a class
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. _voting-choices-2:

Voting Choices
^^^^^^^^^^^^^^

-  Yes
-  No

Trait implementations on a class
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: php

   class Foo
   {
       use
           FooTrait,
           BarTrait,
           BazTrait,
       ;
   }

Question: Allow trailing commas in trait implementations on a class
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. _voting-choices-3:

Voting Choices
^^^^^^^^^^^^^^

-  Yes
-  No

Class member lists
~~~~~~~~~~~~~~~~~~

.. code:: php

   class Foo
   {
       const
           A = 1010,
           B = 1021,
           C = 1032,
           D = 1043,
       ;
       protected
           $a = 'foo',
           $b = 'bar',
           $c = 'baz',
       ;
       private
           $blah,
       ;
   }

Question: Allow trailing commas in class member lists
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. _voting-choices-4:

Voting Choices
^^^^^^^^^^^^^^

-  Yes
-  No

Inheriting variables from the parent scope in anonymous functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: php

   $foo = function ($bar) use (
       $a,
       $b,
       $c,
   ) {
       // . . . 
   };

Question: Allow trailing commas in use lists for anonymous functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. _voting-choices-5:

Voting Choices
^^^^^^^^^^^^^^

-  Yes
-  No

Patches and Tests
-----------------

The `original patch by Sara
Golemon <https://github.com/sgolemon/php-src/compare/master...trailing-comma>`__.

Additional Metadata
-------------------

:First Published At: https://wiki.php.net/rfc/revisit-trailing-comma-function-args, https://wiki.php.net/rfc/trailing-comma-function-args
:Original Authors: Sammy Kaye Powers, me@sammyk.me
:Original Date: 2015-11-03 (discussion); 2017-01-27 (voting)
:Original Status: Implemented in PHP 7.2 (Grouped namepaces only)
:Slug: list-syntax-trailing-commas
:Wiki URL: https://wiki.php.net/rfc/list-syntax-trailing-commas
