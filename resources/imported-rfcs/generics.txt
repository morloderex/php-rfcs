====== PHP RFC: Introduce generics into PHP ======
  * Version: 0.2
  * Date: 2015-08-29
  * Author: Ben Scholzen 'DASPRiD', mail@dasprids.de
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/generics

===== Introduction =====
Many languages, including hack by now, support generics, which for instance allow to create and typehint for specialized collections without the need to implement such a collection for every single entity. This RFC proposes the introduction of generics into PHP. Adding generic support to existing collections, e.g. in SPL, may be part of another RFC.

Generics offer a great way of avoiding duplicate code, where many classes only differ in the accepted variable types. The most prominent example are collections, like simple lists, priority queues, heaps and such. Instead of having to implement such a collection for every object which requires one, you can simply create a generic collection and have it used for all object.

===== Proposal =====
A class is considered generic when it has one or more types defined. The
defined types can be used in both method parameter type hinting and return type
hinting.

<code php>
class Entry<KeyType, ValueType>
{
    protected $key;
    protected $value;

    public function __construct(KeyType $key, ValueType $value)
    {
        $this->key   = $key;
        $this->value = $value;
    }
    
    public function getKey(): KeyType
    {
        return $this->key;
    }
    
    public function getValue(): ValueType
    {
        return $this->value;
    }
}

$entry = new Entry<int, string>(1, 'test'); // Valid
$entry = new Entry(1, 'test'); // Throws an EngineException about missing types
</code>

Functions and methods are able to type hint against specific variations of a
given class:

<code php>
function foo(Entry<int, string> $entry)
{
    // â€¦
}

foo(new Entry<int, string>(1, 'test')); // Valid
foo(new Entry<int, int>(1, 2)); // Throws an EngineException about invalid argument
</code>

A generic class can also force a type to extend a specific class or implement
a specific interface:

<code php>
class ClassA<Foo : \Bar>
{
}
</code>

===== Backward Incompatible Changes =====
No BC breaks are expected from this proposal.

===== Proposed PHP Version(s) =====
This proposal aims for PHP 7.1.

===== Proposed Voting Choices =====
For this proposal to be accepted, a 2/3 majority is required.

===== Patches and Tests =====
No patch has been written for this yet. As I'm not a C-coder myself, I encourage others to write a patch based on this proposal.

===== References =====
https://en.wikipedia.org/wiki/Generic_programming