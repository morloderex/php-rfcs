====== PHP RFC: Marking return values as important (#[\NoDiscard]) ======
  * Version: 1.0
  * Date: 2025-01-27
  * Author: Tim DÃ¼sterhus (tim@tideways-gmbh.com), Volker Dusch (volker@tideways-gmbh.com)
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/marking_return_value_as_important

This is a suggested template for PHP Request for Comments (RFCs). Change this template to suit your RFC.  Not all RFCs need to be tightly specified.  Not all RFCs need all the sections below.
Read https://wiki.php.net/rfc/howto carefully!


Quoting [[http://news.php.net/php.internals/71525|Rasmus]]:

> PHP is and should remain:
> 1) a pragmatic web-focused language
> 2) a loosely typed language
> 3) a language which caters to the skill-levels and platforms of a wide range of users

Your RFC should move PHP forward following his vision. As [[http://news.php.net/php.internals/66065|said by Zeev Suraski]] "Consider only features which have significant traction to a
large chunk of our userbase, and not something that could be useful in some
extremely specialized edge cases [...] Make sure you think about the full context, the huge audience out there, the consequences of  making the learning curve steeper with
every new feature, and the scope of the goodness that those new features bring."

===== Introduction =====
The elevator pitch for the RFC. The first paragraph of this section will be slightly larger to give it emphasis; please write a good introduction.

===== Proposal =====
All the features and examples of the proposal.

To [[http://news.php.net/php.internals/66051|paraphrase Zeev Suraski]], explain how the proposal brings substantial value to be considered
for inclusion in one of the world's most popular programming languages.

Remember that the RFC contents should be easily reusable in the PHP Documentation.

If applicable, you may wish to use the language specification as a reference.

==== Native functions where the attribute is applied ====

As part of this RFC, the following native functions and methods shall have the attribute applied:

  * <php>flock()</php>: Ignoring the failure to obtain a lock might result in silent data corruption. Exception-based error handling cannot be used, due to the <php>LOCK_NB</php> flag, which is meant to gracefully handle files that are already locked. Furthermore issues in locking will only appear under heavy contention, making it hard to find issues by automated testing.
  * <php>DateTimeImmutable::set*()</php>: The methods are badly named, because they do not actually set the updated value the <php>DateTimeImmutable</php> object itself, but return a new instance instead. An established naming scheme for this kind of method would nowadays be <php>with*()</php>. This naming can lead to subtle issues when forgetting to use the return value when migrating from <php>DateTime</php> to <php>DateTimeImmutable</php>.

===== Backward Incompatible Changes =====

The class-name <php>NoDiscard</php> will no longer be available within the global namespace. A GitHub search for [[https://github.com/search?q=language%3APHP%20symbol%3ANoDiscard&type=code|language:PHP symbol:NoDiscard]] does not reveal any use of this class-name, making this a theoretical issue.

Functions and methods having the attribute might emit a <php>E_WARNING</php> if they are unsafely used. If a throwing error handler is used this may result in a breaking change. As the attribute shall only be applied to functions and methods were not using the return value has a significant impact on correct functionality, we consider the benefit of pointing out the error to the user to outweigh the drawbacks, since suppressing the error by assigning to a dummy variable can be reliably performed in a way that is compatible with older PHP versions.

===== Proposed PHP Version(s) =====

Next PHP 8.x (8.5).

===== RFC Impact =====

==== To SAPIs ====

None.

==== To Existing Extensions ====

None.

==== To Opcache ====

The attribute adds new semantics to a function or method call and thus requires changes to OPcache. The current implementation already passes all tests with OPcache enabled, but it does not yet include JIT support.

==== New Constants ====

None.

==== php.ini Defaults ====

None.

===== Open Issues =====

None.

===== Unaffected PHP Functionality =====

This RFC only affects calls to functions and methods that have the attribute applied, this includes a limited number of native functions and methods that is listed above. Calls to other functions or methods and any other functionality is unaffected.

===== Future Scope =====

None.

===== Proposed Voting Choices =====

<doodle title="Implement the #[\NoDiscard] attribute as described?" auth="timwolla" voteType="single" closed="true" closeon="2024-11-27T14:00:00Z">
   * Yes
   * No
</doodle>

<doodle title="Implement the (void) cast to reliably suppress #[\NoDiscard]?" auth="timwolla" voteType="single" closed="true" closeon="2024-11-27T14:00:00Z">
   * Yes
   * No
</doodle>

===== Patches and Tests =====
Links to any external patches and tests go here.

If there is no patch, make it clear who will create a patch, or whether a volunteer to help with implementation is needed.

Make it clear if the patch is intended to be the final patch, or is just a prototype.

For changes affecting the core language, you should also provide a patch for the language specification.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged into
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
  - a link to the language specification section (if any)

===== References =====
Links to external references, discussions or RFCs

===== Rejected Features =====

None.