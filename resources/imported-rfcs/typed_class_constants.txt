====== PHP RFC: Typed class constants ======
  * Date: 2020-07-06
  * Author: Benas Seliuginas <benas.molis.iml@gmail.com>
  * Target version: PHP 8.1
  * Status: Draft

===== Introduction =====
TODO

===== Proposal =====
TODO

==== Supported types ====
Class constant type declarations support all type declarations supported by PHP, with the exception of ''void'', ''callable'', ''object'' and class names.

TODO

Meanwhile, ''void'' and ''callable'' types are not supported due to the same issues as discussed in the [[https://wiki.php.net/rfc/typed_properties_v2#supported_types|typed properties v2 RFC]].

==== Strict and coercive typing modes ====
The ''strict_types'' mode has no impact on behavior since class constants are immutable and thus, the type check will be performed anyways. This is consistent with the handling of typed properties' default values.

==== Inheritance and variance ====
Class constants are covariant. This means that the type of a class constant is not allowed to be widen during inheritance. If the parent class constant is private, then the type may change arbitrarily.

<code php>
class Test {
	private const int FOO = 1;
	public const mixed BAR = 1;
	public const int BAZ = 1;
}

class Test2 extends Test {
	// this is legal (because Test::FOO is private)
	public const string FOO = 'a';

	// this is legal
	public const int BAR = 0;

	// this is illegal
	public const mixed BAZ = 0;
}
</code>

TODO

==== Reflection ====
The ''ReflectionClassConstant'' class is extended by two methods:
<code php>
class ReflectionClassConstant implements Reflector {
	...

	public function getType(): ?ReflectionType {}
	public function hasType(): bool {}
}
</code>
''getType()'' returns a ''ReflectionType'' if the class constant has a type, and null otherwise.
''hasType()'' returns ''true'' if the class constant has a type, and false otherwise. The behavior matches that of ''getType()''/''hasType()'' for parameters/properties and ''getReturnType()''/''hasReturnType()'' for return types.

===== Backwards incompatible changes =====
None.

===== Impact on extensions =====
None.

To preserve backwards compatibility with extensions, a new function ''zend_declare_typed_class_constant()'' is introduced while keeping the original ''zend_declare_class_constant_ex()'' function intact.

===== Vote =====
2/3 majority Yes/No.

===== Implementation =====
[[https://github.com/php/php-src/pull/5815|GitHub Pull Request]]