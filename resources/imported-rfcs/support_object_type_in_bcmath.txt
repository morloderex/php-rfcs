====== PHP RFC: Your Title Here ======
  * Version: 0.1
  * Date: 2024-03-24
  * Author: Saki Takamachi, saki@php.net
  * Status: Draft
  * First Published at: https://wiki.php.net/rfc/support_object_type_in_bcmath

===== Introduction =====
BCMath currently only supports procedural functionality and does not support object types. Object-based programming is mainstream these days, so it's a bit outdated from that perspective. Also, the GMP extension, which is likely to have similar needs to BCMath, already supports object types.

Of course, it is also possible to treat BCMath like an object if you devise some ideas in userland. However, things like operator overloading cannot be implemented in userland.

===== Proposal =====
This RFC proposes support for object types in BCMath. Please take a look at the usage example first.

<code>
$num = new BcNum('1');
$num2 = new BcNum('2');
$result = $num + $num2;

$result->getValue(); // '3'
var_dump($num > $num2); // false
</code>

Operator overloading allows you to treat objects as if they were computing or comparing primitive values. Also, for reasons explained later, it supports not only calculations using operators, but also calculations using methods.

The following example is equivalent to the above example.

<code>
$num = new BcNum('1');
$num2 = new BcNum('2');
$result = $num->add($num2);

$result->getValue(); // '3'
var_dump($num->gt($num2)); // false
</code>

`new BCMath()` is difficult to understand what "BCMath object" specifically refers to, so we will use "BcNum". The reason it's "BcNum" instead of "BCNum" is because it needs to follow current PHP naming conventions.

==== Constructor ====

The constructor signature is:
<code>
public function __construct(string $num, ?int $scale = null) {}
</code>

$scale is optional. if omitted, the BCMath global setting will be used. Adjusts the digits in $num based on the scale set in the constructor. See code example.
<code>
$num = new BcNum('1.23456789', 4);
$num->getValue(); // '1.2345'

$num2 = new BcNum('1', 4);
$num2->getValue(); // '1.0000'
</code>

At this point, the digits are already adjusted.

==== It is immutable ====
There is a concept called "value object" that is often seen in domain-driven design, etc., and BcNum is exactly what should be treated as a value object. That is, the object must be immutable.

No matter what we do, the original object remains unchanged and always returns a new object.

==== It is immutable ====

===== Backward Incompatible Changes =====
This is a new feature, so it doesn't break anything that already exists. The only concern is whether there is already a library that defines a class called "BcNum" without a namespace.

See search results on GitHub.
https://github.com/search?type=code&auto_enroll=true&q=%22new+BcNum%28%22+language%3APHP+

There's only one result, and it's my repository, so there's nothing wrong with it.

===== Proposed PHP Version(s) =====
I suggest implementing it in the next minor version (currently 8.4) or the next major version (currently 9.x).
Personally I'd like 8.4, but it might be worth a second vote on this. (Before that, it would be helpful if we could discuss this.)

===== RFC Impact =====
==== To SAPIs ====
None.

==== To Existing Extensions ====
Only BCMath is affected.

==== To Opcache ====
None;

==== New Constants ====
None.

==== php.ini Defaults ====
None.

===== Open Issues =====
None.

===== Unaffected PHP Functionality =====
There is no effect on anything other than BCMath.

===== Future Scope =====
None;

===== Proposed Voting Choices =====
WIP

===== Patches and Tests =====
Prototype:
https://github.com/php/php-src/pull/13741

===== Implementation =====
It's still a prototype.

===== References =====
https://externals.io/message/122651 (Mailing list thread before creating RFC)

===== Rejected Features =====
None;