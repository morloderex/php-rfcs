
====== PHP RFC: Return Type-hinting ======
  * Version: 0.1
  * Date: 2014-03-20 
  * Author: Levi Morrison <levim@php.net>
  * Status: Draft
  * First Published at: https://wiki.php.net/rfc/returntypehinting

===== Introduction =====
Many developers would like to be able to use type-hint hinting in return values. The basic idea has been proposed in at least two RFCs and has had a few other discussions (see [[#references]]).

===== Proposal =====
This proposal adds an optional return type-hint to all types of function declarations including closures, functions, interface method declarations and class declarations.

Example of ''function_declaration_stmt'':

  "function" ["&"] T_STRING "(" parameter_list ")" [":"  (T_STRING | array | callable)] "{"
      inner_statement_list
  "}"

==== Variance and Signature Validation ====
The enforcement of the type-hint in inheritance will be covariant. This differs from parameter variance but is consistent with many other languages((C++ and Java use invariant parameters and covariant return types, just as is proposed here.))

If a mismatch is detected an ''E_RECOVERABLE_ERROR'' will be issued.

Example of legal covariant return-type:
<PHP>
interface UserGateway {}

class UserGateway_MySql implements UserGateway {}

interface UserGatewayFactory {
    function create() : UserGateway;
}

class UserGatewayFactory_Production {
    function create() : UserGateway_MySql {
        return new UserGateway_MySql;
    }   
}
</PHP>

==== Examples ====
Valid:
<PHP>
function ini_get_all ($extension, $details = true) : array {
    $config = [];
    // ...
    return $config;
 }
</PHP>

Invalid:
<PHP>
// return type does not match type-hint
function foo() : array {
    return null;
}

// invalid type-hint
function foo() : int {
    return 42;
}
</PHP>

==== Position of Type-hint ====
The two major conventions in other programming languages for placing return type information are:

  * Before the function name.
  * After the parameter list.

The former position has been proposed in the past and the RFCs were either declined or withdrawn. The most commonly cited issue is that many developers wanted to preserve the ability to search for <php>function foo</php> to be able to find the definition for ''foo''.

The latter position is used in many languages based on mathematical notations; Facebook's Hack language also has chosen this position. This position will have no conflicts in the parser and will be easy for us to use.

===== Backward Incompatible Changes =====

None known.

===== Proposed PHP Version(s) =====
As there are no known BC breaks this RFC targets PHP 5.7. If a BC break is discovered it will be proposed for PHP 6.0.

===== SAPIs Impacted =====
There is no impact to the various SAPIs.

===== Impact to Existing Extensions =====
There is no BC-break impact to extensions.

===== Open Issues =====
Consider the following function: 

<PHP>
function foo() : DateTime { 
    return null; 
}
</PHP>

It declares that it will return ''DateTime'' but returns <php>null</php>. If we use current type-hint semantics this will fail on this value.

We can introduce another syntax to allow null to be passed. One option is to reuse the parameter type-hint syntax:
<PHP>
function foo() : DateTime = null { 
    return null; 
}
</PHP>

Another option is to use Hack's syntax:
<PHP>
function foo() : ?DateTime { 
    return null; 
}
</PHP>

We could choose to delay this decision to a later date; until then there would simply not be a way to allow <php>null</php> in these type-hints.

===== Unaffected PHP Functionality =====
This RFC does not alter the meaning or correctness of any existing code; all existing code will continue to work as expected.

This RFC does not alter existing type-hint syntax or semantics. 

===== Proposed Voting Choices =====
This RFC modifies PHP syntax and requires a two-third majority of votes.

===== Patches and Tests =====
There is currently no patch.

===== Implementation =====
There is currently no implementation.

Joe Watkins has offered to provide a patch.

===== References =====
FIXME Link to former RFCs and discussions.

===== Rejected Features =====
No rejected features at this time.