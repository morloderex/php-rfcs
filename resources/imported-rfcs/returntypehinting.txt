
====== PHP RFC: Return Type-hinting ======
  * Version: 0.1
  * Date: 2014-03-20 
  * Author: Levi Morrison <levim@php.net>
  * Status: Draft
  * First Published at: https://wiki.php.net/rfc/returntypehinting

===== Introduction =====
Many developers would like to be able to use type-hint hinting in return values. The basic idea has been proposed in at least three RFCs and has had a few other discussions (see [[#references]]).

===== Proposal =====
This proposal adds an optional return type-hint to all types of function declarations including closures, functions, interface method declarations and class declarations.

Example of ''function_declaration_stmt'':

  "function" ["&"] T_STRING "(" parameter_list ")" [":"  (T_STRING | array | callable)] "{"
      inner_statement_list
  "}"

==== Variance and Signature Validation ====
The enforcement of the type-hint in inheritance will be covariant. Covariant return types is considered to be type sound and is used in many other languages((C++, Java and others use covariant return types, just as is proposed here.)). The covariance allows an overrider to declare a return type that is a subclass of the original return type; this is illustrated in the [[#examples]] below.

If a mismatch is detected during compile time (eg a class improperly overriding a return type) then ''E_COMPILE_ERROR'' will be issued. If a type mismatch is detected when the function returns then ''E_RECOVERABLE_ERROR'' will be issued.


==== Position of Type-hint ====
The two major conventions in other programming languages for placing return type information are:

  * Before the function name: <php><return_type> name(){}</php>
  * After the parameter list: <php>name() <return_type> {}</php>

The former position has been proposed in the past and the RFCs were either declined or withdrawn. The most commonly cited issue is that many developers wanted to preserve the ability to search for <php>function foo</php> to be able to find the definition for ''foo''.

The latter position is used in some functional languages; Facebook's Hack language also declared their return types here. Declaring the return type after the parameter list will have no conflicts in the parser.

==== Examples ====
Here are some examples of valid and invalid uses.

=== Examples of Valid Use ===

<PHP>
// Covariant return-type:

interface Collection {
    function map(callable $fn): Collection;
}

interface Set extends Collection {
    function map(callable $fn): Set;
}
</PHP>
<PHP>
// Overriding a method that did not have a return type:

interface Iterator {
    function rewind();
    function valid();
    function key();
    function current();
    function next();
}

class CommentsIterator implements Iterator {
    function current() : Comment;
}
</PHP>
<PHP>
// Using a Generator:
function filter(Traversable $in, callable $filter): Generator {
    foreach ($in as $key => $value) {
        yield $filter($key, $value);
    }
} 
</PHP>

=== Examples of Invalid Use ===
<PHP>
// return type does not match type-hint
function get_config(): array {
    return null;
}
</PHP>
<PHP>
// invalid type-hint
function answer(): int {
    return 42;
}
</PHP>
<PHP>
// Missing return type on override:

interface UserGateway {
    function find($id) : User; 
}

class UserGateway_MySql implements UserGateway {
    function find($id); // must return User or subtype of User
}
</PHP>
<PHP>
// Defining a return type on Generator that isn't Generator:
function filter(Traversable $in, callable $filter): array {
    foreach ($in as $key => $value) {
        yield $filter($key, $value);
    }
} 
</PHP>

==== Differences from Past RFCs ====
This proposal differs from past RFCs in several ways:

  * **We keep the current type-hint options.** Past proposals have suggested types such as <php>void</php>, <php>int</php>, <php>string</php> or <php>scalar</php>.
  * **We allow type-hints on all function types.** Will Fitch's proposal suggested adding it for methods only.
  * **We keep the current search patterns.** You can still search for <php>function foo</php> to find <php>foo</php>'s definition; all previous RFCs broke this.

===== Backward Incompatible Changes =====
None known.

===== Proposed PHP Version(s) =====
As there are no known BC breaks this RFC targets PHP 5.7. If a BC break is discovered it will be proposed for PHP 6.0.

===== SAPIs Impacted =====
There is no impact to the various SAPIs.

===== Impact to Existing Extensions =====
There is no impact to any known extension.

===== Open Issues =====
Consider the following function: 

<PHP>
function foo() : DateTime { 
    return null; 
}
</PHP>

It declares that it will return ''DateTime'' but returns <php>null</php>. If we use current type-hint semantics this will fail on this value but it is common to use <php>null</php> to indicate an 'empty' or missing object.

We can introduce another syntax to allow <php>null</php> to be passed. One option is to reuse the parameter type-hint syntax:
<PHP>
function foo() : DateTime = null { 
    return null; 
}
</PHP>

Another option is to use Hack's syntax:
<PHP>
function foo() : ?DateTime { 
    return null; 
}
</PHP>

We could choose to delay this decision to a later date; until then there would simply not be a way to allow <php>null</php> in these type-hints.

===== Unaffected PHP Functionality =====
This RFC does not alter the meaning or correctness of any existing code; all existing code will continue to work as expected.

This RFC does not alter existing type-hint syntax or semantics. 

===== Proposed Voting Choices =====
This RFC modifies PHP syntax and requires a two-third majority of votes.

===== Patches and Tests =====
Currently there isn't a patch; Joe Watkins has offered to provide one.

===== References =====

  * [[https://wiki.php.net/rfc/typehint|Return value and parameter type hint]] by Felipe; 2008
  * [[https://wiki.php.net/rfc/returntypehint|Return Type-hint]] by Felipe; 2010
  * [[https://wiki.php.net/rfc/returntypehint2|Method Return Type-hints]] by Will Fitch; 2011

===== Rejected Features =====
No rejected features at this time.

===== Future Work =====

  * Reflection support
  * Consider allowing extensions to define type-hints for return values.