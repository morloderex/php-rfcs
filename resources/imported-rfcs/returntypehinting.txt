
====== PHP RFC: Return Type-hinting ======
  * Version: 0.1
  * Date: 2014-03-20 
  * Author: Levi Morrison <levim@php.net>
  * Status: Draft
  * First Published at: https://wiki.php.net/rfc/returntypehinting

===== Introduction =====

Many developers would like to be able to use type-hint hinting in return values.

===== Proposal =====

This proposal adds an optional return type-hint to all types of function declarations. If a type-hint for the return type is provided then the engine will ensure that the return value type matches the type-hint; if no type-hint is provided then there is no type-check. If the return value does not match the type-hint then a catchable fatal error will be issued (same as type-hints for parameters).

Here is an example of the ''ini_get_all'' signature using the type-hint for a return type:

    function ini_get_all ($extension, $details = true) : array {
        // ...
    }

==== Position of Type-hint ====

The two major conventions in other programming languages for placing return type information are:

  * Before the function name.
  * After the parameter list.

The former position has been proposed in the past and the RFCs were either declined or withdrawn. The most commonly cited issue is that many developers wanted to preserve the ability to search for ''function foo'' to be able to find the definition for ''foo''.

The latter position is used in many languages based on mathematical notations; Facebook's Hack language also has chosen this position. This position will have no conflicts in the parser and will be easy for us to use.

===== Backward Incompatible Changes =====

None known.

===== Proposed PHP Version(s) =====

As there are no known BC breaks this RFC targets PHP 5.7. If a BC break is discovered it will be proposed for PHP 6.0.

===== SAPIs Impacted =====

There is no impact to the various SAPIs.

===== Impact to Existing Extensions =====

There is no BC-break impact to extensions.

===== Open Issues =====

Consider the following function: 

    function foo() : DateTime { 
        return null; 
    }

It declares that it will return ''DateTime'' but returns ''null''. If we use current type-hint semantics this will fail on this value.

We can introduce another syntax to allow null to be passed. One option is to reuse the parameter type-hint syntax:

    function foo() : DateTime = null { 
        return null; 
    }

Another option is to use Hack's syntax:

    function foo() : ?DateTime { 
        return null; 
    }

We could choose to delay this decision to a later date; until then there would simply not be a way to allow ''null'' in these type-hints.

===== Unaffected PHP Functionality =====

This RFC does not alter the meaning or correctness of any existing code; all existing code will continue to work as expected.

===== Proposed Voting Choices =====

This RFC modifies PHP syntax and requires a two-third majority of votes.

===== Patches and Tests =====

There is currently no patch.

===== Implementation =====

There is currently no implementation.

===== References =====

No discussion has taken part yet.

===== Rejected Features =====

No rejected features at this time.