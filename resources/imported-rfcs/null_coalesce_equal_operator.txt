====== PHP RFC: Null Coalescing Assignment Operator ======
  * Version: 0.1.0
  * Date: 2016-03-09
  * Author: Midori Kocak, mtkocak@gmail.com
  * Status: Implemented (in PHP 7.4)
  * First Published at: http://wiki.php.net/rfc/null_coalesce_equal_operator


===== Introduction =====

Combined assignment operators have been around since 1970's, appearing first in the C Programming Language. For example, ''<nowiki>$x = $x + 3</nowiki>''  can be shortened to ''<nowiki>$x += 3</nowiki>''. With PHP being a web focused language, the ''??'' operator is often used to check something's existence like ''<nowiki>$username = $_GET['user'] ?? 'nobody';</nowiki>''  However, because variable names are often much longer than $username, the use of ?? for self assignment creates repeated code, like ''<nowiki>$this->request->data['comments']['user_id'] = $this->request->data['comments']['user_id'] ?? ‘value’;</nowiki>''. It is also intuitive to use combined assignment operator null coalesce checking for self assignment. 

===== Proposal =====

Despite ''??'' coalescing operator being a comparison operator, coalesce equal or ''??=''operator is an assignment operator. If the left parameter is null, assigns the value of the right paramater to the left one. If the value is not null, nothing is made.

<code php>
// The folloving lines are doing the same
$this->request->data['comments']['user_id'] = $this->request->data['comments']['user_id'] ?? 'value';
// Instead of repeating variables with long names, the equal coalesce operator is used
$this->request->data['comments']['user_id'] ??= 'value';
</code>

The value of right-hand parameter is copied if the left-hand parameter is null. 

===== Proposed PHP Version(s) =====

This proposed for the next PHP 7.x.

===== Patches and Tests =====

A pull request with a working implementation, targeting master, is here: https://github.com/php/php-src/pull/1795

===== Vote =====

As this is a language change, a 2/3 majority is required. A straight Yes/No vote is being held.

Voting started at 2016/03/24 16:08 and will be closed at 2016/04/02.

<doodle title="Approve Equal Null Coalesce Operator RFC and merge patch into master?" auth="midorkocak" voteType="single" closed="true">
   * Yes
   * No
</doodle>

===== References =====
Links to external references, discussions or RFCs

http://programmers.stackexchange.com/questions/134118/why-are-shortcuts-like-x-y-considered-good-practice

===== Rejected Features =====
Keep this updated with features that were discussed on the mail lists.