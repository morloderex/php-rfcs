====== PHP RFC: Consistent Function Names ======
  * Version: 0.9
  * Date: 2015-03-01
  * Author: Yasuo Ohgaki <yohgaki@ohgaki.net>
  * Status: Under Discussion
  * First Published at: http://wiki.php.net/rfc/consistent_function_names


===== Introduction =====

There are many functions that named before naming standard in [[https://github.com/php/php-src/blob/master/CODING_STANDARDS|CODING_STANDARDS]]. Therefore, PHP has function names like **phpversion()** and **htmlspecialchars()**.

First of all, this RFC will not remove any old function names. This RFC only proposes renaming offending function names and have aliases for old names. 

Without cleanups, PHP may have inconsistent API names even if PHP has new APIs for the same purpose because we care compatibility a lot. Unless we cleanup function names at some point, we may keep inconsistent function names forever.

==== Discussions ====

=== Namespace should be used ===
 
Namespace is better solution, but it is much severe BC. It requires namespace change to import whole namespace (e.g. namespace \php\7\*;) into "\" namespace and users has to import namespace to execute old scripts. The import code breaks backward compatibility also. 

This RFC may break scripts. However, most users never define "php_version()" etc.

Even if PHP had namespace to cleanup global namespace. PHP needs "phpversion()" for better compatibility anyway.

=== Scalar object is better ===
 
[[https://github.com/nikic/scalar_objects|Scalar objects]] can be solution for cleanup old functions. Even if PHP has scalar objects, old inconsistent function names remain. 

Even if PHP had scalar objects to have clean names. PHP should have "phpversion()" anyway.

=== Criticism will not end ===

PHP may be a subject of criticism regardless of this RFC. However, criticism for basic function name inconsistencies is valid one. Languages are better to be consistent in the first place.

=== Effort does not worth it ===

If this is the only reason, please vote "yes" because I'll prepare complete patch and update all documents in English.

PHP has nice alias system and has no performance penalty at all. The cost is a little memory to hold function entries.


===== Proposal =====

There aren't much discussion about functions other than "string" and "array" related. Therefore, this RFC proposes multiple votes for 3 classes of functions, plus a few class/interface methods.

  - Have CODING_STANDARDS name functions except "string" and "array" related.
  - Have CODING_STANDARDS name functions for "string" related also.
  - Have CODING_STANDARDS name functions for "array" related also.
  - Have CODING_STANDARDS name methods
    * <nowiki>__set_state()</nowiki> - Magic method for var_export()
    * create_sid() - SessionIdInterface. This is undocumented interface.

**All of old function names are kept and exists forever** unless other RFC that proposes removal passes. Exception is SessionIdInterface::create_sid(), it would be simply renamed because it is undocumented interface.

==== List of functions to be renamed ====

Function names are renamed according to [[https://github.com/php/php-src/blob/master/CODING_STANDARDS|CODING_STANDARDS]].

Old names are defined as aliases.

Format

  * NEW_NAME <- OLDNAME

NOTE: CORDING_STANDARDS requires module name prefix for module functions 


=== Functions other than "string" and "array" related ====
  * http://php.net/manual/en/book.misc.php
  * time_nano_sleep <- time_nanosleep 
  * time_micro_sleep <- usleep 
  * sys_get_load_avg <- sys_getloadavg 
  * php_strip_white_space <- php_strip_whitespace
   
  * http://php.net/manual/en/ref.info.php
  * get_my_last_mod <- getlastmod (Other functions use "my_" prefix)
  * get_my_gid <- getmygid
  * get_my_inode <- getmyinode 
  * get_my_pid <- getmypid 
  * get_my_uid <- getmyuid 
  * get_opt <- getopt 
  * get_rusage <- getrusage
  * php_credits <- phpcredits 
  * php_info <- phpinfo 
  * php_version <- phpversion
  * get_env <- getenv 
  * put_env <- putenv 


  * http://php.net/manual/en/book.url.php
  * url_decode <- urldecode
  * url_encode <- urlencode 
  * url_raw_decode <- rawurldecode 
  * url_raw_encode <- rawurlencode 
  * url_parse <- parse_url


  * http://php.net/manual/en/book.var.php
  * bool_val <- boolval 
  * double_val <- doubleval
  * float_val <- floatval 
  * int_val <- intval 
  * str_val <- strval
  * get_type <- gettype
  * set_type <- settype 
  * is_set <- isset (There are number of is_*(). e.g.is_int()/is_string()/etc)

  * http://php.net/manual/en/ref.exec.php
  * exec_escape_arg <- escapeshellarg 
  * exec_escape_cmd <- escapeshellcmd 
  * exec_passthru <- passthru (Named after exec())
  * exec_shell <- shell_exec 
  * exec_system <- system

  * http://php.net/manual/en/ref.filesystem.php
  * disk_free_space <- diskfreespace
  * file_atime <- fileatime
  * file_ctime <- filectime 
  * file_group <- filegroup 
  * file_inode <- fileinode 
  * file_mtime <- filemtime 
  * file_owner <- fileowner 
  * file_perms <- fileperms 
  * file_size <- filesize
  * file_type <- filetype 
  * file_name_match <- fnmatch 
  * file_tmep_name <- tempnam 
  * file_temp <- tmpfile 
  * file_copy <- copy 
  * file_stat() <- stat()
  * file_stat_clear_cache <- clearstatcache

  * link_info <- linkinfo 
  * link_stat <- lstat 
  * link_chown <- lchown 
  * link_chgrp <- lchgrp 
  * link_read <- readlink 
  * link_symbolic <- symlink 

  * path_base_name <- basename 
  * path_info <- pathinfo 
  * read_file <- readfile (fread exists. This could be file_read. Named badly. file_passthru() can conflict with fpassthru())

  * pipe_close <- pclose 
  * pipe_open <- popen 

  * realpath <- realpath 
  * realpath_cache_get <- realpath_cache_get 
  * realpath_cache_size <- realpath_cache_size 

  * f*() : Prefixed by file_? - It's supposed to be named as "file module"
  * file_open <- fopen 
  * file_close <- fclose 
  * file_eof <- feof 
  * file_flush <- fflush 
  * file_getc <- fgetc
  * file_getcsv <- fgetcsv 
  * file_gets <- fgets 
  * file_getss <- fgetss 
  * file_passthru <- fpassthru 
  * file_putcsv <- fputcsv 
  * file_puts <- fputs 
  * file_read <- fread 
  * file_scanf <- fscanf
  * file_seek <- fseek 
  * file_stat <- fstat 
  * file_tell <- ftell 
  * file_truncate <- ftruncate 
  * file_write <- fwrite 


  * directory releated : Prefixed by dir_? It's supposed to be named as "dir module"
  * dir_name <- dirname 
  * dir_glob <- glob 
  * dir_rename <- rename (Rename is actually a directory operation. e.g File deletion/rename is controlled by current dir permission)
  * dir_rewind <- rewind 
  * dir_remove <- rmdir 
  * dir_make <- mkdir 
  * dir_delete <- unlink (There is dummy "delete()" function entry)
  * dir_chown <- chown 
  * dir_chmod <- chmod 
  * dir_chgrp <- chgrp


  * http://php.net/manual/en/book.sockets.php
  * socket_get_peer_name <- socket_getpeername 
  * socket_get_sock_name <- socket_getsockname
  * socket_recv_from <- socket_recvfrom 
  * socket_recv_msg <- socket_recvmsg 
  * socket_send_msg <- socket_sendmsg 
  * socket_send_to <- socket_sendto 
  * socket_error_str <- socket_strerror (Adjust to accord with other function names. e.g. bz_error_str())

  * http://php.net/manual/en/book.bc.php
  * bc_add <- bcadd 
  * bc_comp <- bccomp 
  * bc_div <- bcdiv 
  * bc_mod <- bcmod
  * bc_mul <- bcmul 
  * bc_pow <- bcpow
  * bc_pow_mod <- bcpowmod 
  * bc_scale <- bcscale 
  * bc_sqrt <- bcsqrt
  * bc_sub <- bcsub 

  * http://php.net/manual/en/book.gettext.php
  * gettext_bind_text_domain_codeset <- bind_textdomain_codeset
  * gettext_bind_text_domain <- bindtextdomain
  * gettext_dc <- dcgettext 
  * gettext_dcn <- dcngettext
  * gettext_d <- dgettext 
  * gettext_dn <- dngettext 
  * gettext_n <- ngettext 
  * gettext_text_domain <- textdomain 
  
  * http://php.net/manual/en/book.bzip2.php
  * bz_close -> bzclose
  * bz_compress -> bzcompress
  * bz_decompress -> bzdecompress
  * bz_errno -> bzerrno
  * bz_error -> bzerror
  * bz_error_str -> bzerrstr
  * bz_flush -> bzflush
  * bz_open -> bzopen
  * bz_read -> bzread 
  * bz_write -> bzwrite

  * http://php.net/manual/en/book.zlib.php
  * gz_close -> gzclose 
  * gz_compress -> gzcompress
  * gz_decode  -> gzdecode 
  * gz_deflate -> gzdeflate 
  * gz_encode -> gzencode
  * gz_eof -> gzeof 
  * gz_file -> gzfile
  * gz_getc -> gzgetc
  * gz_gets -> gzgets 
  * gz_getss -> gzgetss
  * gz_inflate -> gzinflate 
  * gz_open -> gzopen
  * gz_passthru -> gzpassthru
  * gz_puts -> gzputs
  * gz_read -> gzread 
  * gz_rewind -> gzrewind 
  * gz_seek -> gzseek
  * gz_tell -> gztell 
  * gz_uncompress -> gzuncompress
  * gz_write -> gzwrite
  * gz_read_file -> readgzfile 

  * http://php.net/manual/en/book.image.php
  * http://php.net/manual/en/book.exif.php

  * http://php.net/manual/en/book.apache.php


=== "string" functions ====
  * http://php.net/ref.strings
  * http://php.net/manual/en/book.mbstring.php
  * http://php.net/manual/en/book.iconv.php
  * http://php.net/manual/en/book.intl.php


=== "array" functions ====
  * http://php.net/manual/en/ref.array.php

=== Methods ===
  * <nowiki>StdClass::__setState()</nowiki> <- <nowiki>StdClass::__set_state()</nowiki> -> 
  * SessionIdInterface::createSid() <- SessionIdInterface::create_sid()

===== Backward Incompatible Changes =====

  * New function names may have name collisions with user's scripts.

===== Proposed PHP Version(s) =====

PHP 7.0

===== RFC Impact =====
==== To SAPIs ====
All modules that have non standard names.

==== To Existing Extensions ====
All modules that have non standard names. e.g. GD

==== To Opcache ====

None

==== New Constants ====

None. Constant name is not subject of this RFC.

==== php.ini Defaults ====

None. 

===== Open Issues =====


===== Unaffected PHP Functionality =====


===== Future Scope =====

  * Use of namespace to clean up global namespace at all.
  * New APIs that replace old APIs.

===== Proposed Voting Choices =====
Requires 50%+1 majority

  - Have CODING_STANDARDS names functions except "string" and "array" related.
  - Have CODING_STANDARDS names functions for "string" related also.
  - Have CODING_STANDARDS names functions for "array" related also.
  - Have CODING_STANDARDS name methods

===== Patches and Tests =====

TBD. Patch is trivial, but it affects many places. Patch will be prepared after vote passes for review.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== References =====
Links to external references, discussions or RFCs

===== Rejected Features =====
Keep this updated with features that were discussed on the mail lists.
