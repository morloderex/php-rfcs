====== PHP RFC: Consistent Function Names ======
  * Version: 0.9
  * Date: 2015-03-01
  * Author: Yasuo Ohgaki <yohgaki@ohgaki.net>
  * Status: Under Discussion
  * First Published at: http://wiki.php.net/rfc/consistent_function_names


===== Introduction =====

There are many functions that named before naming standard in [[https://github.com/php/php-src/blob/master/CODING_STANDARDS|CODING_STANDARDS]]. Therefore, PHP has function names like **phpversion()** and **htmlspecialchars()**.

First of all, this RFC will not remove any old function names. This RFC only proposes renaming offending function names and have aliases for old names. Old names are _not_ deprecated.

Without cleanups, PHP may have inconsistent API names even if PHP has new APIs for the same purpose because we care compatibility a lot. Unless we have standard confirming function names at some point, we may keep inconsistent function names forever and never have consistent function names.

==== Discussions ====

=== Namespace should be used ===
 
Namespace is better solution, but it is much severe BC. It requires namespace change to import whole namespace (e.g. namespace \php\7\*;) into "\" namespace and users has to import namespace to execute old scripts. The import code breaks backward compatibility also. 

However, namespace itself will not create new standard confirming names. Aliasing is needed anyway.

=== Scalar object is better ===
 
[[https://github.com/nikic/scalar_objects|Scalar objects]] can be solution for cleanup old functions. Even if PHP has scalar objects, old inconsistent function names remain. 

New API does not remove legacy function names. Aliasing is required to confirm the standard.

=== Criticism will not end ===

PHP may be a subject of criticism regardless of this RFC. However, criticism for basic function name inconsistencies is valid one. Languages are better to be consistent in the first place.

Besides, it seems PHP has too many name violations. Please refer to "List of functions to be renamed" section.

=== Effort does not worth it ===

If this is the only reason, please vote "yes" because I'll prepare complete patch and update all documents in English. (Help is appreciated!)

PHP has nice alias system and has no performance penalty at all. The cost is a little memory to hold function entries.

=== I prefer old names ===

You can use old names for good. Therefore, please consider new developers and avoid confusions they may have.

=== BC? ===

Most users never define "php_version()" etc. There are some new names that might be issue. Discussion is appreciated.


===== Proposal =====

Respect [[https://github.com/php/php-src/blob/master/CODING_STANDARDS|CODING_STANDARDS]] and rename functions violate the standard. **All of old function names are kept and documented forever** unless other RFC that proposes removal passes. 

<code text>
User Functions/Methods Naming Conventions
------------------

1.  Function names for user-level functions should be enclosed with in
    the PHP_FUNCTION() macro. They should be in lowercase, with words
    underscore delimited, with care taken to minimize the letter count.
    Abbreviations should not be used when they greatly decrease the
    readability of the function name itself::

    Good:
    'mcrypt_enc_self_test'
    'mysql_list_fields'

    Ok:
    'mcrypt_module_get_algo_supported_key_sizes'
    (could be 'mcrypt_mod_get_algo_sup_key_sizes'?)
    'get_html_translation_table'
    (could be 'html_get_trans_table'?)

    Bad:
    'hw_GetObjectByQueryCollObj'
    'pg_setclientencoding'
    'jf_n_s_i'

2.  If they are part of a "parent set" of functions, that parent should
    be included in the user function name, and should be clearly related
    to the parent program or function family. This should be in the form
    of ``parent_*``::

    A family of 'foo' functions, for example:
    
    Good:
    'foo_select_bar'
    'foo_insert_baz'
    'foo_delete_baz'

    Bad:
    'fooselect_bar'
    'fooinsertbaz'
    'delete_foo_baz'

3.  Function names used by user functions should be prefixed
    with ``_php_``, and followed by a word or an underscore-delimited list of
    words, in lowercase letters, that describes the function.  If applicable,
    they should be declared 'static'.

4.  Variable names must be meaningful.  One letter variable names must be
    avoided, except for places where the variable has no real meaning or
    a trivial meaning (e.g. for (i=0; i<100; i++) ...).

5.  Variable names should be in lowercase.  Use underscores to separate
    between words.

6.  Method names follow the 'studlyCaps' (also referred to as 'bumpy case'
    or 'camel caps') naming convention, with care taken to minimize the
    letter count. The initial letter of the name is lowercase, and each
    letter that starts a new 'word' is capitalized::

    Good:
    'connect()'
    'getData()'
    'buildSomeWidget()'

    Bad:
    'get_Data()'
    'buildsomewidget'
    'getI()'

7.  Classes should be given descriptive names. Avoid using abbreviations where
    possible. Each word in the class name should start with a capital letter,
    without underscore delimiters (CamelCaps starting with a capital letter).
    The class name should be prefixed with the name of the 'parent set' (e.g.
    the name of the extension)::

    Good:
    'Curl'
    'FooBar'

    Bad:
    'foobar'
    'foo_bar'
</code>

This RFC proposes multiple votes for 3 classes of functions, plus a few class/interface methods.

  - Have CODING_STANDARDS name functions except standard module.
  - Have CODING_STANDARDS name functions for "string" related also.
  - Have CODING_STANDARDS name functions for "array" related also.
  - Have CODING_STANDARDS name methods
    * <nowiki>__set_state()</nowiki> - Magic method for var_export()
    * create_sid() - SessionIdInterface. This is undocumented interface.

Exception is SessionIdInterface::create_sid(), it would be simply renamed because it is undocumented interface and there will be no aliases.

==== List of functions to be renamed ====

Function names are renamed according to [[https://github.com/php/php-src/blob/master/CODING_STANDARDS|CODING_STANDARDS]].

Old names are defined as aliases.

Format

  * NEW_NAME <- OLDNAME(New Alias)

NOTE: CORDING_STANDARDS requires module name prefix for module functions and almost strictly conforming the standard. 


=== Functions other than Standard module ====

  * http://php.net/manual/en/book.sockets.php
  * socket_get_peer_name <- socket_getpeername 
  * socket_get_sock_name <- socket_getsockname
  * socket_recv_from <- socket_recvfrom 
  * socket_recv_msg <- socket_recvmsg 
  * socket_send_msg <- socket_sendmsg 
  * socket_send_to <- socket_sendto 
  * socket_error_str <- socket_strerror (Adjust to accord with other function names. e.g. bz_error_str())

  * http://php.net/manual/en/book.bc.php
  * bc_add <- bcadd 
  * bc_comp <- bccomp 
  * bc_div <- bcdiv 
  * bc_mod <- bcmod
  * bc_mul <- bcmul 
  * bc_pow <- bcpow
  * bc_pow_mod <- bcpowmod 
  * bc_scale <- bcscale 
  * bc_sqrt <- bcsqrt
  * bc_sub <- bcsub 

  * http://php.net/manual/en/book.gettext.php
  * gettext_bind_text_domain_codeset <- bind_textdomain_codeset
  * gettext_bind_text_domain <- bindtextdomain
  * gettext_dc <- dcgettext 
  * gettext_dcn <- dcngettext
  * gettext_d <- dgettext 
  * gettext_dn <- dngettext 
  * gettext_n <- ngettext 
  * gettext_text_domain <- textdomain 
  
  * http://php.net/manual/en/book.bzip2.php
  * bz_close -> bzclose
  * bz_compress -> bzcompress
  * bz_decompress -> bzdecompress
  * bz_errno -> bzerrno
  * bz_error -> bzerror
  * bz_error_str -> bzerrstr
  * bz_flush -> bzflush
  * bz_open -> bzopen
  * bz_read -> bzread 
  * bz_write -> bzwrite

  * http://php.net/manual/en/book.zlib.php
  * gz_close -> gzclose 
  * gz_compress -> gzcompress
  * gz_decode  -> gzdecode 
  * gz_deflate -> gzdeflate 
  * gz_encode -> gzencode
  * gz_eof -> gzeof 
  * gz_file -> gzfile
  * gz_getc -> gzgetc
  * gz_gets -> gzgets 
  * gz_getss -> gzgetss
  * gz_inflate -> gzinflate 
  * gz_open -> gzopen
  * gz_passthru -> gzpassthru
  * gz_puts -> gzputs
  * gz_read -> gzread 
  * gz_rewind -> gzrewind 
  * gz_seek -> gzseek
  * gz_tell -> gztell 
  * gz_uncompress -> gzuncompress
  * gz_write -> gzwrite
  * gz_read_file -> readgzfile 

  * http://php.net/manual/en/book.image.php
  * gd_image_size -> getimagesize 
  * gd_image_size_from_string ->  getimagesizefromstring 
  * gd_type_to_extension -> image_type_to_extension 
  * gd_type_to_mime_type -> image_type_to_mime_type
  * gd_2wbmp -> image2wbmp 
  * gd_affine -> imageaffine 
  * gd_affine_matrix_concat -> imageaffinematrixconcat 
  * gd_affine_matrix_get -> imageaffinematrixget 
  * gd_alpha_blending -> imagealphablending 
  * gd_antialias -> imageantialias 
  * gd_arc -> imagearc 
  * gd_char -> imagechar 
  * gd_charup -> imagecharup 
  * gd_color_allocate -> imagecolorallocate 
  * gd_color_allocate_alpha -> imagecolorallocatealpha 
  * gd_color_at -> imagecolorat 
  * gd_color_closest -> imagecolorclosest 
  * gd_color_closest_alpha -> imagecolorclosestalpha 
  * gd_color_closest_hwb -> imagecolorclosesthwb 
  * gd_color_deallocate -> imagecolordeallocate 
  * gd_color_exact -> imagecolorexact 
  * gd_color_exact_alpha -> imagecolorexactalpha 
  * gd_color_match -> imagecolormatch
  * gd_color_resolve -> imagecolorresolve 
  * gd_color_resolve_alpha -> imagecolorresolvealpha 
  * gd_color_set -> imagecolorset 
  * gd_colors_for_index -> imagecolorsforindex 
  * gd_colors_total -> imagecolorstotal 
  * gd_color_transparent -> imagecolortransparent 
  * gd_convolution -> imageconvolution 
  * gd_copy -> imagecopy 
  * gd_copy_merge -> imagecopymerge 
  * gd_copy_merge_gray -> imagecopymergegray 
  * gd_copy_resampled -> imagecopyresampled 
  * gd_copy_resized -> imagecopyresized 
  * gd_create -> imagecreate 
  * gd_create_from_gd2 -> imagecreatefromgd2 
  * gd_create_from_gd2_part -> imagecreatefromgd2part 
  * gd_create_from_gd -> imagecreatefromgd 
  * gd_create_from_gif -> imagecreatefromgif 
  * gd_create_from_jpeg -> imagecreatefromjpeg 
  * gd_create_from_png -> imagecreatefrompng 
  * gd_create_from_string -> imagecreatefromstring 
  * gd_create_from_wbmp -> imagecreatefromwbmp 
  * gd_create_from_webp -> imagecreatefromwebp 
  * gd_create_from_xbm -> imagecreatefromxbm 
  * gd_create_from_xpm -> imagecreatefromxpm 
  * gd_create_true_color -> imagecreatetruecolor 
  * gd_crop -> imagecrop 
  * gd_crop_auto -> imagecropauto 
  * gd_dashed_line -> imagedashedline 
  * gd_destroy -> imagedestroy 
  * gd_ellipse -> imageellipse 
  * gd_fill -> imagefill 
  * gd_filled_arc -> imagefilledarc 
  * gd_filled_ellipse -> imagefilledellipse 
  * gd_filled_polygon -> imagefilledpolygon 
  * gd_filled_rectangle -> imagefilledrectangle 
  * gd_fill_to_border -> imagefilltoborder 
  * gd_filter -> imagefilter 
  * gd_flip -> imageflip 
  * gd_font_height -> imagefontheight 
  * gd_font_width -> imagefontwidth 
  * gd_ft_bbox -> imageftbbox 
  * gd_ft_text -> imagefttext 
  * gd_gamma_correct -> imagegammacorrect 
  * gd_raw2 -> imagegd2 
  * gd_raw -> imagegd 
  * gd_gif -> imagegif 
  * gd_grab_screen -> imagegrabscreen 
  * gd_grab_window -> imagegrabwindow 
  * gd_interlace -> imageinterlace 
  * gd_is_true_color -> imageistruecolor 
  * gd_jpeg -> imagejpeg 
  * gd_layer_effect -> imagelayereffect 
  * gd_line -> imageline 
  * gd_load_font -> imageloadfont 
  * gd_palette_copy -> imagepalettecopy 
  * gd_palette_to_true_color -> imagepalettetotruecolor 
  * gd_png -> imagepng 
  * gd_polygon -> imagepolygon 
  * gd_ps_bbox -> imagepsbbox 
  * gd_ps_encode_font -> imagepsencodefont 
  * gd_ps_extend_font -> imagepsextendfont 
  * gd_ps_free_font -> imagepsfreefont 
  * gd_ps_load_font -> imagepsloadfont 
  * gd_ps_slant_font -> imagepsslantfont 
  * gd_ps_text -> imagepstext 
  * gd_rectangle -> imagerectangle 
  * gd_rotate -> imagerotate 
  * gd_save_alpha -> imagesavealpha 
  * gd_scale -> imagescale 
  * gd_set_brush -> imagesetbrush 
  * gd_set_interpolation -> imagesetinterpolation 
  * gd_set_pixel -> imagesetpixel 
  * gd_set_style -> imagesetstyle 
  * gd_set_thickness -> imagesetthickness 
  * gd_set_tile -> imagesettile 
  * gd_string -> imagestring 
  * gd_string_up -> imagestringup 
  * gd_width -> imagesx 
  * gd_height -> imagesy 
  * gd_true_color_to_palette -> imagetruecolortopalette 
  * gd_ttf_bbox -> imagettfbbox 
  * gd_ttf_text -> imagettftext 
  * gd_types -> imagetypes 
  * gd_wbmp -> imagewbmp 
  * gd_webp -> imagewebp 
  * gd_xbm -> imagexbm 
  * gd_iptc_embed -> iptcembed 
  * gd_iptc_parse -> iptcparse 
  * gd_jpeg2wbmp -> jpeg2wbmp 
  * gd_png2wbmp -> png2wbmp 

  * http://php.net/manual/en/book.exif.php
  * exif_image_type -> exif_imagetype 
  * exif_tag_name -> exif_tagname


  * http://php.net/manual/en/book.mbstring.php
  * mb_decode_mime_header -> mb_decode_mimeheader
  * mb_decode_numeric_entity -> mb_decode_numericentity
  * mb_encode_mime_header  -> mb_encode_mimeheader 
  * mb_encode_numeric_entity  -> mb_encode_numericentity 

  * Date/Time related:
  * http://php.net/manual/en/book.datetime.php
  * date_format -> date (Return formatted date string of timestamp)
  * date_get -> getdate (Return array date)
  * date_check  -> checkdate 
  * time_part -> idate (Retrieve part of date information as int according to format) 
  * time -> time (The same as it is now. Return int timestamp)
  * time_make -> mktime (Return timestamp from number of int parameters)
  * time_format  -> strftime (Return local time string according to format/locale)
  * time_utc  -> gmdate (Return array GMT/UTC timestamp)
  * time_utc_make -> gmmktime (Return GMT/UTC timestamp from array)
  * time_utc_format  -> gmstrftime (Return GMT/UTC time string according to format/locale)
  * time_get -> gettimeofday  (Return array time of day)
  * time_local -> localtime (Return localtime() result array. More info than time_get/gettimeofday)
  * time_micro -> microtime (Return microtime resolution time)
  * time_parse  -> strptime (Parse time string generated by time_format/strftime. Return timestamp) 
  * time_from_string -> strtotime (Parse string time and return timestamp. Return timestamp)


  * http://php.net/manual/en/book.apache.php
  * sapi_request_headers -> getallheaders (Categorized as apache function, but available for CLI and FCGI also) 
  * apache_virtual -> virtual
  * apache_get_env -> apache_getenv 
  * apache_set_env -> apache_setenv 


=== "String" functions ====
  * http://php.net/ref.strings

  * HTML related:
  * html_entities ->  htmlentities 
  * html_escape -> htmlspecialchars (Rename it with real meaning) 
  * html_escape_decode -> htmlspecialchars_decode 
  * html_nl2br -> nl2br 
  * html_strip_tags -> strip_tags 

  * Locate related:
  * locale_conv  -> localeconv 
  * locale_set -> setlocale

  * "string" function but no "str_" prefix
  * str_cslashes -> addcslashes 
  * str_cslashes_strip -> stripcslashes
  * str_slashes -> addslashes 
  * str_slashes_strip  -> stripslashes 
  * str_count_chars -> count_chars 
  * str_explode -> explode
  * str_implode ->  implode 
  * str_money_format -> money_format 
  * str_number_format -> number_format 
  * str_levenshtein  -> levenshtein 
  * str_metaphone -> metaphone
  * str_parse  -> parse_str 
  * str_quote_meta  -> quotemeta 
  * str_similar_text  -> similar_text 
  * str_soundex  -> soundex 
  * str_sscanf  -> sscanf 
  * str_rtrim  -> rtrim 
  * str_trim  -> trim 
  * str_ltrim  -> ltrim 
  * str_lc_first  -> lcfirst 
  * str_uc_first  -> ucfirst 
  * str_uc_words  -> ucwords 
  * str_word_wrap  -> wordwrap

  * Comparison:
  * str_cmp  -> strcmp 
  * str_ncmp -> strncmp
  * str_case_cmp  -> strcasecmp 
  * str_ncase_cmp  -> strncasecmp 
  * str_nat_cmp  -> strnatcmp 
  * str_nat_case_cmp  -> strnatcasecmp 

  * Conversion:
  * str_to_lower -> strtolower
  * str_to_upper -> strtoupper

  * Misc:
  * str_get_csv  -> str_getcsv 

  * Named after libc:
  * ord  -> ord (Keep as it is now)
  * chr -> chr (Keep as it is now. str_chr() is strstr() alias.)
  * str_chr  -> strchr 
  * str_cmp  -> strcmp 
  * str_coll -> strcoll
  * str_cspn  -> strcspn 
  * str_ipos  -> stripos 
  * str_istr  -> stristr 
  * str_len  -> strlen
  * str_pbrk  -> strpbrk 
  * str_pos  ->  strpos  
  * str_rchr  -> strrchr 
  * str_rev  -> strrev 
  * str_ripos -> strripos 
  * str_rpos  -> strrpos 
  * str_spn  -> strspn 
  * str_str   -> strstr 
  * str_tok -> strtok
  * str_tr  -> strtr 

  * http://php.net/manual/en/book.mbstring.php
  * mb_str_cut  -> mb_strcut 
  * mb_str_trim_width  -> mb_strimwidth 
  * mb_str_ipos  -> mb_stripos 
  * mb_str_istr  -> mb_stristr 
  * mb_str_len   -> mb_strlen 
  * mb_str_pos  -> mb_strpos 
  * mb_str_rchr  -> mb_strrchr 
  * mb_str_richr  -> mb_strrichr 
  * mb_str_ripos  -> mb_strripos 
  * mb_str_rpos -> mb_strrpos
  * mb_str_str -> mb_strstr
  * mb_str_to_lower  -> mb_strtolower 
  * mb_str_to_upper  -> mb_strtoupper 
  * mb_str_width  -> mb_strwidth 

  * http://php.net/manual/en/book.iconv.php
  * iconv_str_len  -> iconv_strlen 
  * iconv_str_pos  -> iconv_strpos 
  * iconv_str_rpos -> iconv_strrpos

  * http://php.net/manual/en/book.intl.php
  * grapheme_str_ipos -> grapheme_stripos
  * grapheme_str_istr  -> grapheme_stristr 
  * grapheme_str_len -> grapheme_strlen
  * grapheme_str_pos  -> grapheme_strpos 
  * grapheme_str_ripos  -> grapheme_strripos 
  * grapheme_str_rpos  ->  grapheme_strrpos 
  * grapheme_str_str  ->  grapheme_strstr 


=== "Array" functions ====
  * http://php.net/manual/en/ref.array.php
  * array_sort  ->  sort (Sort values)
  * array_sort_reverse  -> rsort  (Reverse sort values)
  * array_sort_user  ->  usort (User sort values)
  * array_sort_assoc  -> asort  (Keep key and sort)
  * array_sort_assoc_reverse  ->  arsort (Keep key and reverse sort)
  * array_sort_assoc_user  ->  uasort (Keep key and user sort)
  * array_sort_key  ->  ksort (Sort keys)
  * array_sort_key_reverse ->  krsort (Reverse sort keys)
  * array_sort_key_user  ->  uksort (User key sort)
  * array_sort_natual  ->  natsort (Natural sort)
  * array_sort_natual_case  ->  natcasesort (Natural sort without case)
  * array_in  -> in_array  
  * array_range  ->  range (Create array of range)
  * array_shuffle  -> shuffle (Randomize values)



=== Other than "string" and "array" standard module functions ====
  * http://php.net/manual/en/book.misc.php
  * time_sleep <- sleep 
  * time_nano_sleep <- time_nanosleep 
  * time_micro_sleep <- usleep 
  * time_unique_id <- uniqid (uniqid() is microtime() based)
  * sys_get_load_avg <- sys_getloadavg 
  * php_strip_white_space <- php_strip_whitespace

  * http://php.net/manual/en/book.url.php
  * url_decode <- urldecode
  * url_encode <- urlencode 
  * url_raw_decode <- rawurldecode 
  * url_raw_encode <- rawurlencode 
  * url_parse <- parse_url
  * url_build_query <- http_build_query (Make it URL function)
   
  * http://php.net/manual/en/ref.info.php
  * php_credits <- phpcredits 
  * php_info <- phpinfo 
  * php_version <- phpversion
  * get_last_mod <- getlastmod (Return **main** script timestamp.)
  * get_my_gid <- getmygid ("my_" prefix used because they return info about **current** script.)
  * get_my_inode <- getmyinode 
  * get_my_pid <- getmypid 
  * get_my_uid <- getmyuid 
  * get_rusage <- getrusage
  * get_opt <- getopt 
  * get_env <- getenv 
  * put_env <- putenv 

  * http://php.net/manual/en/book.var.php
  * bool_val <- boolval 
  * double_val <- doubleval
  * float_val <- floatval 
  * int_val <- intval 
  * str_val <- strval
  * get_type <- gettype
  * set_type <- settype 
  * is_set <- isset (There are number of is_*(). e.g.is_int()/is_string()/etc)

  * http://php.net/manual/en/ref.exec.php
  * exec <- exec (exec() remains as it is)
  * exec_passthru <- passthru (Named after exec())
  * exec_shell <- shell_exec 
  * exec_system <- system
  * exec_escape_arg <- escapeshellarg 
  * exec_escape_cmd <- escapeshellcmd 
 
  * http://php.net/manual/en/ref.filesystem.php

  * link <- link (The same as now)
  * link_info <- linkinfo 
  * link_stat <- lstat 
  * link_chown <- lchown 
  * link_chgrp <- lchgrp 
  * link_read <- readlink 
  * link_symbolic <- symlink 

  * path_base_name <- basename 
  * path_info <- pathinfo 
  * read_file <- readfile (This could be file_read() or file_passthru(), but file_read() conflict with fread(), file_passthru() conflict with fpassthru(). Any good name?)

  * pipe_close <- pclose 
  * pipe_open <- popen 

  * realpath related : Could be as it is now?
  * realpath <- realpath 
  * realpath_cache_get <- realpath_cache_get 
  * realpath_cache_size <- realpath_cache_size 

  * file_atime <- fileatime
  * file_ctime <- filectime 
  * file_group <- filegroup 
  * file_inode <- fileinode 
  * file_mtime <- filemtime 
  * file_owner <- fileowner 
  * file_perms <- fileperms 
  * file_size <- filesize
  * file_type <- filetype 
  * file_name_match <- fnmatch 
  * file_temp_name <- tempnam 
  * file_copy <- copy 
  * file_stat <- stat
  * file_stat_clear_cache <- clearstatcache

  * f*() : Prefixed by file_? - It's supposed to be named as "file module". If "f" prefix is kept, there should be "ftmp(tmpfile)","frewind(rewind)" because these operates with file handle.
  * file_open <- fopen 
  * file_close <- fclose 
  * file_eof <- feof 
  * file_flush <- fflush 
  * file_getc <- fgetc
  * file_get_csv <- fgetcsv 
  * file_gets <- fgets 
  * file_getss <- fgetss 
  * file_passthru <- fpassthru 
  * file_put_csv <- fputcsv 
  * file_puts <- fputs 
  * file_read <- fread 
  * file_scanf <- fscanf
  * file_seek <- fseek 
  * file_stat <- fstat 
  * file_tell <- ftell 
  * file_truncate <- ftruncate 
  * file_write <- fwrite 
  * file_rewind <- rewind (This one is exception that does not have "f" prefix, but operates with file handle)
  * file_temp <- tmpfile (This one is exception that does not have "f" prefix, but returns file handle)

  * file_delete <- unlink (There is dummy "delete()" function entry for unlink(). Unlink is a directory operation in fact, but made it as file_delete(). There will be dir_delete())

  * Directory related : Prefixed by dir_? It's supposed to be named as "dir module"
  * dir_name <- dirname 
  * dir_glob <- glob 
  * dir_rename <- rename (Rename is actually a directory operation. e.g File deletion/rename is controlled by current dir permission)
  * dir_delete <- rmdir 
  * dir_create <- mkdir 
  * dir_chown <- chown 
  * dir_chmod <- chmod 
  * dir_chgrp <- chgrp


=== Methods ===
  * <nowiki>StdClass::__setState()</nowiki> <- <nowiki>StdClass::__set_state()</nowiki> -> 
  * SessionIdInterface::createSid() <- SessionIdInterface::create_sid()

===== Backward Incompatible Changes =====

  * New function names may have name collisions with user's scripts.

===== Proposed PHP Version(s) =====

PHP 7.0

===== RFC Impact =====
==== To SAPIs ====
All modules that have non standard names.

==== To Existing Extensions ====
All modules that have non standard names. e.g. GD

==== To Opcache ====

None

==== New Constants ====

None. Constant name is not subject of this RFC.

==== php.ini Defaults ====

None. 

===== Open Issues =====


===== Unaffected PHP Functionality =====


===== Future Scope =====

  * Use of namespace to clean up global namespace at all.
  * New APIs that replace old APIs.

===== Proposed Voting Choices =====
Requires 50%+1 majority

  - Have CODING_STANDARDS names functions except standard module related.
  - Have CODING_STANDARDS names functions for "string" related also.
  - Have CODING_STANDARDS names functions for "array" related also.
  - Have CODING_STANDARDS name methods

===== Patches and Tests =====

TBD. Patch is trivial, but it affects many places. Patch will be prepared after vote passes for review.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== References =====
Links to external references, discussions or RFCs

===== Rejected Features =====
Keep this updated with features that were discussed on the mail lists.