====== PHP RFC: Strict operators directive ======
  * Version: 0.1
  * Date: 2019-05-25
  * Author: Arnold Daniels, jasny@php.net
  * Status: Draft
  * Target Version: PHP 7.4
  * First Published at: http://wiki.php.net/rfc/strict_operators


===== Introduction =====
This RFC proposes the addition of a new optional per-file directive, ''declare(strict_operators=1);'', which makes all operators within a file have "strict" type-checking. Using operators with incompatible types with this directive throws a ''TypeError''.

The directive addresses all issues related to type juggling in a backward compatible way, following the same rationale as [[rfc:scalar_type_hints_v5|PHP RFC: Scalar Type Declarations]]. Please make sure you've read the //Background and Rationale// section of that RFC. 

//This RFC contains some examples of unexpected behavior but isn't intended as a complete list.//

==== Comparison operators ====
PHP supports two different types of comparison operators: The strict comparisons ''==='' and ''!=='', and the non-strict comparisons ''=='', ''!='', ''>'', ''>='', ''<'', ''%%<=%%'' and ''%%<=>%%''. The primary difference between them is that strict comparisons require both operands to be of the same type, and do not perform implicit type coercions.

The current dogma in the PHP world is that non-strict comparisons should **always** be avoided because their conversion semantics are rarely desirable and can easily lead to bugs or even security issues. This is an issue for the ''>'', ''>='', ''<'', ''%%<=%%'' and ''%%<=>%%'' operators as no strict alternative of these operators exist. Using the non-strict operators can lead to unexpected behavior.

=== Type juggling ===
Logic dictates that if ''a > b'' and ''b > c'' then ''a > c'' **must** be true. In PHP, these elementry rules do not hold up due to type juggling;

<code php>
$a = '42';
$b = 10;
$c = '9 eur';

var_dump($a > $b); // true
var_dump($b > $c); // true
var_dump($a > $c); // false
</code>

=== Numeric string comparison ===
Non-strict comparison uses a "smart" comparison method that treats strings as numbers if they are numeric. This can lead to similar issues as with type juggling.

Using the ''%%<=>%%'' operator to ordering the values of an array, can lead to different results based on the initial state of the array.

<code php>
function sorted(array $arr) {
  usort($arr, function($x, $y) { return $x <=> $y; });
}

sorted(['100', '5 eur', '62']); // ['100', '5 eur', '62']
sorted(['100', '62', '5 eur']); // ['5 eur', '62', '100']
sorted(['62', '100', '5 eur']); // ['62', '100', '5 eur']
</code>

=== Key order ===
Strict comparison requires that arrays have keys occurring in the same order, while non-strict comparison allows out-of-order keys.

To compare the values of two arrays in a strict way, while not concerned about the order requires ordering the array by key.

=== Key mismatch ===
Using the ''>'', ''>='', ''<'', ''%%<=%%'' and ''%%<=>%%'' operator on arrays or objects that don't have the same keys in the same order gives unexpected results.

In the following example ''$a'' is both larger and smaller than ''$b''

<code php>
$a = ['x' => 1, 'y' => 22];
$b = ['y' => 10, 'x' => 15];

var_dump($a > $b); // true
var_dump($b < $a); // true
</code>

Omitting keys and other variations yield completely different results, like both comparisons resulting in `false` or a situation similar to the one seen with type juggling, were ''a > b'' and ''b > c'', but ''a < c''.

==== Arithmetic and Incrementing operators ====
//TODO//

==== Bitwise Operators ====
//TODO//

==== Switch control structure ====
//TODO//

===== Proposal =====
By default, all PHP files are in weak type-checking mode for operators. A new ''declare()'' directive is added, ''strict_operators'', which takes either ''1'' or ''0''. If ''1'', strict type-checking mode is used for operators in the the file. If ''0'', weak type-checking mode is used.

Similar to ''declare(strict_types=1)'', ''declare(strict_operators=1)'' directive **must** be the first statement in a file. If it appears anywhere else in the file it will generate a compiler error. Block mode is also explicitly disallowed (''declare(strict_operators=1);'' is the only allowed form). If the file contains both ''declare(strict_types=1)'' and ''declare(strict_operators=1)'', the order of these two directives doesn't matter.

==== Behaviour of strict type checks ====
When strict type checking for operators is enabled, using an operator with an unsupported type will throw a ''TypeError'', rather than cast it to a supported type.

In case an operator can work with several (or all) types, the types on both sides of the operator need to match.

The one exception is that [[http://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.2|widening primitive conversion]] is allowed for ''int'' to ''float''. This means that parameters that declare ''float'' can also accept ''int''.

<file php widening.php>
<?php
declare(strict_operators=1);

1.2 + 2; // float(3.2)
</file>

In this case, we're passing an ''int'' to a function that accepts ''float''. The parameter is converted (widened) to float.

No other conversions are allowed.

==== Comparison operators ====
Comparison operators work on all scalar types. The types of both values need to match.

Non-scalar types only support the ''=='', ''==='', ''!='' and ''!=='' operators.

<code php>
"foo" > "bar";  // true
"foo" > 10;     // TypeError("Type mismatch string and int on greater than (>) operator")

"foo" == "bar"; // false
"foo" == 10;    // TypeError("Type mismatch string and int on equals (==) operator")

true > false;   // true
true != 0;      // TypeError("Type mismatch bool and int on not equals (!=) operator")

[10] > [];      // TypeError("Unsupported type array on greater than (>) operator")
</code>

Throwing a ''TypeError'' on equals and not equals ensures that the effects of following statements are identical;

<code php>
$a != $b;           // TypeError
$a <> $b;           // TypeError
$a < $b || $a > $b; // TypeError
</code>

=== Numeric string comparison ===
Numeric strings are compared the same way as non-numeric strings. To compare two numeric strings as numbers, they need to be cast to floats.

<code php>
"120" > "99.9";               // false
(float)"120" > (float)"99.9"; // true
</code>

=== Array comparison ===
Comparing two arrays will never throw a ''TypeError''. Non-array values in the array are compared using both type and value, thus similar to the ''==='' operator.

The only difference between using the ''=='' and ''==='' operator is the order of the keys of the array.

<code php>
['a' => 'foo', 'b' => 'bar'] == ['b' => 'bar', 'a' => 'foo'];  // true
['a' => 'foo', 'b' => 'bar'] === ['b' => 'bar', 'a' => 'foo']; // false

['a' => 'foo', 'b' => 'bar'] == ['b' => 'bar', 'a' => 0];      // false (no type casting)
</code>

=== Object comparison ===
Comparing two objects of different classes using the ''=='' or ''!='' operator will throw a ''TypeError''.

<code php>
class Foo {
  public $x;
  
  public function __construct($x) {
    $this->x = $x;
  }
}

class FooBar extends Foo {}

(new Foo(10)) == (new Foo(10));     // true
(new Foo(10)) == (new Foo(99));     // false
(new Foo(10)) === (new Foo(10));    // false

(new Foo(10)) == (new FooBar(11));  // TypeError("Type mismatch Foo object and FooBar object on equals (==) operator")
(new Foo(10)) === (new FooBar(11)); // false
</code>

Comparing two objects of the same class will with these operators checks the properties of the objects. By default, properties are compared in a similar fashion to the ''==='' operator. If the property of both objects contains arrays or objects of the same class, they're compared as using the ''=='' operator.

==== Arithmetic and Incrementing operators ====
//TODO//

==== Bitwise Operators ====
//TODO//

==== String Operators ====
//TODO//

==== Logical Operators ====
//TODO//

==== Switch control structure ====
//TODO//


===== Backward Incompatible Changes =====
None

===== Open Issues =====
To be discussed

===== Unaffected PHP Functionality =====
This RFC

* does not affect any functionality concerning explicit type casting.
* is largely unaffected by other proposals like [[rfc:string_to_number_comparison|PHP RFC: Saner string to number comparisons]] that focus on improving type juggling at the cost of breaking BC, as none cover all issues as described in this RFC.
* does not affect variable casting that occurs in (double-quoted) strings.
* does not affect how values are interpreted as boolean in control structures like ''if'' and ''while''.

===== Proposed Voting Choices =====
Include these so readers know where you are heading and can discuss the proposed voting options.

===== Patches and Tests =====
A patch will be created by my after this RFC has been discussed.

===== Rejected Features =====
