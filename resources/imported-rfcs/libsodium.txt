====== PHP RFC: Make Libsodium a Core Extension ======
  * Version: 0.3
  * Date: 2016-01-07
  * Author: Scott Arciszewski, scott@paragonie.com
  * Status: Under Discussion
  * First Published at: http://wiki.php.net/rfc/libsodium

===== Introduction =====

As we move towards PHP 7.0.0, we must look at the current state of cryptography in PHP. Libmcrypt hasn't been touched in eight years (last release was in 2007), leaving openssl as the only viable option for PHP 5.x and 7.0 users.

Meanwhile, ext/libsodium has been available in PECL for a while now, and has reached stability.

Libsodium is a modern cryptography library that offers authenticated encryption, high-speed elliptic curve cryptography, and much more. Unlike other cryptography standards (which are a potluck of cryptography primitives; i.e. WebCrypto), libsodium is comprised of carefully selected algorithms implemented by security experts to avoid side-channel vulnerabilities.

I maintain the ext/libsodium documentation [[https://paragonie.com/book/pecl-libsodium|here]].

===== Proposal =====

This proposal is to adopt the libsodium extension in the PHP core in PHP 7.1.0.

Currently, the libsodium extension in PECL uses the `Sodium` namespace, which runs contrary to the coding standards. If adopted into the PHP core, this will be changed to conform to the coding standards.

<code>
    // In PECL today:
    $key = \Sodium\randombytes_buf(\Sodium\CRYPTO_SECRETBOX_KEYBYTES);
    $nonce = \Sodium\randombytes_buf(\Sodium\CRYPTO_SECRETBOX_NONCEBYTES);
    $message = \Sodium\crypto_secretbox(
        $plaintext,
        $key,
        $nonce
    );
    
    // If adopted as a core extension, this will be instead written as:
    $key = sodium_randombytes_buf(SODIUM_CRYPTO_SECRETBOX_KEYBYTES);
    $nonce = sodium_randombytes_buf(SODIUM_CRYPTO_SECRETBOX_NONCEBYTES);
    $message = sodium_crypto_secretbox(
        $plaintext,
        $key,
        $nonce
    );
</code>

Libsodium has a plethora of useful cryptography features:

  * Password hashing and key derivation (sodium_crypto_pwhash_*)
    * Argon2i (the chosen algorithm of the Password Hashing Competition)
    * Scrypt
  * ECDH over Curve25519 (sodium_crypto_box)
  * Authenticated secret key encryption (sodium_crypto_secretbox)
  * Ed25519 digital signatures  (sodium_crypto_sign)
  * AEAD Modes
    * ChaCha20-Poly1305
    * AES-256-GCM

Libsodium (like NaCl, from which it was forked) is widely regarded by cryptography and security industry experts for many reasons:

  * No guesswork. The APIs are simple and powerful.
  * Conservative security. Great effort was taken to perform every security-critical operation in constant time.
  * Best-in-class elliptic curve cryptography.

===== Proposed PHP Version(s) =====

This RFC targets PHP 7.1.

===== RFC Impact =====

I'm not aware of any potential impact that adopting libsodium will have on other RFCs.

==== New Constants ====

See the list of all libsodium constants in the reference. In every case, \Sodium\FOO will be transformed to SODIUM_FOO.

<code>
SODIUM_CRYPTO_AEAD_AES256GCM_KEYBYTES	=>	32
SODIUM_CRYPTO_AEAD_AES256GCM_NSECBYTES	=>	0
SODIUM_CRYPTO_AEAD_AES256GCM_NPUBBYTES	=>	12
SODIUM_CRYPTO_AEAD_AES256GCM_ABYTES	=>	16
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_KEYBYTES	=>	32
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NSECBYTES	=>	0
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NPUBBYTES	=>	8
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_ABYTES	=>	16
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_KEYBYTES	=>	32
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NSECBYTES	=>	0
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NPUBBYTES	=>	12
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_ABYTES	=>	16
SODIUM_CRYPTO_AUTH_BYTES	=>	32
SODIUM_CRYPTO_AUTH_KEYBYTES	=>	32
SODIUM_CRYPTO_BOX_SEALBYTES	=>	16
SODIUM_CRYPTO_BOX_SECRETKEYBYTES	=>	32
SODIUM_CRYPTO_BOX_PUBLICKEYBYTES	=>	32
SODIUM_CRYPTO_BOX_KEYPAIRBYTES	=>	64
SODIUM_CRYPTO_BOX_MACBYTES	=>	16
SODIUM_CRYPTO_BOX_NONCEBYTES	=>	24
SODIUM_CRYPTO_BOX_SEEDBYTES	=>	32
SODIUM_CRYPTO_KX_BYTES	=>	32
SODIUM_CRYPTO_KX_PUBLICKEYBYTES	=>	32
SODIUM_CRYPTO_KX_SECRETKEYBYTES	=>	32
SODIUM_CRYPTO_GENERICHASH_BYTES	=>	32
SODIUM_CRYPTO_GENERICHASH_BYTES_MIN	=>	16
SODIUM_CRYPTO_GENERICHASH_BYTES_MAX	=>	64
SODIUM_CRYPTO_GENERICHASH_KEYBYTES	=>	32
SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MIN	=>	16
SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MAX	=>	64
SODIUM_CRYPTO_PWHASH_SALTBYTES	=>	16
SODIUM_CRYPTO_PWHASH_STRPREFIX	=>	$argon2i$
SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE	=>	4
SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE	=>	33554432
SODIUM_CRYPTO_PWHASH_OPSLIMIT_MODERATE	=>	6
SODIUM_CRYPTO_PWHASH_MEMLIMIT_MODERATE	=>	134217728
SODIUM_CRYPTO_PWHASH_OPSLIMIT_SENSITIVE	=>	8
SODIUM_CRYPTO_PWHASH_MEMLIMIT_SENSITIVE	=>	536870912
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_SALTBYTES	=>	32
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_STRPREFIX	=>	$7$
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_INTERACTIVE	=>	534288
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_INTERACTIVE	=>	16777216
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_SENSITIVE	=>	33554432
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_SENSITIVE	=>	1073741824
SODIUM_CRYPTO_SCALARMULT_BYTES	=>	32
SODIUM_CRYPTO_SCALARMULT_SCALARBYTES	=>	32
SODIUM_CRYPTO_SHORTHASH_BYTES	=>	8
SODIUM_CRYPTO_SHORTHASH_KEYBYTES	=>	16
SODIUM_CRYPTO_SECRETBOX_KEYBYTES	=>	32
SODIUM_CRYPTO_SECRETBOX_MACBYTES	=>	16
SODIUM_CRYPTO_SECRETBOX_NONCEBYTES	=>	24
SODIUM_CRYPTO_SIGN_BYTES	=>	64
SODIUM_CRYPTO_SIGN_SEEDBYTES	=>	32
SODIUM_CRYPTO_SIGN_PUBLICKEYBYTES	=>	32
SODIUM_CRYPTO_SIGN_SECRETKEYBYTES	=>	64
SODIUM_CRYPTO_SIGN_KEYPAIRBYTES	=>	96
SODIUM_CRYPTO_STREAM_KEYBYTES	=>	32
SODIUM_CRYPTO_STREAM_NONCEBYTES	=>	24
</code>

===== References =====
Links to external references, discussions or RFCs:

  * [[https://github.com/jedisct1/libsodium-php|PECL libsodium]] (the current implementation)
  * [[https://paragonie.com/book/pecl-libsodium|Libsodium PHP documentation]]
  * [[https://paragonie.com/book/pecl-libsodium/read/01-quick-start.md#constant-index|List of all libsodium constants]]