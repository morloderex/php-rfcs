====== PHP RFC: ?= (check and set) operator ======
  * Version: 0.1
  * Date: 2018-07-06
  * Author: Jefersson Nathan, malukenho@php.net
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/check_and_set


===== Introduction =====

Combined assignment operators have  been around since 1970's, appearing first in the C Programming Language. For example, `<nowiki>$x = $x + 3</nowiki>` can be shortened to
`<nowiki>$x += 3</nowiki>`.

With PHP being a web focused language, the `?:` operator is often used to check something's existence like `<nowiki>$this->obj = $obj ?: new \stdClass;</nowiki>` However, because
variable names are often much longer than `<nowiki>$username</nowiki>`, the use of `<nowiki>?:</nowiki>` for self assignment creates repeated code, like:

<code php>
 $this->requestDataFomUserWasFound = $this->requestDataFomUserWasFound ?: 'value';
</code>

It is also intuitive to use combined assignment operator null coalesce checking for self assignment.

# Proposal

Despite `<nowiki>?:</nowiki>` operator being a comparison operator, coalesce equal or `<nowiki>?=</nowiki>` operator is an assignment operator. If the left parameter is null, assigns the value of the right paramater to the left one. If the value is not null, nothing is made.


<code php>
// The folloving lines are doing the same
$this->requestDataFromUserWasFound = $this->requestDataFromUserWasFound ?: 'value';

// Instead of repeating variables with long names, the equal check and set operator is used
$this->requestDataFromUserWasFound ?= 'value';
</code>

The value of right-hand parameter is copied if the left-hand parameter is null-like.

===== Proposed PHP Version(s) =====

This proposed for the next PHP 7.x.

===== Patches and Tests =====

A pull request with a working implementation is on the way.

===== References =====

Inspired by: https://wiki.php.net/rfc/null_coalesce_equal_operator