====== PHP RFC: First Class Callables in constant expressions ======
  * Version: 1.0
  * Date: 2025-01-07
  * Author: Tim Düsterhus (tim@tideways-gmbh.com), Volker Dusch (volker@tideways-gmbh.com)
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/fcc_in_const_expr

===== Introduction =====

The [[rfc:closures_in_const_expr|Support Closures in constant expressions]] RFC added support for Closures in constant expressions. The RFC left supporting “[[rfc:first_class_callable_syntax|First Class Callables]]” (“FCC”), which can be considered syntax sugar for creating a Closure that just forwards any calls to the callable in question.

Given that FCCs effectively act as syntax sugar, the same use cases as with Closures themselves also apply to this RFC. It is intended to round off the “Closures in constant expressions” RFC.

===== Proposal =====

This RFC proposes that it shall be legal to use the FCC syntax in constant expressions.

==== Constraints ====

All the constraints imposed on FCCs outside of constant expressions naturally also apply to FCCs within constant expressions. Defining a FCC within a constant expression comes with the following additional constraints:

  * Only references to free-standing functions and to static methods (<php>::</php>) are supported.
  * Only the standard <php>function_name(...)</php> or <php>ClassName::methodName(...)</php> references are supported. The function name must not be an expression (constant or otherwise). <php>[ClassName::class, 'methodName'](...)</php>, <php>(Constant)(...)</php>, or similar are not supported.
  * Referencing methods that implicitly exist due to the existence of a <php>__callStatic()</php> method on the referenced class are not supported.

==== Scoping ====

As with other constant-expressions, FCC defined in constant expressions follow the expected scoping rules of the context they are placed in.
All the features and examples of the proposal. This means that FCC in property default values //may// reference <php>private</php> methods of the class where they are defined, similarly to how a FCC defined in the constructor and stored in a property may access those <php>private</php> methods. Likewise are FCC in attribute parameters allowed to access <php>private</php> methods of the surrounding class.

===== Backward Incompatible Changes =====

None. Using first class callables within constant expressions previously resulted in a compile-time error. Closures can appear within constant expressions since the [[rfc:closures_in_const_expr|Support Closures in constant expressions]] RFC.

Nevertheless, as with every RFC that changes what previously was a compile-time error to be valid PHP code, this RFC requires changes to static analyzers and IDEs to correctly understand the semantics of the code and not erroneously report errors.


===== Proposed PHP Version(s) =====

Next 8.x (8.5).

===== RFC Impact =====

==== To SAPIs ====

None.

==== To Existing Extensions ====

None.

==== To Opcache ====

tbd

==== New Constants ====

None.

==== php.ini Defaults ====

None.

===== Open Issues =====

None.

===== Unaffected PHP Functionality =====

Only constant expression are affected by this change, but Closures could already appear within them.


===== Future Scope =====

None.

===== Proposed Voting Choices =====

<doodle title="Support first class callables in constant expressions as proposed?" auth="timwolla" voteType="single" closed="true" closeon="2024-11-27T14:00:00Z">
   * Yes
   * No
</doodle>

===== Patches and Tests =====

https://github.com/php/php-src/pull/17213

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged into
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
  - a link to the language specification section (if any)

===== References =====

  - [[rfc:closures_in_const_expr]]
  - https://github.com/php/php-src/pull/17213

===== Rejected Features =====

n/a