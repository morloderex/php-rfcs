====== PHP RFC: Introduce script only include/require ======
  * Version: 1.0
  * Created: 2015-02-10
  * Modified: 2015-02-20
  * Author: Yasuo Ohgaki <yohgaki@ohgaki.net>
  * Status: Under Discussion
  * First Published at: http://wiki.php.net/rfc/script_and_script_once
  * Renamed to: http://wiki.php.net/rfc/script_path
  * Renamed to: http://wiki.php.net/rfc/script_only_include

===== Introduction =====
include()/require() is source of file/script inclusion for a long time. **File inclusion is extremely severe security breach** and **PHP is too weak against file inclusion attacks with respect to other languages.** 

  * [[http://www.exploit-db.com/search/?action=search&filter_page=1&filter_description=PHP&filter_author=&filter_platform=0&filter_type=0&filter_lang_id=0&filter_exploit_text=inclusion&filter_port=0&filter_osvdb=&filter_cve=
|PHP]] (many and these are _only_ few of them in the wild)
  * [[http://www.exploit-db.com/search/?action=search&filter_page=1&filter_description=&filter_exploit_text=PERL&filter_author=inclusion&filter_platform=0&filter_type=0&filter_lang_id=0&filter_port=&filter_osvdb=&filter_cve=|PERL]] (0 result)
  * [[http://www.exploit-db.com/search/?action=search&filter_page=1&filter_description=Rails&filter_exploit_text=inclusion&filter_author=&filter_platform=0&filter_type=0&filter_lang_id=0&filter_port=&filter_osvdb=&filter_cve=
|Rails]] (0 result)
  * [[http://www.exploit-db.com/search/?action=search&filter_page=1&filter_description=Python&filter_exploit_text=inclusion&filter_author=&filter_platform=0&filter_type=0&filter_lang_id=0&filter_port=&filter_osvdb=&filter_cve=|Python]] (0 result)
  * [[http://www.exploit-db.com/search/?action=search&filter_page=1&filter_description=JSP&filter_exploit_text=inclusion&filter_author=&filter_platform=0&filter_type=0&filter_lang_id=0&filter_port=&filter_osvdb=&filter_cve=
|JSP]] (1 result - This is famous)


==== The Root of This Difference ====

The root cause of the difference is how scripts are loaded.

=== Python ===

Python loads script like
<code python>
import foo
</code>
where foo is **foo.py**.

=== Ruby ===

Ruby loads script like
<code ruby>
require 'foo'
</code>
where foo is **foo.rb**.

=== PHP ===

PHP loads script like
<code php>
require 'foo.php'
</code>
where **foo.php** is the script loaded. i.e. Raw/full filename is specified as script to be loaded.

=== Other Languages ===

Other languages provides loading script without file extension. This prevents "script inclusion" attacks effectively. Above number of vulnerabilities is the proof.


====Solution====
Solution for this issue is simple. Introduce **script only include/require** and modify **move_uploaded_file()**  function not to move PHP script embedded files. With this RFC, PHP becomes as secure as other languages against file inclusion attacks.

===== Discussions =====

====OS protection is **NOT** perfect protection====

OS protection works well for system file. However, any applications support file uploads can be attacked by inclusion attacks. i.e. require('../../upload/evil_file') can be done with bad PHP code.

====open_basedir is not helpful====

open_basedir restrict file reads, but it's not helpful. Attackers use uploaded files to exploit PHP applications. These uploaded files are images, document, etc. Session data file is common target for attackers also.

====Uploaded Files====

Even though move_upload_file() is **obsolete** function, users are supposed to use move_uploaded_file() function to move uploaded files to destination directory. move_uploaded_files() is modified to prevent/refuse to move "PHP scripts" without user setting. 

Note: Currently, there is no real difference rename() and move_uploaded_file().

===== Proposal =====

==== Introduce php script extension configuration: ====


Web SAPI
  php_scripts = ".php .phar" ; Allow only *.php and *.phar. User may add/change this INI setting.

CLI SAPI
  php_scripts = "*" ; Allow any file for CLI by default.

PHP checks file extension if it is allowed to load as PHP script when loading scripts by require/require_once/include/include_once.

If file does not have expected extension, require/require_once/include/include_once emits E_ERROR. 


==== Introduce $allow_script flag to move_uploaded_file(): ====

<code php>
  bool move_uploaded_file(string $filename , string $destination [, $allow_script=FALSE ] )
</code>

With current PHP, move_uploaded_file() has no real protection. Add new flag and make it useful again.

==== Old proposals ====

  * Detect "<?php" at the top of file and disallow "?>": This still allows to load PHP script like 'require "image.png";'/etc.
  * Introduce script()/script_once(): The same issue as above.
  * Introduce embed_mode INI: The save issue as above.

===== Backward Incompatible Changes =====

  * If users have different extensions other than de facto standard, they have to modify "php_scripts" INI.
  * move_uploaded_file() cannot move PHP scripts unless $allow_script=TRUE.

===== Proposed PHP Version(s) =====

PHP 7

===== RFC Impact =====
==== To SAPIs ====

Web SAPI
  * New "php_scripts" INI

CLI SAPI
  * New "php_scripts" INI - No BC impact since it allows any file as PHP script.

==== To Existing Extensions ====

Extensions that have custom script loader with custom extension.

==== To Opcache ====

None

==== New Constants ====

None

==== php.ini Defaults ====

php_script: INI_ALL for all.

  * hardcoded default values
    * Web SAPI: ".php .phar"
    * CLI SAPI: "*"
  * php.ini-development values
    * "" (Empty. Use the default)
  * php.ini-production values
    * "" (Empty. Use the default)

===== Open Issues =====

  * Error type - E_ERROR or E_RECOVERABLE_ERROR
  * Vote type - 50%+1 or 2/3+1

===== Unaffected PHP Functionality =====

All of require/require_once/include/include_once are affected by this.

===== Future Scope =====

  * Allow script without PHP tag.

===== Proposed Voting Choices =====

State whether this project requires a 2/3 or 50%+1 majority (see [[voting]])

50%+1 vote?

===== Patches and Tests =====

Will be prepared before vote.

===== Implementation =====

  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== References =====

  * https://wiki.php.net/rfc/nophptags


===== Rejected Features =====
Keep this updated with features that were discussed on the mail lists.