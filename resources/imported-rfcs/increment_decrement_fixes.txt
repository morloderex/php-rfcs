====== PHP RFC: Increment/Decrement Fixes ======
  * Version: 0.3
  * Date: 2020-03-01
  * Author: Rowan Tommins, rowan.collins@gmail.com
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/increment_decrement_fixes

===== Introduction =====

The increment and decrement operators (<php>++$a</php>, <php>$a++</php>, <php>--$a</php>, <php>$a--</php>) mostly behave the same as adding 1 to the variable. However, because they are implemented separately, there are a handful of anomalies regarding non-integer values, whose behaviour is not consistent with an integer cast. In particular, this RFC focuses on null, boolean, and array values.

Intuitively, the <php>++</php> and <php>--</php> operators are equivalent to "add 1 to variable" and "subtract 1 from variable", respectively. As such, it would be expected that <php>$a=$a+1</php>, <php>$a+=1</php>, and <php>++$a</php> would end up with the same value in <php>$a</php>; and likewise, <php>$a=$a-1</php>, <php>$a-=1</php>, and <php>--$a</php>.

This is currently not the case, because <php>++</php> and <php>--</php> are implemented separately for each type via a switch statement in the engine. Rather than coercing the current value to an integer, the default case in this switch statement is to silently leave the value unchanged.

For null and boolean, addition and subtraction are based on casting to integer; for arrays, they throw an error; this RFC aims to make increment and decrement consistent in all three cases.


===== Proposal 1: Decrementing Null =====

The behaviour of null with <php>++</php> is consistent with it being coerced to int(0); however, with <php>--</php> the null remains unchanged.

This behaviour has been raised as a bug at least three times ([[https://bugs.php.net/bug.php?id=20548|#20548]], [[https://bugs.php.net/bug.php?id=25674|#25674]], [[https://bugs.php.net/bug.php?id=41690|#41690]]). All three are closed, and it is [[https://www.php.net/manual/en/language.operators.increment.php|documented in the manual]], but there is no evidence that it is intentional behaviour rather than an entrenched bug retained for compatibility.

Discrepancies in behaviour of null are particularly problematic, since undefined variables, array items, and object properties are currently treated as having a value of null.

This RFC proposes to change the behaviour, so that <php>$a=null; $a--;</php> or <php>$a=null; --$a;</php> will result in $a holding -1. This brings it into line with all other mathematical operations, include <php>$a++</php>, which treat null as equivalent to 0.

^ ^ Initial Value ^ %%$a = $a + 1%% ^ %%$a += 1%% ^ %%++$a%%, %%$a++%% ^ %%$a = $a - 1%% ^ %%$a -= 1%% ^ %%--$a%%, %%$a--%% ^
^ Current ^ null | 1 | 1 | 1 | -1 | -1 | null |
^ Proposed ^ null | 1 | 1 | 1 | -1 | -1 | -1 |

===== Proposal 2: Incrementing and Decrementing Booleans ======

The behaviour of booleans with most mathematical operations is to treat false as 0 and true as 1. However, the <php>++</php> and <php>--</php> operators currently leave boolean values unchanged.

This RFC proposes to change the behaviour so that it is in line with other mathematical contexts, as follows:

^ ^ Initial Value ^ %%$a = $a + 1%% ^ %%$a += 1%% ^ %%++$a%%, %%$a++%% ^ %%$a = $a - 1%% ^ %%$a -= 1%% ^ %%--$a%%, %%$a--%% ^
^ Current ^ true | 2 | 2 | true | 0 | 0 | true |
^ Proposed ^ true | 2 | 2 | 2 | 0 | 0 | 0 |
^ Current ^ false | 1 | 1 | false | -1 | -1 | false |
^ Proposed ^ false | 1 | 1 | 1 | -1 | -1 | -1 |

===== Proposal 3: Error when incrementing or decrementing an array =====

Adding an integer to an array produces an "Unsupported operand types" error, but incrementing or decrementing it leaves it unchanged, with no Notice, Warning, or Error.

This RFC proposes to change the behaviour so that <php>$a=[]; $a++;</php> and <php>$a=[]; $a--;</php> raise the same error as <php>$a = [] + 1;</php>.

^ ^ Initial Value ^ %%$a = $a + 1%% ^ %%$a += 1%% ^ %%++$a%%, %%$a++%% ^ %%$a = $a - 1%% ^ %%$a -= 1%% ^ %%--$a%%, %%$a--%% ^
^ Current ^ any array | Error | Error | no effect | Error | Error | no effect |
^ Proposed ^ any array | Error | Error | Error | Error | Error | Error |

===== Backward Incompatible Changes =====

All of the proposed changes are explicit breaks in compatibility. The justification is that the current behaviour is neither intuitive nor useful, and it is unlikely that code is deliberately relying on it.


===== Proposed PHP Version(s) =====

8.0


===== RFC Impact =====

===== Open Issues =====

None at time of initial discussion.


===== Unaffected PHP Functionality =====

**Undefined variables, array items, and object properties** are currently treated as null for most purposes, including the <php>++</php> and <php>--</php> operators. Changing this behaviour is out of scope of this RFC, and the behaviour of variables explicitly set to null would still need to be defined even without this.

Similarly, most mathematical contexts will coerce null and false to 0, and true to 1; this RFC does not seek to change any cases where that logic is followed. Changes to that general principle might render this RFC obsolete, but might require a period of deprecation, so consistency within the current approach may still be valuable.

**Strings** overload the <php>++</php> and <php>--</php> operators with complex behaviour not discussed here. Improving this deserves its own discussion, so has been left out of this RFC.

**Objects and resources** are also left unchanged with <php>++</php> and <php>--</php>; it would be consistent with the aim of this RFC to propose harmonising those with their behaviour when adding 1. However, in both cases, the current behaviour is of dubious value, so it may be better to leave this to a separate RFC tackling the general issue, e.g. raising an Error in line with arrays.

For reference, the current behaviour for most operations is that objects are coerced to int(1), and resources to their internal ID, giving this table:

^ Initial Value ^ %%$a = $a + 1%% ^ %%$a += 1%% ^ %%++$a%%, %%$a++%% ^ %%$a = $a - 1%% ^ %%$a -= 1%% ^ %%--$a%%, %%$a--%% ^
^ any object | 2 (with E_NOTICE) | 2 (with E_NOTICE) | no effect | 0 (with E_NOTICE) | 0 (with E_NOTICE) | no effect |
^ resource#1 | 2 | 2 | no effect | 0 | 0 | no effect |
^ resource#5 | 6 | 6 | no effect | 4 | 4 | no effect |


===== Proposed Voting Choices =====

  * Should decrementing null result in -1? (Yes / No)
  * Should incrementing and decrementing booleans act the same as addition and subtraction? (Yes / No)
  * Should incrementing or decrementing an array throw an "Unsupported operand types" error? (Yes / No)


===== Patches and Tests =====

None yet. The implementation should be a simple addition to the ''increment_function'' and ''decrement_function'' definitions in ''Zend/zend_operators.c''.

===== Implementation =====

TODO

===== References =====

* [[https://externals.io/message/108602|Pre-RFC discussion]]
* [[https://wiki.php.net/rfc/alpanumeric_decrement|RFC: Alphanumeric Decrement]] (rejected)
* [[https://wiki.php.net/rfc/normalize_inc_dec|RFC: Normalize inc/dec]] (inactive)

===== Rejected Features =====

TODO