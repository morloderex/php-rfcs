====== PHP RFC: Increment/Decrement Fixes ======
  * Version: 0.1
  * Date: 2020-03-01
  * Author: Rowan Tommins, rowan.collins@gmail.com
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/increment_decrement_fixes

===== Introduction =====

The increment and decrement operators (<php>++$a</php>, <php>$a++</php>, <php>--$a</php>, <php>$a--</php>) mostly behave the same as adding 1 to the variable. However, because they are implemented separately, there are a handful of anomalies regarding non-integer values, which do are not incremented consistently with an integer cast.

Intuitively, the <php>++</php> and <php>--</php> operators are equivalent to "add 1 to variable" and "subtract 1 from variable", respectively. As such, it would be expected that <php>$a=$a+1</php>, <php>$a+=1</php>, and <php>++$a</php> would end up with the same value in <php>$a</php>; and likewise, <php>$a=$a-1</php>, <php>$a-=1</php>, and <php>--$a</php>.

This is currently not the case, as the table below shows:


^ Initial Value ^ %%$a = $a + 1%% ^ %%$a += 1%% ^ %%++$a%%, %%$a++%% ^ %%$a = $a - 1%% ^ %%$a -= 1%% ^ %%--$a%%, %%$a--%% ^
^ 0 | 1 | 1 | 1 | -1 | -1 | -1 | 
^ null | 1 | 1 | 1 | -1 | -1 | null |
^ true | 2 | 2 | true | 0 | 0 | true |
^ false | 1 | 1 | false | -1 | -1 | false |
^ array | Error | Error | silent | Error | Error | silent |
^ object | 2 (+ Notice) | 2 (+ Notice) | unchanged | 0 (+ Notice) | 0 (+ Notice) | unchanged |
^ resource#5 | 6 | 6 | resource#5 | 4 | 4 | resource #5 |


The reason this is possible is because <php>++</php> and <php>--</php> are implemented separately for each type via a switch statement in the engine, rather than by coercing to integer. The default case in this switch statement is to silently leave the value unchanged.


===== Proposal 1: Decrementing Null =====

The behaviour of null with <php>++</php> is consistent with it being coerced to int(0); however, with <php>--</php> the null remains unchanged.

This behaviour has been raised as a bug at least three times ([[https://bugs.php.net/bug.php?id=20548|#20548]], [[https://bugs.php.net/bug.php?id=25674|#25674]], [[https://bugs.php.net/bug.php?id=41690|#41690]]). All three are closed, and it is [[https://www.php.net/manual/en/language.operators.increment.php|documented in the manual]], but there is no evidence that it is intentional behaviour rather than an entrenched bug retained for compatibility.

Discrepancies in behaviour of null are particularly problematic, since undefined variables, array items, and object properties are widely treated as having a value of null.

This RFC proposes to change the behaviour, so that <php>$a=null; $a--;</php> or <php>$a=null; --$a;</php> will result in $a holding -1. This brings it into line with all other mathematical operations, include <php>$a++</php>, which treat null as equivalent to 0.

===== Proposal 2: Incrementing and Decrementing Booleans ======

The behaviour of booleans with most mathematical operations is to treat false as 0 and true as 1. However, the <php>++</php> and <php>--</php> operators do not currently have an implementation for booleans, so they remain unchanged. The current behaviour is therefore this:

^ Initial Value ^ %%$a = $a + 1%% ^ %%$a += 1%% ^ %%++$a%%, %%$a++%% ^ %%$a = $a - 1%% ^ %%$a -= 1%% ^ %%--$a%%, %%$a--%% ^
^ true | 2 | 2 | true | 0 | 0 | true |
^ false | 1 | 1 | false | -1 | -1 | false |

This RFC proposes to change the behaviour so that it is in line with other mathematical contexts, giving this:

^ Initial Value ^ %%$a = $a + 1%% ^ %%$a += 1%% ^ %%++$a%%, %%$a++%% ^ %%$a = $a - 1%% ^ %%$a -= 1%% ^ %%--$a%%, %%$a--%% ^
^ true | 2 | 2 | 2 | 0 | 0 | 0 |
^ false | 1 | 1 | 1 | -1 | -1 | -1 |


===== Backward Incompatible Changes =====

The proposed changes to null and boolean handling are not backwards compatible. The current behaviour is not particularly useful, so it is unlikely that code is deliberately relying on it.


===== Proposed PHP Version(s) =====

8.0


===== RFC Impact =====

===== Open Issues =====

objects, arrays, resources...


===== Unaffected PHP Functionality =====

* Undefined variables, array items, and object properties are currently treated as null for most purposes, including the <php>++</php> and <php>--</php> operators. Changing this behaviour is out of scope of this RFC, and the behaviour of variables explicitly set to null would still need to be defined.
* Similarly, most mathematical contexts will coerce null and false to 0, and true to 1; this RFC does not seek to change any cases where that logic is followed. Changes to that general principle might render this RFC obsolete, but might require a period of deprecation, so consistency of the current approach may still be valuable.
* Strings overload the <php>++</php> and <php>--</php> operators with complex behaviour not discussed here. Improving this deserves its own discussion, so has been left out of this RFC.


===== Proposed Voting Choices =====

* Should decrementing null result in -1? (Yes / No)
* Should incrementing and decrementing booleans act the same as addition and subtraction? (Yes / No)


===== Patches and Tests =====

TODO

===== Implementation =====

TODO

===== References =====

* [[https://externals.io/message/108602|Pre-RFC discussion]]
* [[https://wiki.php.net/rfc/alpanumeric_decrement|RFC: Alphanumeric Decrement]] (rejected)
* [[https://wiki.php.net/rfc/normalize_inc_dec|RFC: Normalize inc/dec]] (inactive)

===== Rejected Features =====

TODO