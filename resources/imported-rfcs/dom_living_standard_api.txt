====== PHP RFC: Implement Current DOM Living Standard API ======

  * Version: 0.1
  * Date: 2019-03-13
  * Author: Benjamin Eberlei (beberlei@php.net), Thomas Weinert 
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/dom_living_standard_api

===== Introduction =====

Working with XML (HTML) documents is a necessary task for many web applications
and the dom extension implements a standardized API that was previously
specified by a w3 group into 3 DOM Levels. Since then the standard has evolved
and is now a Living Standard similar to HTML 5 and continously evolving and
maintained by the Web Hypertext Application Technology Working Group (WHATWG).

- https://dom.spec.whatwg.org

Because the new API provides much improved traversal and manipulation APIs than the old API
we propose to add the new methods to the existing ext/dom API.

Specifically we think this is a better solution to providing them in userland, because

  - ext/dom + DOMDocument represents the DOM Standard, so we should continue to support the evolving versions.
  - the added methods are a huge value add to users and fix a lot of more complicated approaches that were previously required by users. The search or re-implementation costs are high for users.

In addition this RFC seeks the approval to continue adding changes from the DOM
Living Standard without RFCs in the future as long as they are implemented in a
backwards compatible way.

===== Proposal =====

Follow the DOM Living Standard with ext/dom

For the first implementation step the following new interfaces are added and
implementations provided for the mentioned classes that now implement them:

    <?php
    interface DOMParentNode
    {
        public readonly DOMNode? $previousElementNode;
        public readonly DOMNode? $nextElementNode;
        public readonly int $childElementCount;
    
        public function append(...DOMNode|string|null $nodes) : void;
        public function prepend(...DOMNode|string|null $nodes) : void;
    }
    
    class DOMDocument implements DOMParentNode {}
    class DOMElement implements DOMParentNode {}
    class DOMDocumentFragment implements DOMParentNode {}
    
    interface DOMChildNode
    {
        public readonly DOMNode? $previousElementSibling;
        public readonly DOMNode? $nextElementSibling;
    
        public function remove() : void;
        public function before(...DOMNode|string|null $nodes) : void;
        public function after(...DOMNode|string|null $nodes) : void;
        public function replaceWith(...DOMNode|string|null $nodes) : void;
    }
    
    class DOMElement implements DOMChildNode {}
    class DOMCharacterData implements ChildNode {}
    class DOMDocumentType implements ChildNode {}

**Implementation choices:**

The standard contains an intermediate interface //DOMNonDocumentTypeChildNode//
that contains the //previousElementSibling// and //nextElementSibling// properties.
This is introduced to provide backwards compatibility with browser/web
implementations, which are not our concern. In addition PHP interfaces cannot
have properties, so it wouldn't make sense to add this empty interface. For this reason this class was not introduced, but the properties are instead on DOMChildNode directly.

The //querySelector// and //querySelectorAll// methods defined on the //DOMParentNode//
interface are omitted, because of their complexity we recommend to leave
comparable implementations of these methods to userland libraries such as
PhpCss or Symfony CSS Selector.

===== Backward Incompatible Changes =====

No BC Breaks

===== Proposed PHP Version(s) =====

PHP 7.4

===== RFC Impact =====

==== To SAPIs ====

No effect on SAPIs.

==== To Existing Extensions ====

No effect on existing extensions.

The new functionality can all be implemented entirely using the already available libxml2 datastructures.

==== To Opcache ====

No effect on Opcache.

===== Future Scope =====

In the future this RFC seeks approval to add more functionality of the DOM Living Standard to ext/dom
as long as no backwards incompatible changes are introduced.

The CSS query selector APIs could be added in a future version by introducing a new interface:

    interface DOMQuerySelector
    {
        public function querySelector($selector) : ?DOMNode;
        public function querySelectorAll($selector) : DOMNodeList
    }
    
The complexity for this is very high though, because it requires a CSS parser and there are already good userland solutions available.

===== Patches and Tests =====

https://github.com/beberlei/php-src/pull/1

This pull request is still work in progress. 

===== Implementation =====

tbd

===== References =====

- DOM Living Standard Document https://dom.spec.whatwg.org
