====== PHP RFC: Fibers ======
  * Version: 0.1
  * Date: 2020-09-04
  * Author: Aaron Piotrowski <trowski@php.net>
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/fibers

===== Introduction =====
Fibers create full-stack, interruptible functions that may be used to implement cooperative concurrency in PHP. Unlike stack-less Generators, each Fiber contains a call stack, allowing them to be paused within deeply nested function calls. A function declaring an interruption point (calling ''Fiber::suspend()'') need not change its return type, unlike a function using ''yield'' which must return a ''Generator'' instance. Fibers pause the entire execution stack, so the direct caller of the function does not need to change how it handles the function.

Implementations of cooperative concurrency using promises suffer from the [[https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/|"What color is your function?"]] problem.   Once one function returns a promise somewhere in your call stack, the entire call stack needs to return a promise.

Fibers aim to solve this problem, allowing functions to be interruptible without polluting the entire call stack.

===== Proposal =====
This RFC proposes adding a ''Fiber'' class to PHP implementing interruptible fibers.

A fiber is created using any callable. The callable may use ''Fiber::suspend()'' to interrupt execution anywhere in the call stack (that is, the call to ''Fiber::suspend()'' may be in a deeply nested function or not even exist at all).

Execution of the callable is started using ''Fiber::start(mixed ...$args)'', invoking the fiber callable with the given arguments. The value returned from ''start()'' is the value given to the first occurrence of ''Fiber::suspend()''. The fiber may be resumed with a value using ''Fiber::resume()'' or an exception using ''Fiber::throw()''. The given to ''resume()'' is used as the return value of the ''Fiber::suspend()'' call or the exception is thrown from that point. ''Fiber::resume()'' or ''Fiber::throw()'' either return the value from the next call to ''Fiber::suspend()'', throw an exception if the fiber throws an uncaught exception, or returns ''NULL'' if the fiber completes (returns). The return value of a fiber is obtained through ''Fiber::getReturn()''.

<code php>
final class Fiber
{
    public const STATUS_INIT = 0;
    public const STATUS_SUSPENDED = 1;
    public const STATUS_RUNNING = 2;
    public const STATUS_FINISHED = 3;
    public const STATUS_DEAD = 4;

    /**
     * @param callable $callback Function to invoke when starting the Fiber.
     */
    public function __construct(callable $callback) { }

    /**
     * @return int One of the Fiber status constants.
     */
    public function getStatus(): int { }

    /**
     * Start the Fiber by invoking the callback given to the constructor with the given arguments.
     *
     * @param mixed ...$args
     *
     * @return mixed Value given to next {@see Fiber::suspend()} call or NULL (finishes).
     *
     * @throws Throwable If the fiber throws, the exception will be thrown from this call.
     */
    public function start(mixed ...$args): mixed { }

    /**
     * @param mixed $value Value to return from {@see Fiber::suspend()}.
     *
     * @return mixed Value given to next {@see Fiber::suspend()} call or NULL if the fiber returns (finishes).
     *
     * @throws Throwable If the fiber throws, the exception will be thrown from this call.
     */
    public function resume(mixed $value = null): mixed { }

    /**
     * @param Throwable $exception Exception to throw from {@see Fiber::suspend()}.
     *
     * @return mixed Value given to next {@see Fiber::suspend()} call or NULL if the fiber returns (finishes).
     *
     * @throws Throwable If the fiber throws, the exception will be thrown from this call.
     */
    public function throw(\Throwable $exception): mixed { }

    /**
     * @return mixed Fiber return value.
     *
     * @throws Error If the fiber has not finished.
     */
    public function getReturn(): mixed { }

    /**
     * @param mixed $value Suspension value, which is then returned from {@see Fiber::resume()} or
     *                     {@see Fiber::throw()}.
     *
     * @return mixed Value given to {@see Fiber::resume()} when resuming the fiber.
     *
     * @throws Throwable Exception given to {@see Fiber::throw()}.
     * @throws Error Thrown if not within a Fiber context.
     */
    public static function suspend(mixed $value = null): mixed { }
}
</code>

[[https://github.com/amphp/green-thread|Green Threads using Amp]]

===== Backward Incompatible Changes =====
Declares ''Fiber'' in the root namespace. No other BC breaks.

===== Proposed PHP Version(s) =====
PHP 8.1

===== Future Scope =====
=== suspend keyword ===
''Fiber::suspend()'' could be replaced with a keyword such as ''suspend''.

=== async/await and Promises ===
Fibers can be used to implement a non-traditional version of async/await using a promise-like object. Fiber would implement the promise interface, and ''async'' and ''await'' keywords could be used to create new fibers and await promises within those fibers.
===== Proposed Voting Choices =====
Merge implementation into core, 2/3 required.

===== Patches and Tests =====
Implementation at [[https://github.com/trowski/ext-fiber|trowski/ext-fiber]].

===== References =====
  * [[https://ruby-doc.org/core-2.5.0/Fiber.html|Ruby Fibers]]
  * [[https://wingolog.org/archives/2018/05/16/lightweight-concurrency-in-lua|Lua Fibers]]
  * [[https://cr.openjdk.java.net/~rpressler/loom/Loom-Proposal.html|Project Loom for Java]]
