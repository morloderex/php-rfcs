====== PHP RFC: Big Integer Support ======
  * Version: 0.9.2
  * Date: 2014-06-20
  * Author: Andrea Faulds, ajf@ajf.me
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/bigint

===== Introduction =====

Since the beginning, PHP has had only two numeric types: integer, and float. The former has been a platform-dependent C long, usually either 32-bit or 64-bit, and the latter has been a platform-dependent C double, usually an IEEE 754 double-precision floating-point number.

Both work relatively well, but beyond the maximum integer value on a specific platform, things get a bit messy. Typically, PHP will have integers overflow to floats, resulting in a loss of precision. Furthermore, integer size is also platform-specific, so code dealing with large integers won't act the same on a 32-bit machine versus a 64-bit machine.

Furthermore, some applications need to deal with very large integers beyond 32-bit or 64-bit. For this they can resort to extensions like gmp. However, dealing with these so-called "big integers" or "bigints" is rather clumsy. You must write all your code to deal with them specifically, and you must create objects for them rather than simply using numeric literals like for the built-in integer and float types.

Hence, this RFC proposes the addition of built-in bigint support to PHP. Now, you can do operations with integers of any size, so long as you have enough memory. While there are now two types internally (long and bigint), userland code will continue to see only "integers", and the two types will be indistinguishable.

The advantages of doing this are numerous. Now integers will always be consistent across platforms, with programmers not needing to worry about the size of a long – 32-bit, 64-bit or otherwise – on their platform. Operations, too, will always be consistent. This will help the portability of PHP code and mean less time wasted by programmers dealing with platform differences, strengthening PHP's cross-platform guarantees. Dealing with extremely large data sets becomes easier, as you no longer need to anticipate if your IDs will exceed 32 or 64 bits. Integer overflow is largely relegated to being an issue for internals programmers, as userland code will never have to deal with it, and there is no risk of a loss of precision as they will no longer become floats. All this combined is likely to make for more robust, less buggy applications. Finally, being able to deal with large integers "natively" makes PHP more attractive for web developers needing to do large integer math, such as  applications dealing with currency, or perhaps statistical applications.

===== Proposal =====

==== New type ====

To complement the existing internal IS_LONG and IS_DOUBLE types, a new IS_BIGINT type is introduced. IS_BIGINT is a reference-counted, copy-on-write type which is not garbage collected, much like a string. Behind-the-scenes, the GNU Multiple Precision library (aka GMP) is used to implement it, but it is abstracted with a new family of zend_bigint_* functions and the zend_bigint type, meaning that theoretically another arbitrary-precision integer library could be used in its place if we so desired. As stated in the Introduction, no new userland type is added to PHP, and instead "integer" now covers two internal types: IS_LONG and IS_BIGINT. There should be **no visible difference** to userland code between these types. Internally, a new "fake type" is also added, namely IS_BIGINT_OR_LONG. This is used by a few functions dealing with conversions and casts, and is now the "type" that (integer) will cast to. Type specifiers for zend_parse_parameters that previously yielded a long will continue to do so, with bigints being capped at the maximum value for a long. A new type specifier for a bigint will be added, and I also would like to add a type specifier for either a bigint or a long, but I haven't done these parts yet.

==== Changes to operators for the sake of consistency ====

In order to make integer arithmetic consistent between longs and bigints, certain changes to existing operator behaviour will be made.

Bitwise operators will now deal with integers of any size (i.e. both longs and bigints) instead of being bounded by the size of a long on a machine.

Currently, if you right shift a long by a number greater than its maximum number of bits, then the number of bits to shift by currently "wraps around" on some processors, e.g. >> 65 is the same as >> 1 on some 64-bit processors. This is counter-intuitive and couldn't be emulated with bigints (bigints have no maximum number of bits), so instead the sane thing will be done and << 65 will result in zero.

Relatedly, left shifts will promote to bigints rather than overflowing.

The pow (''*''''*'') operator will now error when an exponent too large is used if it is dealing with an integer. This is because gmp can't handle exponents beyond the size of an unsigned long. This restriction will not occur when using the pow operator when either operand is a float.

===== Backward Incompatible Changes =====

As mentioned before, the shift left and shift right operators act differently, as does pow for very large exponents.

Integers will no longer overflow to float, but instead become bigints (which, so far as userland cares, are just integers).

Some internal APIs, mostly ones dealing with numbers, will necessarily change their signatures or behaviour. For example, is_numeric_string/_ex now takes a zend_bigint** parameter, and the cast_object object handler now has to deal with IS_BIGINT_OR_LONG and IS_BIGINT. (However, I am wondering if I should remove the latter)

===== Proposed PHP Version(s) =====

This is proposed for the next PHP X, probably PHP 6. The patch is based off of phpng, and my intention is for it to be merged into phpng.

===== RFC Impact =====

==== Performance ====

The performance penalties //should// be only minor, however I have not yet benchmarked my patch. While left shifts and right shifts now require overflow checks, generally bigints will just take the place of floats in existing overflow checks so I don't expect there to be much performance impact.

Unfortunately, certain new failure cases for PHP are introduced. If you do an operation resulting in an extremely large number, you might hit your request memory limit. Also, certain operations with extremely large numbers can cause gmp to error fatally, which sadly can't be recovered from or handled gracefully.

==== Licensing and dependency issues ====

As a result of using GMP, it will now always be a requirement to build PHP. GMP is widely available, so this shouldn't cause platform issues.

However, it does cause a licensing issue. GMP is licensed under both the GPL and LGPL. As I understand it, using the LGPL with PHP shouldn't cause any problems for the vast majority of users, though I'm not an expert on this. It would confer an obligation to make available the GMP source code on people redistributing PHP, however this is not a terribly onerous requirement. If the fact GMP is LGPL-licensed causes a problem, it could be possible to swap it out for something more favourably licensed if such a library is available, due to the zend_bigint_* abstraction.

==== Arrays ====

A problem arising from allowing integers to be arbitrarily large is that array keys using strings for numeric keys beyond the maximum size of a long would probably seem weird. At present, bigints are just dealt with as if they were numeric strings when using them as array keys and indices, but this may not be optimal.

==== To 64-bit RFC ====

The [[rfc:size_t_and_int64_next|64 bit platform improvements for string length and integer in zval]] RFC would be affected by this. For one thing, there's less need to use 64-bit integers when bigints are supported, and their only benefit would now be performance. For another, GMP only supports the "long" datatype and not "long long". Hence, while Linux etc. which have longs on 64-bit systems be 64-bit would work fine, Windows poses a problem as longs on 64-bit Windows systems are still 32-bit, so some sort of trickery (likely by splitting 64-bit ints into high and low words) would need to be done to convert 64-bit ints to bigints or vice-versa. Of course, while this hurts performance, it would only be needed on Windows, and I don't expect the overhead would be too bad.

==== To SAPIs ====

This should have no impact on existing SAPIs.

==== To Existing Extensions ====

Any which request numeric parameters as zvals rather than longs or doubles from zend_parse_parameters will need changes. Those dealing with numerical operations specifically will require deeper changes. Obviously, ext/standard will need some updating. ext/gmp ought to be rewritten so that it just passes on to the built-in operator functions.

Also, extensions dealing with parts of the Zend API that deal with numbers will need to be modified to deal with changes in signatures and behaviour. (See "Backwards Incompatible Changes")

==== To Opcache ====

GMP can only have one custom allocator, so I weighed the options and made that be emalloc, not malloc. I expect this would pose a problem for opcache, as any bigints would be destroyed upon the end of a request, so opcache would need to store bigints persistently. Hence, some sort of import/export mechanism could be added to zend_bigint. It is obviously possible to use strings, but gmp also has its own format for serialisation which would be more efficient, so that might be a good way.

I have not yet dealt with opcache implementation-wise, and I might need help when the time comes.

==== New Constants ====

None.

==== php.ini Defaults ====

No changes.

===== Open Issues =====

The patch is unfinished. Many tests are still broken, I haven't gotten round to updating the extensions, and it almost certainly does not work with opcache.

===== Unaffected PHP Functionality =====

As previously mentioned, the handling of array keys might need to be looked at. Otherwise, it shouldn't affect the behaviour of other PHP functionality, but obviously the implementations of anything dealing with integers may need to be changed.

===== Future Scope =====

None I can think of particularly.

===== Proposed Voting Choices =====

In some respects this is just an implementation detail, but as this would break backwards-compatibility for some apps and arguably changes the language, I think this requires a 2/3 majority. It would be a straight Yes/No vote.

===== Patches and Tests =====

A work-in-progress, unfinished pull request is here: https://github.com/php/php-src/pull/700

The branch itself is here: https://github.com/TazeTSchnitzel/php-src/tree/phpng-bigint

It is based off the phpng branch. Many tests are still broken, as as mentioned previously, I still need to deal with extensions and opcache. It is very much unfinished, but it does work to a degree.

==== TODO ====

  * Possible issue: Currently, when dividing a bigint by something, we check if it's divisible, then do an integer division if that is the case, or else cast to double and then do the division. However, for very large bigints, the double we get might end up being Infinity, so we should probably calculate the double from doing an integer division and using the remainder if possible.
  * Figure out if we should deal with bigints string indices better. Currently we cast to long, but should we check for it being capped at LONG_MAX/_MIN and, if so, throw the "uninitalized index" error?
  * Fix more tests
  * Run the test suite on a 32-bit machine
  * Write tests for bigints
  * Decide whether to scrap convert_to_bigint considering there is convert_to_bigint_or_long and the former poses an extra burden on implementers of the cast_object class handler etc.
  * Decide whether it should be, and if so implement, throwing a warning when a bigint is capped at LONG_MAX
  * Implement bigint option for zend_parse_parameters (consider implementing IS_BIGINT_OR_LONG option)
  * Fix ext/standard and other important extensions (ext/json?)
  * Rewrite ext/gmp
  * Deal with opcache
  * Rewrite (or get someone else to rewrite) the assembly routines (currently commented out as they overflowed to double, not bigint)
  * That clz/bsr assembly TODO (or just generally use a more efficient check)
  * More stuff

===== Implementation =====

If/when this is implemented, this section would/will contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== References =====

==== Inspiration ====

  * I was inspired in part by Python 2's bigint support with its separate "long" type (different from the machine-dependent "int" type), and how Python 3 unified these into the single "int" type - see http://legacy.python.org/dev/peps/pep-0237/

  * Some other languages also do it: Erlang, Haskell and Smalltalk

==== General ====

  * https://gmplib.org/ - The GNU Multiple Precision Arithmetic Library

===== Rejected Features =====

None... yet!