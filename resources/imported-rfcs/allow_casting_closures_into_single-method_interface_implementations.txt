===== Title: Allow casting closures into single-method interface implementations =====

  * Version: 1.0
  * Date: 2023-04-13
  * Author: Nicolas Grekas <nicolasgrekas@php.net>
  * Status: Draft
  * First Published at: https://wiki.php.net/rfc/allow_casting_closures_into_single-method_interface_implementations
  * Implementation: TBD

==== Introduction ====

This RFC proposes a new method for the ''Closure'' class called ''castAs''. This method would allow developers to create an instance of a class that implements a specified interface and uses the closure as the implementation.

==== Proposal ====

A new method, ''castAs'', would be added to the ''Closure'' class with the following signature:

<code php>
/**
 * @template T
 * @param class-string<T>
 * @return T
 */
public function castAs(string $interface): object;
</code>

When called on a closure, this method would:

  - Verify that the specified interface exists and has exactly one method.
  - Create a new instance of an anonymous class that implements the specified interface.
  - Use the closure as the implementation for the interface's method in the newly created instance.

Example usage:

<code php>
interface MyInterface {
    public function doSomething(int $x, int $y): int;
}

$closure = function (int $x, int $y): int {
    return $x + $y;
};

$instance = $closure->castAs(MyInterface::class);
$result = $instance->doSomething(1, 2);

echo $result; // Output: 3
</code>

==== Backward Incompatible Changes ====

This proposal introduces no backward incompatible changes, as it only adds a new method to the ''Closure'' class.

==== Open Issues ====

- behavior of the reflection API on resulting objects

==== Unaffected PHP Functionality ====

No existing PHP functionality would be affected by this proposal.

==== Future Scope ====

None anticipated yet.

==== Proposed PHP Version ====

This RFC targets PHP version 8.3.

==== RFC Impact ====

This RFC impacts the PHP engine, specifically the ''Closure'' class.

==== Vote ====

The vote will require a 2/3 majority to be accepted. Voting will start on [Vote start date] and end on [Vote end date].

==== Patches and Tests ====

TBD

==== Rejected Features ====

None.
