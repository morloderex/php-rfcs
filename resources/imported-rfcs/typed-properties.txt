====== PHP RFC: Typed Properties ======
  * Version: 0.2.1
  * Date: 2016-03-16
  * Author: Joe Watkins <krakjoe@php.net>, Phil Sturgeon <philstu@php.net>
  * Status: Under Discussion
  * First Published at: http://wiki.php.net/rfc/typed-properties

Following the raging success of PHP 7.0 additions [[https://wiki.php.net/rfc/scalar_type_hints_v5|scalar type hints]] and [[https://wiki.php.net/rfc/return_types|return types]], the next logical step is to provide optional typed properties.

===== Introduction =====

Typed Properties allow for an optional keyword in the definition, after the visibility scope, which contains the type the property should allow.

===== Proposal =====

Properties can have the same types as parameters:

<code php>
class Foo {
  public int $int = 1;
  public float $flt = 2.2;
  public array $arr = [];
  public bool $bool = false;
  public string $string;
  public callable $callable;
  public stdClass $std;
  public OtherThing $other;
  public $mixed;
}
</code>

//Notice there is no support for void here, as that would make no sense for a property.//

This can be rather useful, as a lot of the job of setters is to ensure the values being passed in are the correct type.

There are two possible outcomes to type mismatches, as one check is done at compile time and another done at runtime. 

===== Default Values =====

[[https://3v4l.org/EnGUI/rfc#tabs|If an attempt is made to assign a value of an incorrect type at compile time, a fatal error will be raised:]]

<code php>
<?php
new class {
	public int $bar = "turtle";
};
</code>

<code>
PHP Fatal error:  Default value for properties with integer type can only be integer in turtle.php on line 3
</code>

===== Coercion and Strictness =====

[[https://3v4l.org/O4bdX/rfc#tabs|Typed properties follow the same coercion rules as parameters with type information, and respect strict_types:]]

<code php>
<?php
var_dump(new class() {
	public int $bar;

        public function __construct() {
            $this->bar = "42";
        }
});
</code>

<code>
object(class@anonymous)#1 (1) { 
  ["bar"]=> int(42) 
}
</code>

===== TypeError =====

[[https://3v4l.org/obW7U/rfc#tabs|Due to the usage of TypeError, you can catch runtime errors for mismatched types:]]

<code php>
class Math {
	public int $x;
	public int $y;
	
	public function __construct($x, $y) {
	    $this->x = $x;
	    $this->y = $y;
	}
	
	public function add() {
	    return $this->x + $this->y;
	}
}

try {
    (new Math(3, "nonsense"))->add();
} catch (Error $e) {
    echo "Look, I'm Python!";
}
</code>

<code>
Look, I'm Python!
</code>

===== Use before initialization =====

[[https://3v4l.org/cVkcj/rfc#tabs|The implementation will raise an exception where a typed property is accessed before being initialized:]]

<code php>
<?php
$foo = new class {
    
  public int $bar;  
};

var_dump($foo->bar);
</code>

<code>
Fatal error: Uncaught TypeError: Typed property class@anonymous::$bar must not be accessed before initialization in /in/cVkcj:7 
Stack trace: 
  #0 {main} thrown in /in/cVkcj on line 7
</code>

===== References =====

[[https://3v4l.org/WEZHv/rfc#tabs|The implementation prohibits the use of references to properties with type information:]]

<code php>
<?php
$foo = new class {
  
  public int $bar = 42;
};

$reference = &$foo->bar;
</code>

<code>
Fatal error: Uncaught TypeError: Typed property class@anonymous::$bar must not be referenced in /in/WEZHv:7 
Stack trace: 
  #0 {main} thrown in /in/WEZHv on line 7
</code>

//Other code can raise the same exception, foreach by reference, accept as arg by reference, etc.//

===== Magic (__get) =====

[[https://3v4l.org/Lq5dA/rfc#tabs|The magical __get method is not allowed to violate the declared type:]]

<code php>
<?php
$foo = new class {
    
  public int $bar;
  
  public function __construct() {
      unset($this->bar); # will result in the invocation of magic
  }
  
  public function __get($name) {
      return "oh dear!";
  }
};

var_dump($foo->bar);
</code>

<code>
Fatal error: Uncaught TypeError: Typed property class@anonymous::$bar must be integer, string used in /in/Lq5dA:15 
Stack trace: 
  #0 {main} thrown in /in/Lq5dA on line 15
</code>

===== Similarities to HHVM =====

The type system in HHVM uses matching syntax. 

In fact, an example taken from the [[https://docs.hhvm.com/hack/types/type-system|HHVM Type System]] works perfectly with this implementation:

<code php>
class A {
  protected float $x;
  public string $y;

  public function __construct() {
    $this->x = 4.0;
    $this->y = "Day";
  }
  public function foo(bool $b): float {
    return $b ? 2.3 * $this->x : 1.1 * $this->x;
  }
}

function bar(): string {
  // local variables are inferred, not explicitly typed
  $a = new A();
  if ($a->foo(true) > 8.0) {
    return "Good " . $a->y;
  }
  return "Bad " . $a->y;
}

var_dump(bar()); // string(8) "Good Day"
</code>

Whilst the syntax is almost identical, this works a little differently to Hack.

Hack a offers static analysis tools to detect mismatched types, but when the code is executed it will allow any type to be passed through. This implementation is done at compile time to avoid the need for this, and validates properties being set at runtime too. Static analysis tools and editors/IDEs will no doubt catch up.

===== Other Languages =====

Of course, while "But Xlang does it!" is never a strong reason to do anything, it is sometimes nice to know how our friends are doing it in other languages.

  * [[https://docs.hhvm.com/hack/types/type-system||Hack/HHVM]] - See similarities above.
  * [[https://en.wikipedia.org/wiki/Property_(programming)#C.23|C#]]
  * [[https://en.wikipedia.org/wiki/Property_(programming)#C.2B.2B|C++]]
  * [[https://en.wikipedia.org/wiki/Property_(programming)#D|D]]
  * [[https://en.wikipedia.org/wiki/Property_(programming)#Delphi.2FFree_Pascal|Delphi/Free Pascal]]
  * [[https://en.wikipedia.org/wiki/Property_(programming)#ActionScript_3.0|ActionScript]]
  * [[https://en.wikipedia.org/wiki/Property_(programming)#Visual_Basic|Visual Basic]]

===== Syntax =====

The authors of this RFC considered other syntax possibilities, however they were considered to be inferior for the following reasons.

One approach could be to match how return types are done with a colon after the name of the declaration, which is also how Delphi and ActionScript handle things:

<code php>
public $bar: int;
public $bar: int = 2;
// or 
public $bar = 2: int;
</code>

Maybe, but if a ternary was used it would be really hard to see what was happening:

<code>
public $bar = Stuff::BAZ ? 20 : 30 : int; 
</code>

Another approach would be to copy VisualBasic:

<code php>
public $bar as int;
public $bar = 2 as int;
</code>

That sticks out a bit, we don't do this anywhere else.

The current patch seems the most consistent with popular languages, avoids new reserved words, skips syntax soup and looks great regardless of assignment being used or not.

===== Performance =====

Checking the type of a zval is an extremely cheap operation, there may be some very minor performance impact only when typed properties are used.

===== Backward Incompatible Changes =====
None

===== Proposed PHP Version(s) =====
PHP 7.1

===== RFC Impact =====
==== To SAPIs ====
None

==== To Existing Extensions ====
None

==== To Opcache ====

Opcache has been patched, needs review.

===== Constructors =====

Some have voiced concern that, if an object has typed properties and the constructor does not set them, an exception should be raised because the object is in an invalid state.

However, lazy initialization of properties is a common idiom in PHP, that the authors of the RFC are not willing to restrict to untyped properties.

//No rules have been violated until the engine returns a value//, since any value returned is //always// of the correct type, we do not see the need to place further restrictions upon typed properties.

===== Union Types / Nullable =====

This RFC intentionally avoids the quagmire that is union types or nullable types. For example: if you specify an array, then you have to provide an array, and null will raise an error. 

Future RFCs could take this on, with some `public ?array $foo;` syntax, or with union types providing `public array|null $foo;` syntax. This is just something we don't need to get into at this point. It is consistent with return types, if you specify `array` and return `null`, that too will error.

===== Typed Local Variables =====

This is an entirely different feature, and something not worth conflating into this RFC. The idea might be wanted, but to keep things simple it will not be discussed in this RFC.

===== Typed Constant Properties =====

There is currently no known value in adding a type to a constant. Seeing as constants cannot be modified, the type is just whatever the constant is set to, and seeing as it cannot change there is no chance for a constant to be assigned a invalid value afterwards.

===== Proposed Voting Choices =====

This RFC requires a 2/3 majority.

===== Patches and Tests =====

This branch will be cleaned up with feedback and squashed, and doubtlessly more tests will be provided as people seek clarification on functionality.

https://github.com/php/php-src/compare/master...krakjoe:typed-properties

===== References =====

If you want to play with this functionality, it's up on 3v4l.

https://3v4l.org/j2Hlg/rfc#tabs

 ===== Changelog =====
  
  * v0.2.1: Mention the runtime checks in syntax section too
  * v0.2.0: Revision prompted by feedback and consensus
  * v0.1.2: Definitely not allowing void
  * v0.1.1: Expanded on compile time vs. run time errors
  * v0.1.0: Initial draft
