====== PHP RFC: New operator for context-dependent escaping ======
  * Version: 0.9
  * Date: 2016-07-14
  * Author: Michael Vostrikov <michael.vostrikov@gmail.com>
  * Status: Draft (or Under Discussion or Accepted or Declined)
  * First Published at: http://wiki.php.net/rfc/escaping_operator

===== Introduction =====

This RFC proposes the addition of new operator for context-dependent escaping. This operator is intended mainly for HTML escaping but it allows to add handlers for other contexts. This operator requires new syntax, so it requires the changes in the language parser.

===== Problem description =====

Missing or wrong HTML escaping is the main reason of XSS vulnerabilities on many sites. Template engines solve this problem, but there are many applications where template engines are not used - which are written on custom engines, on CMSs, on frameworks without a template engine by default. These projects continue to develop and require to write code.

In applications without template engines output a value from database is very frequent operation.
Almost all cases of using <php><?= ?></php> operator must be with HTML-escaping, and only sometimes it is needed to output raw HTML.

I suggest new operator, which make escaping operation more easier, safer and useful. Usually it is not very hard to move an application to new version of language, but it is almost impossible to rewrite all PHP-templates to a special template engine.

Of course, we can make a function with short name like <php><?= h($something) ?></php>. But the problem is not that we don't have a function.

The problem is that <php><?= h($something) ?></php> and <php><?= $something ?></php> both work good, and unsafe variant works exactly as safe one until we get unsafe data. There is no such problem with other contexts. If we don't call json_encode() when passing an array or object into javascript, this only will break the script, and this will be noticeable, there won't be a problem with security. Also, because we need to call escaping function everywhere, there is a possibility to forget to do this sometime.

Main argument against such ooperator is that main problem is in specific context. There are various contexts and each one requires special escaping. But I think this is not required to support all of them. Because - who asks about it?) There are no requests about special operator for json_encode(), but there are many requests for htmlspecialchars(). You can not deny the problem with HTML escaping really exists. My first goal is to draw the attention on it. Exact implementation is a secondary thing.


HTML context is very frequent case, and it can be used together with other contexts.

Consider the example:
<PHP>
<a href="/things/<?= $thing['name'] ?>" onclick="alert('<?= $thing['name'] ?>');">
    <?= $thing['name'] ?>
</a>
</PHP>

It may seem that different escaping is required here. But it's not. The call of htmlspecialchars() is required in all 3 cases:
<PHP>
<?php $thing = ['name' => 'Say "Hello")']; ?>

<a
    href="/things/<?= htmlspecialchars(urlencode($thing['name'])) ?>"
    onclick="alert(<?= htmlspecialchars(json_encode($thing['name']), ENT_QUOTES) ?>);"
>
    <?= htmlspecialchars($thing['name']) ?>
</a>
</PHP>

Actually, on web page we have 3 external contexts - HTML, <script> tag, <style> tag. PHP+CSS generally is not used. PHP+JS is not just escaping. It is encoding in special notation, and as I think, it has different semantics - 'keep correct markup' (htmlspecialchars) and 'pass a value' (json_encode).

But anyway we need to be able to set different flags for htmlspecialchars(). So, handling for other contexts also can be added the same way. And I have an idea about how to do it.


===== Proposal =====

Operator has the following form:

<PHP>
<?* $str ?>
<?* $str, 'html' ?>
<?* $str, 'js | html' ?>
</PHP>

Both expressions can be a constant or a variable of any type which can be converted to string. Second expression is optional.

I suggest the symbol <php>'*'</php> because it is not unary operator and it gives an error in previous PHP versions. All symbols in <php><?* ?></php> are typed with Shift, and they require another way to type, unlike <php><?= ?></php>, so there is a less possibility to write <php>'='</php> instead.

Operator is compiled into the following AST:
<PHP>
echo PHPEscaper::escape(first_argument, second_argument);
</PHP>
This is done very similar to backticks operator for shell_exec().

There is a default implementation of the class 'PHPEscaper'. It has 4 static methods:
<PHP>
PHPEscaper::escape($string, $context = 'html');
PHPEscaper::registerHandler($context, $escaper_function);
PHPEscaper::unregisterHandler($context);
PHPEscaper::getHandlers();
</PHP>

Method <php>PHPEscaper::escape($string, $context)</php> splits <php>$context</php> by <php>'|'</php> delimiter, all parts are trimmed, and then calls registered handler for every context in a chain. If there is no handler for certain context, the exception is thrown. Nothing has to be output as is.

'html' is a default value for context, and it has special handling. If there is no handler for 'html' context, the method calls <php>htmlspecialchars($string, ENT_QUOTES | ENT_SUBSTITUTE)</php>. These flags are used in most popular frameworks.

We can use it like this:

<PHP>
<?php
    // anywhere in application
    PHPEscaper::registerHandler('html', function($str) {
        return htmlspecialchars($str, ENT_QUOTES | ENT_HTML5 | ENT_DISALLOWED | ENT_SUBSTITUTE);
    });
    PHPEscaper::registerHandler('js', [MyEscaper, 'escapeJs']);
?>
<?* $str, 'js | html' ?>
</PHP>


And even more.\\ 
In the AST, 'PHPEscaper' is registered as not fully qualified name (ZEND_NAME_NOT_FQ).
This allows us to use namespaces and autoloading, according to naming convention and autoloading mechanism in application:

<PHP>
<?php use MyEscaper as PHPEscaper; ?>
<?* $str, 'js | html' ?>
</PHP>

<php>MyEscaper::escape($str, 'js | html')</php> will be called.


In this way we can have autoloading, multiple contexts, html escaping by default, and full control and customization. Default implementation of PHPEscaper is not required, so it is possible to make it as a separate extension, and applications can provide their own implementation on PHP.

===== Class =====

Class definition is done similar to SPL autoloading mechanism.

<PHP>
class PHPEscaper
{
    public static function escape($string, $context = 'html');
    public static function registerHandler($context, $escaper_function);
    public static function unregisterHandler($context);
    public static function getHandlers();
}
</PHP>


==== escape($string, $context) ====
<php>mixed PHPEscaper::escape(mixed $string, string $context)</php>

Splits <php>$context</php> by <php>'|'</php> delimiter, all parts are trimmed, and then calls registered handler for every context in a chain. If there is no handler for certain context, the exception is thrown. Nothing has to be output as is. Both arguments can be a string or any type which can be converted to string. First argument is passed between the handlers without any type conversion. Conversion to string is made automatically by <php>echo</php> operator. Second argument is optional, <php>'html'</php> is the default value, it is converted to string while parsing method arguments (zend_parse_parameters()).


==== registerHandler($context, $escaper_function) ====
<php>bool PHPEscaper::registerHandler(string $context, callable $escaper_function)</php>

Registers new handler for a given context. If handler for this context is already registered, it returns <php>false</php>, on success registration returns <php>true</php>. All contexts are stored in associative array. There is no stack, unlike SPL autoloading.


==== unregisterHandler($context) ====
<php>bool PHPEscaper::unregisterHandler(string $context)</php>

Unregisters new handler for a given context. If handler for this context is not registered, it returns <php>false</php>, otherwise unsets the key and returns <php>true</php>.


==== getHandlers() ====
<php>array PHPEscaper::getHandlers(string $context, callable $escaper_function)</php>

Returns array of all registered handlers. If no handlers are registered, returns an empty array.


===== Main arguments 'for' and 'against' =====

  * You can write short function in userland

The problem is not that we have no function. The problem is that the same action is always repeated, and if we don't repeat it then it leads to security problems. More than 90% of output data - is data from DB and must be HTML-encoded.

Both variants <php><?= h($something) ?></php> and <php><?= $something ?></php> work good. But the second variant is unsafe. One is a subset of another, we have the same beginning <?= and then can write helper function or not. It is easy to forget to write that main part.

With new operator we can write or <?* ?>, or <?= ?>, they are mutually exclusive, and we need specially write one or another.

Also there is a problem with function autoloading.
\\ 

  * It is no place for such operators in the language

It is no place for a such operators in C++, or C#, or Java. But in the most popular language for web-programming it is very place for such operator.
Even in the PHP source code the content outside the PHP tags is designated as T_INLINE_HTML, not just T_EXTERNAL_CONTENT.
[[https://github.com/php/php-src/blob/8f39293b867ced224ae72d512f3e543b6e039bc8/Zend/zend_language_scanner.l#L1838|zend_language_scanner.l]]

Maybe it would be better if operator <php><?= ?></php> performs HTML escaping, and raw data is output via <php><?php echo ?></php>
Maybe if there were not operators for switching context between PHP and HTML, escaping operator would not be needed.
But that is exactly what made PHP what it is.
It is necessary or remove these operators completely or make them more safer and useful.

And we already have such operator in the language - `backticks` for shell_exec().
\\ 

  * You want to add new operator just for your needs

It's not only my needs for one project. I meet this problem in many projects without template engine.\\ 
There are many discussions related to HTML escaping. Some feature requests with the same question were created in 2002.

http://marc.info/?t=145851323800001 \\ 
http://marc.info/?t=135082660600002 \\ 
http://marc.info/?t=144225546000001 \\ 
http://marc.info/?t=101129596100006 \\ 
http://wiki.php.net/rfc/escaper \\ 
http://wiki.php.net/rfc/taint \\ 
http://bugs.php.net/bug.php?id=62574 \\ 
http://bugs.php.net/bug.php?id=20310 \\ 
http://bugs.php.net/bug.php?id=16007 \\ 
http://bugs.php.net/bug.php?id=3284 \\ 
\\ 

Also I have created the [[https://habrahabr.ru/post/304162/|article]] on russian technical site http://habrahabr.ru with the poll about this feature.

Results at the moment of writing this RFC:
<code>
How often do you work with the projects with template rendering on PHP
where template engines are not used?
35% (182)  Always
23% (116)  Quite often
19% (96)   Quite rare
23% (120)  Almost never

Voted 514 people. Abstained 121 people.


How do you think, such an operator would be useful?
56% (286)  Yes
44% (222)  No

Voted 508 people. Abstained 136 people.


I don't use PHP template rendering ...
50% (153)  and I think that such an operator is not needed
50% (151)  but I think that such an operator will come in handy

Voted 304 people. Abstained 272 people.
</code>

The results of the poll, show that it is not only my need. 60% are "for" this operator, projects of others 40% will not be affected.\\ 
Maybe it would be good to create some official poll about this feature and to know community opinion about it?
\\ 


  * Default flags

In popular frameworks there are the following flags:

[[https://github.com/symfony/symfony/blob/f29d46f29b91ea5c30699cf6bdb8e65545d1dd26/src/Symfony/Component/Templating/PhpEngine.php#L421|Symfony]] — ENT_QUOTES | ENT_SUBSTITUTE \\ 
[[https://github.com/yiisoft/yii2/blob/c370c17e93f364a843ed7c31e1e1f7fc8caef0a3/framework/helpers/BaseHtml.php#L104|Yii]] — ENT_QUOTES | ENT_SUBSTITUTE \\ 
[[https://github.com/zendframework/zend-escaper/blob/1a855b5f7074607b1260d85c5526a59b1ab36593/src/Escaper.php#L117|Zend]] — ENT_QUOTES | ENT_SUBSTITUTE \\ 
[[https://github.com/twigphp/Twig/blob/f0a4fa678465491947554f6687c5fca5e482f8ec/lib/Twig/Extension/Core.php#L1039|Twig]] — ENT_QUOTES | ENT_SUBSTITUTE \\ 


===== Conclusion =====
This small change can really improve a security in many applications.


===== Backward Incompatible Changes =====
What breaks, and what is the justification for it?

===== Proposed PHP Version(s) =====
List the proposed PHP versions that the feature will be included in.  Use relative versions such as "next PHP 7.x" or "next PHP 7.x.y".

===== RFC Impact =====
==== To SAPIs ====
Describe the impact to CLI, Development web server, embedded PHP etc.

==== To Existing Extensions ====
Will existing extensions be affected?

==== To Opcache ====
It is necessary to develop RFC's with opcache in mind, since opcache is a core extension distributed with PHP.

Please explain how you have verified your RFC's compatibility with opcache.

==== New Constants ====
Describe any new constants so they can be accurately and comprehensively explained in the PHP documentation.

==== php.ini Defaults ====
If there are any php.ini settings then list:
  * hardcoded default values
  * php.ini-development values
  * php.ini-production values

===== Open Issues =====
Make sure there are no open issues when the vote starts!

===== Unaffected PHP Functionality =====
List existing areas/features of PHP that will not be changed by the RFC.

This helps avoid any ambiguity, shows that you have thought deeply about the RFC's impact, and helps reduces mail list noise.

===== Future Scope =====
This sections details areas where the feature might be improved in future, but that are not currently proposed in this RFC.

===== Proposed Voting Choices =====
Include these so readers know where you are heading and can discuss the proposed voting options.

State whether this project requires a 2/3 or 50%+1 majority (see [[voting]])

===== Patches and Tests =====
Links to any external patches and tests go here.

If there is no patch, make it clear who will create a patch, or whether a volunteer to help with implementation is needed.

Make it clear if the patch is intended to be the final patch, or is just a prototype.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== References =====
Discussion: http://marc.info/?t=146619199100001

Diff with changes:
  * Parser: [[https://github.com/michael-vostrikov/php-src/commit/571cd7c88488a08c82b10f0c3af559881f1a2951#diff-7eff82c2c5b45db512a9dc49fb990bb8R844|zend_language_parser.y]]
  * AST handler: [[https://github.com/michael-vostrikov/php-src/commit/571cd7c88488a08c82b10f0c3af559881f1a2951#diff-3a8139128d4026ce0cb0c86beba4e6b9R4122|zend_compile.c]]
  * PHPEscaper::escape(): [[https://github.com/michael-vostrikov/php-src/commit/b2103dc517c309f7515909ba45a291ceada4eb01#diff-a1a59a5452bf9df0fc5b58bc9fdb6a11R413|cde.c]]

===== Rejected Features =====
Keep this updated with features that were discussed on the mail lists.