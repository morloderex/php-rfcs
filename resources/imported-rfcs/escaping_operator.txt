====== PHP RFC: New operator for context-dependent escaping ======
  * Version: 0.9
  * Date: 2016-07-14
  * Author: Michael Vostrikov <michael.vostrikov@gmail.com>
  * Status: Draft (or Under Discussion or Accepted or Declined)
  * First Published at: http://wiki.php.net/rfc/escaping_operator

===== Introduction =====
This RFC proposes the addition of new operator for context-dependent escaping. This operator is intended mainly for HTML escaping but it allows to add handlers for other contexts. This operator requires new syntax, so it requires the changes in the language parser. Missing or wrong HTML escaping is the main reason of XSS vulnerabilities on many sites.

===== Problem description =====


===== Proposal =====

Operator has the following form:

<PHP>
<?* $str ?>
<?* $str, 'html' ?>
<?* $str, 'js | html' ?>
</PHP>

Both expressions can be any type which can be converted to string. Second expression is optional.

I suggest the symbol '*' because it is not unary operator and it gives an error in previous PHP versions. All symbols in <?* ?> are typed with Shift, and they require another way to type, unlike <?= ?>, so it is less possibility to write '=' instead.

Operator is compiled into the following AST:
<PHP>
echo PHPEscaper::escape(first_argument, second_argument);
</PHP>

There is a default implementation of the class 'PHPEscaper'. It has 4 static methods:
<PHP>
PHPEscaper::escape($string, $context = 'html');
PHPEscaper::registerHandler($context, $escaper_function);
PHPEscaper::unregisterHandler($context);
PHPEscaper::getHandlers();
</PHP>

Method <php>PHPEscaper::escape($string, $context)</php> splits <php>$context</php> by '|' delimiter, all parts are trimmed, and then calls registered handler for every context in a chain. 'html' is a default value for context, and it has special handling. If there is no handler for 'html' context, it calls <php>htmlspecialchars($string, ENT_QUOTES | ENT_SUBSTITUTE);</php>


We can use it like this:

<PHP>
<?php
    // anywhere in application
    PHPEscaper::registerHandler('html', [MyEscaper, 'escapeHtml']);
    PHPEscaper::registerHandler('js', function($str) { return json_encode($str); });
?>
<?* $str, 'js | html' ?>
</PHP>


And even more.\\ 
In the AST, 'PHPEscaper' is registered as not fully qualified name (ZEND_NAME_NOT_FQ).
This allows us to use namespaces and autoloading:

<PHP>
<?php use MyEscaper as PHPEscaper; ?>
<?* $str, 'js | html' ?>
</PHP>

<php>MyEscaper::escape($str, 'js | html')</php> will be called.


In this way we can have autoloading, multiple contexts, html escaping by default, and full control and customization. Default implementation of PHPEscaper is not required, applications can provide their own implementation on PHP.


===== Conclusion =====
My first goal is to draw the attention on the problem with a security and HTML escaping. Exact implementation is secondary thing.\\ 
This small change can really improve a security in many applications.


===== Backward Incompatible Changes =====
What breaks, and what is the justification for it?

===== Proposed PHP Version(s) =====
List the proposed PHP versions that the feature will be included in.  Use relative versions such as "next PHP 7.x" or "next PHP 7.x.y".

===== RFC Impact =====
==== To SAPIs ====
Describe the impact to CLI, Development web server, embedded PHP etc.

==== To Existing Extensions ====
Will existing extensions be affected?

==== To Opcache ====
It is necessary to develop RFC's with opcache in mind, since opcache is a core extension distributed with PHP.

Please explain how you have verified your RFC's compatibility with opcache.

==== New Constants ====
Describe any new constants so they can be accurately and comprehensively explained in the PHP documentation.

==== php.ini Defaults ====
If there are any php.ini settings then list:
  * hardcoded default values
  * php.ini-development values
  * php.ini-production values

===== Open Issues =====
Make sure there are no open issues when the vote starts!

===== Unaffected PHP Functionality =====
List existing areas/features of PHP that will not be changed by the RFC.

This helps avoid any ambiguity, shows that you have thought deeply about the RFC's impact, and helps reduces mail list noise.

===== Future Scope =====
This sections details areas where the feature might be improved in future, but that are not currently proposed in this RFC.

===== Proposed Voting Choices =====
Include these so readers know where you are heading and can discuss the proposed voting options.

State whether this project requires a 2/3 or 50%+1 majority (see [[voting]])

===== Patches and Tests =====
Links to any external patches and tests go here.

If there is no patch, make it clear who will create a patch, or whether a volunteer to help with implementation is needed.

Make it clear if the patch is intended to be the final patch, or is just a prototype.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== References =====
Discussion: http://marc.info/?t=146619199100001

Diff with changes:
  * Parser: [[https://github.com/michael-vostrikov/php-src/commit/571cd7c88488a08c82b10f0c3af559881f1a2951#diff-7eff82c2c5b45db512a9dc49fb990bb8R844|zend_language_parser.y]]
  * AST handler: [[https://github.com/michael-vostrikov/php-src/commit/571cd7c88488a08c82b10f0c3af559881f1a2951#diff-3a8139128d4026ce0cb0c86beba4e6b9R4122|zend_compile.c]]
  * PHPEscaper::escape(): [[https://github.com/michael-vostrikov/php-src/commit/b2103dc517c309f7515909ba45a291ceada4eb01#diff-a1a59a5452bf9df0fc5b58bc9fdb6a11R413|cde.c]]

===== Rejected Features =====
Keep this updated with features that were discussed on the mail lists.