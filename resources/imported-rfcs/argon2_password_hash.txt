====== PHP RFC: Argon2 Password Hash ======
  * Version: 0.3
  * Date: 2016-06-10
  * Author: Charles R. Portwood II <charlesportwoodii@erianna.com>
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/argon2_password_hash

===== Introduction =====
Argon2, the recommended password hashing algorithm by the Password Hashing Competition, is a modern algorithm for securely hashing passwords. Argon2 addresses several key downsides of existing algorithms in that it is designed for the highest memory filling rate, and effective use multiple computing units while still providing defense against tradeoff attacks. Unlike Bcrypt, which just takes a single cost factor, Argon2 is parameterized by three distinct factors:

  - A memory cost that defines memory usage of the algorithm
  - A time cost that defines the execution time of the algorithm and the number of iterations
  - And a parallelism factor, which defines the number of parallel threads

Argon2 comes in two distinct flavors, Argon2i and Argon2d. Argon2i which is optimized for password hashing and password based key derivation. Argon2 is faster and uses data-dependent memory access, making it highly resistant against GPU cracking attacks and suitable for applications with no threats from side-channel timing attacks (such as cryptocurrencies).

===== Proposal =====
The existing password_* functions provided a forward compatible, simplified interface for hashing passwords. This RFC proposes the implementation for the Argon2 library (v1.3) within the password_* functions for use as a secure alternative to Bcrypt.

==== Proposed PHP Version(s) ====
Add Argon2 (v1.3) support in the next PHP 7.x (7.2) and make Argon2(i) the default hashing algorithm in 7.4.

==== New Constants ====
This change introduces 2 new hashing algorithm constants
<code php>
PASSWORD_ARGON2I
PASSWORD_ARGON2D
</code>

Similar to how PASSWORD_DEFAULT is an alias to PASSWORD_BCRYPT, a separate alias, PASSWORD_ARGON2 is introduced as an alias to PASSWORD_ARGON2I to simplify user land selection of the Argon2 hashing algorithm.
<code php>
PASSWORD_ARGON2
</code>

Additionally, 3 new default constants are introduced which define the default cost factors used by the algorithm.

<code php>
PASSWORD_ARGON2_DEFAULT_MEMORY_COST
PASSWORD_ARGON2_DEFAULT_TIME_COST
PASSWORD_ARGON2_DEFAULT_THREADS
</code>

==== Cost Factors ====
When using Argon2, a memory cost, time cost, and parallelism degree are required. Based upon a thorough examination of the specification, and review of existing Argon2 extensions for other languages, the following default cost factors are proposed.

<code>
m_cost = 64 Mib
t_cost = 3
threads = 1
</code>

==== Changes to password_hash() ====
The password_hash() function is altered to accept both PASSWORD_ARGON2I and PASSWORD_ARGON2D as the algorithm, and accept the memory cost, time cost, and parallelism degree as options. When using Argon2. The following examples illustrate the new functionality.

<code php>
// Argon2i with default cost factors
password_hash('password', PASSWORD_ARGON2);

// Argon2i by name with custom cost factors
password_hash('password', PASSWORD_ARGON2I, ['m_cost' => 1<<17, 't_cost' => 4, 'threads' => 2]);

// Argon2d by name with custom cost factors
password_hash('password', PASSWORD_ARGON2I, ['m_cost' => 1<<4, 't_cost' => 2, 'threads' => 1]);
</code>

The new options for the algorithm are listed as follows. Each option is optional, and will use the listed defaults if not set.

<code php>
$options = [
    'm_cost' => PASSWORD_ARGON2_DEFAULT_MEMORY_COST,
    't_cost' => PASSWORD_ARGON2_DEFAULT_TIME_COST,
    'threads' => PASSWORD_ARGON2_DEFAULT_THREADS
];
</code>

While deprecated within password_hash(), a 16 byte salt can also be provided. If not provided a 16 byte salt will be generated. 

Errors:
  - E_WARNING: Memory cost is outside of allowed memory range
  - E_WARNING: Time cost is outside of allowed time range
  - E_WARNING: Invalid number of threads

==== Changes to password_verify() ====
The password_verify() function is altered return true or false if an Argon2 hash is specified. There are no API level changes to this function.

==== Changes to password_get_info() ====
The password_get_info() function is altered to accept Argon2 hashes, and to return information about a given Argon2 hash.

<code php>
var_dump(password_get_info('$argon2i$v=19$m=65536,t=3,p=1$SWhIcG5MT21Pc01PbWdVZw$WagZELICsz7jlqOR2YzoEVTWb2oOX1tYdnhZYXxptbU'));

array(3) {
  ["algo"]=>
  int(3)
  ["algoName"]=>
  string(7) "argon2i"
  ["options"]=>
  array(3) {
    ["m_cost"]=>
    int(65536)
    ["t_cost"]=>
    int(3)
    ["threads"]=>
    int(1)
  }
}
</code>

==== Changes to password_needs_rehash() ====
The password_get_info() function is altered to accept Argon2 hashes. If any of the cost factors are changed for an Argon2 hash, this function will return true.

<code php>
$hash = password_hash('password', PASSWORD_ARGON2);
password_needs_rehash($hash, PASSWORD_ARGON2); // false
password_needs_rehash($hash, PASSWORD_ARGON2, ['m_cost' => 1<<17]); // true
</code>

=== Configure Flag ===
Argon2 support is provided by passing --with-argon2[=DIR] to the configure script. A directory to the Argon2 build directory may be provided. If not provided, the library will search the OS for libargon2. If --with-argon2 is provided, configuration will fail if Argon2 cannot be found.

===== Backward Incompatible Changes =====
None for inclusion in 7.2. Once PASSWORD_ARGON2 is made PASSWORD_DEFAULT, the cost factor for bcrypt hashes (if provided) will be ignored. Individuals using PASSWORD_DEFAULT with a custom Bcrypt cost factor will be able to upgrade to Argon2 hashed without incident.

===== Open Issues =====


===== Proposed Voting Choices =====
Vote YES to include Argon2 as an alternative to Bcrypt within the password_* functions in 7.2, and to make PASSWORD_ARGON2 the default password hashing algorithm in 7.4. A 50%+1 majority should be sufficient.

===== Patches and Tests =====

A working patch is available at: https://github.com/php/php-src/pull/1997

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== References =====

  - https://password-hashing.net/
  - https://password-hashing.net/argon2-specs.pdf
  - https://github.com/P-H-C/phc-winner-argon2
  - https://paragonie.com/blog/2016/02/how-safely-store-password-in-2016
  - https://github.com/technion/ruby-argon2
  - https://github.com/tvdburgt/go-argon2
  - https://github.com/charlesportwoodii/php-argon2-ext

===== Rejected Features =====

===== Changelog =====

  - 2016-06-10: 0.1 Initial RFC draft
  - 2016-06-10: 0.2 Adding pthread and linking issue
  - 2016-06-11: 0.3 --with-argon2 flag added
