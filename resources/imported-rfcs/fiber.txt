====== PHP RFC: Fiber ======
  * Version: 0.1
  * Date: 2017-09-13
  * Author: Haitao Lv<i@lvht.net>, Dmitry Stogov<dmitry@zend.com>, Martin Schröder<m.schroeder2007@googlemail.com>
  * Status: Under Discussion
  * First Published at: http://wiki.php.net/rfc/fiber


===== Introduction =====
Fibers are primitives for implementing light weight cooperative concurrency in PHP. Basically they are a means of creating Closure that can be paused and resumed. The scheduling of fiber must be done by the programmer and not the VM.

As opposed to Generator (a stackless light weight concurrency implementation), each fiber comes with a stack. This enables the fiber to be paused from deeply nested function calls within the fiber block.

When a fiber is created it will not run automatically. Rather it must be explicitly asked to run using the Fiber::resume method. The code running inside the fiber can give up control by calling Fiber::yield in which case it yields control back to caller (the caller of the Fiber::resume).

===== Proposal =====
==== Why not make it as a Extension? ====
Fiber is a major language feature, that allows significant benefits for asynchronous frameworks. Providing it as an optional extension, just doesn't make sense.

==== Implementation ====

=== Proposed API ===
<code php>
final class Fiber {
  public const STATUS_SUSPENDED = 1;
  public const STATUS_RUNNING   = 2;
  public const STATUS_FINISHED  = 3;
  public const STATUS_DEAD      = 4;

  /**
   * @param callable $callable any php callable to be paused
   * @param int $stack_size fiber stack init size
   */
  public function __construct(callable $callable = null, int stack_size = null) {}

  /**
   * pause the current fiber and ~return~ the $arg1
   * as the Fiber::resume's return value.
   */
  public static function yield($arg1) {}
  
  /**
   * Start or resume a fiber.
   * 
   * If the fiber is not started, call resume will init
   * the $callable with all args.
   *
   * If the fiber is paused, call resume will send the first arg
   * as the last Fiber::yield's return value.
   */
  public function resume($arg1...) {}
  
  /**
   * Throw an exception into the fiber.
   * 
   * You code can use try/catch to process error in the
   * top level function call. Some framework make heavy
   * usage of this feature.
   */
  public function throw(Throwable $e) {}
}
</code>

=== Usage Demo ===
<code php>
function sub1()
{
	return Fiber::yield(1);
}
$fiber = new Fiber(function ($a, $b) {
	$c = Fiber::yield($a + $b);

	$d = sub1();
	return $d.$c;
});

echo $fiber->resume(1, 2);     // echo 3
echo $fiber->resume("world");  // echo 1
echo $fiber->resume("hello "); // echo "hello world"
</code>

=== Implementation Detail ===
In our simple implementation, we only backup/restore the **zend stack**. We **cannot** pause a Fiber during internal function call like `array_map`.

Backup/restore both the zend stack and the the c statck is impossible. However, it is platform dependent and more  complicated.

Martin Schröder is working on this at https://github.com/fiberphp/fiber-ext/pull/30.

^Property^Full stack Fiber^Zend stack Fiber^
|Code Base|c & asm|c|
|Minimum Memory Usage|VM stack only (4 KB)|VM & C stack (4 KB + 4 KB)|
|Supported Architecturs|any platform|x86 at this time|
|Yield in Internal Function|unsupported|supported|

===== Backward Incompatible Changes =====

"Fiber" are now globally defined classes, which might collide with user defined classes of the same name in the global namespace. However, the risk of the introduction of them is considered to be very low, since the global namespace should not be used by PHP users.

===== Proposed PHP Version(s) =====
7.3

===== RFC Impact =====
==== To SAPIs ====
None

==== To Existing Extensions ====
None

==== To Opcache ====
None

==== New Constants ====
None

==== php.ini Defaults ====
- fiber.stack_size default stack size for A fiber

===== Open Issues =====
<blockquote>Why not introduce helper like **Fiber::alive(),Fiber::running()**?</blockquote>

And as a language feature, Fiber should only offer the essential API. User can implement these methods in user land code easily.

<blockquote>Why not introduce a dedicate method other than **Fiber::resume()** for Fiber initialization?</blockquote>

Both Ruby's Fiber and Lua's coroutine using the same **resume()** API to **init** and **resume** their coroutine.

<blockquote>Why not introduce keyword like async/await?</blockquote>

Introducing new keywords will cause BC impact. Both Ruby's Fiber and Lua's coroutine does not have such keyword as well.

===== Unaffected PHP Functionality =====
None

===== Future Scope =====
This sections details areas where the feature might be improved in future, but that are not currently proposed in this RFC.

===== Proposed Voting Choices =====
2/3+1 voting majority

===== Patches and Tests =====
  * https://github.com/php/php-src/pull/3203
  * <del>[[https://github.com/php/php-src/pull/2723]]</del>
  * <del>[[https://github.com/php/php-src/pull/2733]]</del>
  * <del>[[https://github.com/php/php-src/pull/2886]]</del>
  * <del>[[https://github.com/php/php-src/pull/2902]]</del>

===== Implementation =====
After the project is implemented, this section should contain
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
  - a link to the language specification section (if any)

===== References =====
  * [[http://www.inf.puc-rio.br/~roberto/docs/MCC15-04.pdf|Revisiting Coroutines]]
  * [[https://ruby-doc.org/core-2.4.1/Fiber.html|Ruby Fiber]]
  * [[https://www.lua.org/pil/9.1.html|Lua Coroutine]]

===== Rejected Features =====