
====== PHP RFC: Make session_regenerate_id() more secure ======
  * Version: 0.91
  * Date Created: 2013-10-30
  * Date Updatead: 2014-03-19
  * Author: Yasuo Ohgaki <yohgaki@php.net>
  * Status: Under Discussion
  * First Published at: http://wiki.php.net/rfc/session_regenerate_id

===== Introduction =====

Keeping HTTP session as secure as possible is what the session manager's task. **Session manager can improve HTTP session security without user code modification while keeping compatibility with existing applications.**

session_regenerate_id() is used to generate new session ID. It's better to delete old session data to reduce risk of session hijack. However, session_regenerate_id() leave old session data by default currently. Old session data is active and usable until GC. 

Old session is left active for reliable session ID regeneration. There are many reasons why old session is left. Browsers connect to web server with multiple connection. Mobile network may lost radio, may have hand over, etc. Large network providers have multiple gateways to off load traffic and packets may arrive out of order. For reliable session ID regeneration, only short periods (few seconds for wired connections, few minutes for mobile connection) is enough. 


Leaving old session opens window to attacker widely:
  - Old session lives long term and never expires if there is access to it. i.e. Attacker may abuse stolen session forever.
  - There is no mechanism to detect possibles attack even if session manager may detect attacks.

Counter measure for session hijack: Requirement - Session ID regeneration must be reliable.
  - Make sure old session is deleted certain period.
  - Raise error/exception for invalid access. (Raise error for should be deleted session access)

Problem of immediate old session deletion:
  - Make session ID regeneration unreliable.
  - Remove alarm for possible attacks.

**"Make sure old session is deleted certain period"** and **"Raise error/exception for invalid access"** provides much better security than current.


===== Risk of stolen session =====

Stealing session ID is easy regardless of HTTPS. Attacker can set up fake router by ARP spoofing. Most networks do not have ARP spoofing prevention, even detection. For HTTP, attacker can view session ID simply. For HTTPS, attacker can set up transparent HTTPS stripping proxy and steal session ID. Most users do not care much if they are connecting via HTTPS or not.

Above attack can be done by existing tools. i.e. Script kiddies' task.


===== Proposal =====

==== Add __SESSION_REGENERATE_ID_EXPIRE__ time stamp ====

**"Make sure old session is deleted certain period"** can be achieved by time stamp in session data. When session_regenerate_id() called, session manager sets

  $_SESSION['__SESSION_REGENERATE_ID_EXPIRE__'] = time() + ini_get('session.regenerate_id_expire');

When session manager initializes session, check above value. If expired session is accessed, session manager raises "SessionExpiredAccessException".



===== Backward Incompatible Changes =====

  * If user script has __SESSION_REGENERATE_ID_EXPIRE__ key in $_SESSION, it may break application.
  * Raised exception may break application.


===== Proposed PHP Version(s) =====

PHP 5.X+


===== SAPIs Impacted =====

  * None

===== Impact to Existing Extensions =====

  * Session

===== New Constants =====

  * None

===== php.ini Defaults =====

If there are any php.ini settings then list:
  * hardcoded default values
  * php.ini-development values
  * php.ini-production values

  * "session.regenerate_id_expire = 60" for all. (60 seconds)


===== Open Issues =====

Make sure there are no open issues when the vote starts!

===== Unaffected PHP Functionality =====

Other than session management, there is no affected functionality.

===== Future Scope =====

Session expire and GC can be improved by time stamp also.


===== Proposed Voting Choices =====

  * Add __SESSION_REGENERATE_ID_EXPIRE__ time stamp Yes/No


===== Patches and Tests =====

TBD

===== References =====

  * http://us3.php.net/session_regenerate_id

===== ChangeLog =====

  * 2014/03/18 - Change RFC to propose time stamping.
  * 2013/10/30 - Added details and message option.
  * 2013/10/29 - Created RFC