====== PHP RFC: User-defined object comparison ======
  * Version: 0.1
  * Date: 2018-06-26
  * Author: Rudi Theunissen <rtheunissen@php.net>
  * Based on previous RFC by: Adam Harvey <aharvey@php.net>
  * Proposed PHP version: PHP 7.3
  * Implementation: 
  * Status: Draft

===== Background =====
The discussion around user-defined comparison dates back to 2010 when the 
[[https://wiki.php.net/rfc/comparable|Comparable RFC]] was introduced for the 
first time and later updated in 2015. This RFC is an attempt to build on the
motivation behind that RFC with a new proposal.

===== Introduction =====
This RFC introduces the ability for a user to override the default comparison 
behaviour of objects in PHP, and builds heavily on the work that Adam Harvey did
on the [[https://wiki.php.net/rfc/comparable|Comparable RFC]].

: Why is this a good thing?
: Why should PHP have it?
: What are some clear use cases that could benefit from this? Use decimal?
: Talk about why the default behaviour isn't ideal

==== To Existing Extensions ====

==== Other Languages ====

For reference, most major languages have support for this:
  * Java has a [[https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html|Comparable]] interface.
  * Python 2 has the //[[https://docs.python.org/2/reference/datamodel.html#object.__cmp__|%%__cmp__%%]]// magic method.
  * Python 3 removed //%%__cmp__%%// in favour of [[https://docs.python.org/2/reference/datamodel.html#object.__lt__|rich comparison]] magic methods.
  * Ruby has a [[https://ruby-doc.org/core-2.4.0/Comparable.html|Comparable]] module.
  * .NET has an [[https://msdn.microsoft.com/en-us/library/system.icomparable(v=vs.110).aspx|IComparable]] interface.

===== Proposal =====
This RFC introduces a **//%%__compareTo%%//** and an **//%%__equals%%//** magic 
method which can be used to change the default behaviour of objects when 
compared to other values. There's also a new object handler called "equals" that
is the internal equivalent of //%%__equals%%//.

When an object is compared in a context that considers natural ordering, such as
<php>sort</php>, the //%%__compareTo%%// method is called to determine its 
relative ordering compared to the value it received. It should return the usual
< 0 if smaller, 0 if equal ordering, and > 0 if greater. Objects that don't 
implement //%%__compareTo%%// will continue to use the default behaviour.

When an object is compared in a context that considers equality, such as 
<php>in_array</php>, the //%%__equals%%// method is called to determine if 
the object is equal to the value it received. It should return **TRUE**
or **FALSE**. Objects that don't implement //%%__equals%%// will 
continue to use the default behaviour.

Objects that only implement //%%__equals%%// will maintain the default
behaviour when compared for ordering. If only //%%__equals%%// is implemented
and returns **TRUE**, it will automatically translate to an ordering of 0.

Objects that want to explicitly disallow ordering can throw an exception or raise
a warning in //%%__compareTo%%//.

Objects that only implement //%%__compareTo%%// will be considered equal to
any value for which it returns 0. 

We hereby support three use cases:
  - I want to define equality and I don't intend to compare this object (//%%__equals%%//). 
  - I want to define ordering and I'm okay that equal ordering implies equal value (//%%__compareTo%%//). 
  - I want to define ordering but equal ordering does not mean equal value for this object (//%%__compareTo%%// and //%%__equals%%//).

===== Effects on Existing Functions =====

Any functions that use the internal ''compare_function'' or ''is_equal_function'' will be affected, which includes
array functions like <php>sort</php>, <php>array_search</php> and <php>in_array</php>.

===== Changes to Operators =====

These methods also overload operators. Here is a table to demonstrate this:

^ Operator      ^ Methods             ^  Fallback             ^ Notes     ^
| ''%%<%%''     | //%%__compareTo%%// |                       |           |
| ''%%>%%''     | //%%__compareTo%%// |                       |           |
| ''%%<=%%''    | //%%__compareTo%%// | //%%__equals%%//      | Will be **TRUE** if //%%__compareTo%%// is not implemented and //%%__equals%%// returns **TRUE** |
| ''%%>=%%''    | //%%__compareTo%%// | //%%__equals%%//      | Will be **TRUE** if //%%__compareTo%%// is not implemented and //%%__equals%%// returns **TRUE** |
| ''%%==%%''    | //%%__equals%%//    | //%%__compareTo%%//   | Will be **TRUE** if //%%__equals%%// is not implemented and //%%__compareTo%%// returns 0 |
| ''%%!=%%''    | //%%__equals%%//    | //%%__compareTo%%//   | Will be **FALSE** if //%%__equals%%// is not implemented and //%%__compareTo%%// returns 0 |
| ''%%===%%''   |                     |                       |           |
| ''%%!==%%''   |                     |                       |           |

===== Backward Incompatible Changes =====
None. 

Objects that do not implement //%%__compareTo%%// or //%%__equals%%// will
continue to use the existing rules and are therefore not affected by this patch.

==== To Existing Extensions ====
Extensions that use the ''compare'' object handler may be affected by this patch 
because **NULL** is now passed to the handler, where it used to always 
return 1 if the object is on the LHS or -1 if on the RHS.

The result of the ''compare'' handler will only be used if the handler returned 
SUCCESS. Returning FAILURE will cause the comparison to fall through to the 
''compare_objects'' handler. Currently, the result of the ''compare'' handler is 
always used, regardless of the return value.

===== Proposed PHP Version(s) =====
This would go in the next PHP 7.x, most likely 7.3.

===== Open Issues =====
  - Should we internally enforce that ordering is ''0'' when equality is **TRUE**, or leave it up to the user to follow this convention?
  - Should we warn the user when an object that doesn't implement //%%__compareTo%%// is compared for ordering?
  - Should //%%__compareTo%%// returning ''0'' indicate equality when  //%%__equals%%// is not defined?

===== Implementation =====
See https://github.com/php/php-src/compare/master...rtheunissen:rt-compare-to-magic-method?diff=unified
