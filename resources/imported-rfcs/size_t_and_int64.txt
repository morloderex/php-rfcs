
====== PHP RFC: 64 bit platform improvements for string length and integer in zval ======
  * Version: 1.1
  * Date: 2013-12-05
  * Authors: Anatol Belski <ab@php.net>, Matt Ficken <mattficken@php.net>, Stephen A. Zarkos <szarkos@php.net>
  * Status: Under Discussion


===== Introduction =====

Current PHP zval datatype implementation uses "long" datatype to handle signed integer and "int" datatype to handle string length. The most 64 bit capable platforms PHP is used on are **LLP64** (Windows) and **LP64** (Linux/most Unix-like). The data model used for the relevant datatypes on those platforms looks as follows

^  ^ string size ^ signed integer ^
^ Platform ^ int ^ long ^
| LLP64 | 32 bit | 32 bit |
| LP64 | 32 bit | 64 bit |
\\ 
Regarding PHP that means today, even on 64 bit platforms
  * strings >= 2^31 cannot be handled
  * on Windows 64 bit integers aren't available
\\ 
To fix this, the following datatypes are suggested

^ Platform ^ string size ^ signed integer ^
| LLP64 |  size_t | <nowiki>__int64</nowiki>  |
| LP64 | size_t | long long (int64_t)|

\\ 
The suggested datatypes are guaranteed to be 64 bit which makes PHP work consistent on any 64 bit platforms. Accompanying fixes include file offsets and other descriptor APIs ensuring full 64 bit support.

===== Proposal =====

The 'long' datatype in zval's is replaced with an appropriate platform dependent 64 bit integer
  - 'long long' on Linux/Unix or '__int64' on Windows
  - the long datatype persists on 32 bit platforms only
  - 'int' datatype is replaced with size_t for any platform

No additional configure options are needed, the platform and compiler will be automatically recognized and an appropriate datatype will be activated.
==== Relevant headers ====

  * Zend/zend_types.h
  * Zend/zend_int.h
  * Zend/zend_stream.h
  * main/php_stream.h

==== Datatypes ====

^ Old datatype ^ New datatype ^ Comment ^ 
| int, uint, zend_uint, size_t, long | zend_size_t | Aliased as php_size_t in php.h |
| long | zend_int_t | Aliased with php_int_t in php.h |
| ulong, unsigned long | zend_uint_t | Aliased with php_uint_t in php.h |
| off_t | zend_off_t | |
| struct stat, struct _stat, struct _stat64 | zend_stat_t | Corresponding stat function aliases have to be used |  

**BE AWARE OF WHAT size_t IS, READ SOME DOC BEFORE STARTING TO AVOID TRIVIAL MISTAKES**


==== Function aliases ====
^ function(s) ^ Alias ^ Comment ^ 
| stat, _stat64 | zend_stat | for use with zend_stat_t |
| fstat, _fstat64 | zend_fstat | for use with zend_stat_t |
| lseek, _lseeki64 | zend_lseek | for use with zend_off_t |
| ftell, _ftelli64 | zend_ftell | for use with zend_off_t |
| fseek, _fseeki64 | zend_fseek | for use with zend_off_t |
| snprintf with "%ld" or "%lld", _ltoa_s, _i64toa_s | ZEND_ITOA | for use with zend_int_t|
| atol, atoll, _atoi64 | ZEND_ATOI | for use with zend_int_t |
| strtol, strtoll, _strtoi64 | ZEND_STRTOL| for use with zend_int_t |
| strtoul, strtoull, _strtoui64 | ZEND_STRTOUL|for use with zend_uint_t |

==== Macroses ====

^ Old ^ New ^ Comment ^
| Z_STRLEN | Z_STRSIZE | as well the whole Z_STRLEN_* family |
| - | ZEND_INT_MAX | Aliased with PHP_INT_MAX in php.h, replaces LONG_MAX where appropriate |
| - | ZEND_INT_MIN | Aliased with PHP_INT_IN in php.h, replaces LONG_MIN where appropriate |
| - | ZEND_UINT_MAX | ULONG_MAX |
| - | SIZEOF_ZEND_INT | Replaces SIZEOF_ZEND_LONG where appropriate | 
| - | ZEND_SIZE_MAX | |
| IS_LONG | IS_INT | |
| RETURN_LONG | RETURN_INT | |
| RETVAL_LONG | RETVAL_INT | |
| Z_LVAL | Z_IVAL | as well the whole Z_LVAL_* family |
| LITERAL_LONG | LITERAL_INT | |
| REGISTER_LONG_CONSTANT | REGISTER_INT_CONSTANT | |
| REGISTER_MAIN_LONG_CONSTANT | REGISTER_MAIN_INT_CONSTANT | |
| ZEND_SIGNED_MULTIPLY_LONG | ZEND_SIGNED_MULTIPLY_INT | |
| ... | ... | |

Generally speaking, every occurence mentioning "long" in macros or function names should be replaced with a corresponding neutral keyword, suggested "int", in further like "lval" with "ival", etc.
==== Accepting values from userland with zend_parse_parameters() ====

^ Old ^ New ^ Comment ^
| "s" | "S" | accept string argument, the length has to be declared as php_size_t (or zend_size_t) |
| "p" | "P" | accept path argument, the length has to be declared as php_size_t (or zend_size_t) |
| "l" | "i" | to accept integer argument, the internal var has to be declared as php_int_t (inside PHP) or zend_int_t (inside Zend) |
| "L" | "I" | to accept integer argument with range check, the internal var has to be declared as php_int_t (inside PHP) or zend_int_t (inside Zend)|


==== printf formats ====

New printf modifier 'p' was implemented to platform independently output php_int_t datatype. That modifier can be used with 'd', 'u', 'x' and 'o' printf format specs with spprintf, snprintf and the wrapping printf implementations.

===== Backward Incompatible Changes =====

  * 'l', 'L', 's', 'p' parameter formats aren't available anymore
  * Z_STRLEN* macros aren't available anymore
  * *LONG* macros aren't available anymore

===== Proposed PHP Version =====

PHP 5.6


===== Impacts =====

  * collisions with dependency libraries using 32 bit integer datatypes (range checks needed)
  * existing extensions have to adapt zend_parsing_parameters() format
  * existing extensions have to use new APIs and macros for string length and integer
  * in the user space some function names need to be adapted on the new semantics, for instance long2ip() should be int2ip()


===== Open Issues =====

Some dead SAPIs are present in the core. A decision is to be met, whether their porting is feasible.

===== Unaffected PHP Functionality =====

It has to do with squeezing anything possible from the 64 bit platforms, for maximal PHP benefit. No real features are going to be changed, removed or added.

===== Migration path for PECL extensions =====

Tutorial, tools and compatibility header to ease the migration of the PECL extensions are available [[http://git.php.net/?p=php-src.git;a=tree;f=compat;hb=refs/heads/str_size_and_int64 | here]] . The goal is to make the same source in the new semantic compatible with older PHP versions.


===== Future Scope =====

  * with further tweaks - enabling 64 bit integer even on 32 bit platform
  * in far perspective - easier to implement 128 bit support

===== Proposed Voting Choices =====

==== Vote 1 ====

  * merge str_size_and_int64 branch into 5.6: yes/no

==== Vote 2 ====

  * keep zpp specs "lLsp" as aliases to "iISP": yes/no

==== Vote 3 ====

* remove old SAPIs: yes/no

\\
  SAPIs to be removed:
  * aolserver
  * apache
  * apache2filter
  * apache_hooks
  * caudium
  * continuity
  * isapi
  * litespeed
  * milter
  * nsapi
  * phttpd
  * pi3web
  * roxen
  * thttpd
  * tux
  * webjames

\\
  SAPIs to be supported:
  * apache2handler
  * cli
  * cgi
  * embed
  * fpm
  * phpdbg
\\

===== Patches and Tests =====

[[http://git.php.net/?p=php-src.git;a=shortlog;h=refs/heads/str_size_and_int64 | Feature branch]]\\ 
[[http://windows.php.net/downloads/snaps/str_size_and_int64/ | Windows builds]]\\
[[http://131.107.220.66/PFTT-Results/STR_SIZE_AND_INT64/ | Test reports]]\\

===== References =====
[[rfc/string-size_t/progress| Patch progress page]]
\\ 
\\
\\
[[http://git.php.net/?p=php-src.git;a=tree;f=compat;hb=refs/heads/str_size_and_int64 | PECL porting docs'n'tools]]
\\
\\
[[http://grokbase.com/t/php/php-internals/135z59f0kz/5-next-integer-and-string-type-modifications | Initial discussion brought up by Anthony Ferrara]]
\\ 
[[http://grokbase.com/p/php/php-internals/137354x7hf/string-size-refactor-progress| Discussion after implementation start]]
\\ 

===== Implementation =====

After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== Rejected Features =====

-