====== PHP RFC: Make constructors and destructors return void ======
  * Date: 2020-06-17
  * Author: Benas Seliuginas, <benas.molis.iml@gmail.com>
  * Target version: PHP 8.0
  * Status: Draft

Large credit for this RFC goes to Michael Voříšek who initially reported the bug and created a draft-- patch.

===== Introduction =====
At the moment, constructors and destructors can return non-void values. However, these magic methods are supposed to be ''void'' (according to the documentation) and should have no return value. This RFC proposes to make constructors and destructors always implicitly (or explicitly for that matter) return void.
===== Proposal =====
==== Status Quo ====
Currently, ''void'' rules are not enforced for constructors and destructors. Thus, it is allowed to return non-void values from those magic methods:

<code php>
<?php
class Test {
	public function __construct() {
		return 0;
	}

	public function __destruct() {
		return 1;
	}
}

$test = new Test();

// this prints 0
echo $test->__construct();
// this prints 1
echo $test->__destruct();
</code>

But even the [[https://www.php.net/manual/en/language.oop5.decon.php|PHP manual]] states, that the constructors return void (i. e. nothing). Therefore, the current behavior is inconsistent and incorrect: ''void'' rules should always be enforced on constructors/destructors (no matter if the ''void'' return type declaration is implicit or explicit).

==== Proposal ====
This RFC proposes to always validate and implicitly enforce ''void'' rules on constructors and destructors. Additionally, declaring an optional explicit ''void'' return type on constructors/destructors is allowed.

A fatal error is generated if:
  * Constructors/destructors have a non-void return value.
  * Explicitly declared return type is not ''void''.

<code php>
<?php
class Test {
	public function __construct() {
		// this is illegal
		// Fatal error: A void function must not return a value
		return 0;
	}

	// this is illegal
	// Fatal error: Destructor Test::__destruct() must return void
	public function __destruct(): mixed {}
}

class Test2 {
	// this is legal
	public function __construct(): void {}

	// this is also legal
	public function __destruct() {}
}
</code>

===== Backward Incompatible Changes =====
Accepting this RFC results in a small backwards compatibility break since it will no longer be legal to return non-void (''mixed'' and any of its subtypes) values from constructors and destructors. Furthermore, returning a non-void value from constructors/destructors is already considered an anti-pattern and bad code. So it's safe to say, that the BC break is justifiable.

===== Unaffected Functionality =====
==== Explicit return type declaration is optional ====
Since explicit ''void'' return type is optional, it's still legal to not specify a type at all:

<code php>
<?php
class Test {
	// this is legal
	public function __construct() {}

	// this is also legal
	public function __destruct(): void {}
}
</code>

==== Constructors are exempt from LSP checks ====
Since constructors/destructors are exempt from LSP checks, it is allowed to widen the type from a child class. For example, if the parent class has explicitly declared the constructor/destructor as ''void'', it is still legal to widen the type to no return type. In other words, covariance (for return types) does not apply to constructors/destructors.

<code php>
<?php
class Test {
	public function __construct(): void {}
	public function __destruct(): void {}
}

class Test2 extends Test {
	/* this is legal */
	public function __construct() {}

	/* this is also legal */
	public function __destruct() {}
}
</code>

===== Vote =====
2/3 majority Yes/No.

===== Implementation =====
[[https://github.com/php/php-src/pull/5727|GitHub Pull Request]]