====== PHP RFC: Coercive Types for Function Arguments ======
  * Version: 0.1
  * Date: 2015-02-20
  * Author: Zeev Suraski <zeev@php.net>
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/coercive_sth

===== Background & Summary =====
Scalar Type Hints have been a top requested feature for PHP for a very, very long time.  There have been numerous attempts at introducing them to the language, all of which failed to make it into the language thus far.
While there seems to be consensus regarding the viability and usefulness of adding Scalar Type Hints (STH), there’s been a long standing debate regarding what is the correct way to implement them.  The two key schools of thoughts around STH that emerged over the years are:

  - **Strict STH**.  In essence, this approach conducts a very simple zval.type check on the value being passed from the caller to the callee;  If there’s a match – the argument is accepted, otherwise rejected.  Coercion is (almost) never performed, so, for instance, a callee that expects an integer argument and is passed a “32” (string) – will reject it.
  - **Dynamic (weak) STH**.  Unlike strict STH, dynamic STH automatically converts values which are not already of the type that is expected by the callee into that type, according to the same ruleset presently used by internal functions.  That means that a callee expecting an integer that will be passed “32” (string), will successfully receive the argument, and it will be automatically converted to 32 (int).

It’s important to note that in terms of the code *inside* the callee, there’s absolutely no difference between the two schools of thought.  In both cases, the callee can rely with absolute confidence that if it typed hinted a certain argument as an int – this argument will always be an int.  The difference is localized to the behavior surrounding the invocation of the callee by the caller – with Strict STH will reject a lot more potential inputs as invalid, compared to Dynamic STH.

Proponents of Strict STH cite numerous advantages, primarily around code safety/security.  In their view, the conversion rules proposed by Dynamic STH can easily allow ‘garbage’ input to be silently converted into arguments that the callee will accept – but that may, in many cases, hide difficult-to-find bugs or otherwise result in unexpected behavior.

Proponents of Dynamic STH bring up consistency with the rest of the language, including some fundamental type-juggling aspects that have been key tenets of PHP since its inception.  Strict STH, in their view, is inconsistent with these tenets.

This RFC proposes a composite solution, which attempts to address the main goals of both camps, dubbed Coercive STH.  Coercive STH are less restrictive than simple zval.type checks, but a lot more restrictive than the conversion rules presently employed by internal functions.  They attempt to strike a balance between rejecting erroneous input, and allowing valid-but-wrongly-typed input.
Further, the RFC suggests a gradual solution for employing this new, more restrictive ruleset into internal functions.

Finally, the RFC outlines a potential future evolution of employing the new ruleset into additional parts of PHP, most notably implicit type conversions (outside the scope of this specific RFC).


===== Proposal =====

==== User-land Additions ====

This RFC proposes to introduce four new type hints into PHP – int, float, string and bool.
Arguments hinted without of these STHs will accept values that are either already of that expected type (‘native’), or that can be coerced into the requested type without any data loss on one hand, and without creating ‘garbage’ data that wasn’t there on the other.

The exact behavior of each type hint is detailed in the following tables.  DL stands for 'Data Loss'.

=== int ===
^ Passed Value Type  ^ int    ^ float                                                            ^ string                              ^ bool    ^ object  ^
^ Behavior           ^ ''Accept'' ^ Accept only if no DL\\ ''7.0 accepted\\ 7.1 rejected'' ^ Accept numeric strings, only if no DL\\ ''"32", "42.0" accepted\\ "Apple", "100 dogs", "  123", "123  " rejected'' ^ Accept† ^ Reject  ^

===== Backward Incompatible Changes =====
What breaks, and what is the justification for it?

===== Proposed PHP Version(s) =====
List the proposed PHP versions that the feature will be included in.  Use relative versions such as "next PHP 5.x" or "next PHP 5.x.y".

===== RFC Impact =====
==== To SAPIs ====
Describe the impact to CLI, Development web server, embedded PHP etc.

==== To Existing Extensions ====
Will existing extensions be affected?

==== To Opcache ====
It is necessary to develop RFC's with opcache in mind, since opcache is a core extension distributed with PHP.

Please explain how you have verified your RFC's compatibility with opcache.

==== New Constants ====
Describe any new constants so they can be accurately and comprehensively explained in the PHP documentation.

==== php.ini Defaults ====
If there are any php.ini settings then list:
  * hardcoded default values
  * php.ini-development values
  * php.ini-production values

===== Open Issues =====
Make sure there are no open issues when the vote starts!

===== Unaffected PHP Functionality =====
List existing areas/features of PHP that will not be changed by the RFC.

This helps avoid any ambiguity, shows that you have thought deeply about the RFC's impact, and helps reduces mail list noise.

===== Future Scope =====
This sections details areas where the feature might be improved in future, but that are not currently proposed in this RFC.

===== Proposed Voting Choices =====
Include these so readers know where you are heading and can discuss the proposed voting options.

State whether this project requires a 2/3 or 50%+1 majority (see [[voting]])

===== Patches and Tests =====
Links to any external patches and tests go here.

If there is no patch, make it clear who will create a patch, or whether a volunteer to help with implementation is needed.

Make it clear if the patch is intended to be the final patch, or is just a prototype.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== References =====
Links to external references, discussions or RFCs

===== Rejected Features =====
Keep this updated with features that were discussed on the mail lists.