====== Removing php tags ======
  * Version: 1.0
  * Date: 2012-04-01
  * Author: Moriyoshi Koizumi <moriyoshi@php.net>
  * Status: Under Discussion
  * First Published at: http://wiki.php.net/rfc/nophptags
  * Other formats ..


This RFC proposes removal of PHP tags (''<?php'' and so forth) from the PHP scripting language.

===== Background =====

=== Security ===

Current PHP is weak to script injections compare to other languages such as Ruby/Perl/Phthon/Lua/etc. There are countermeasures allow_url_include=off and Null byte check in fopen wrapper, but injecting PHP scripts in a file is easy. Simple vulnerability in include()/require() could be a fatal security issue.

To prevent PHP script inclusion in a file can be done. However, it's not a simple task.

  * <?, <% should be checked even if it's a binary. It's possible to have "<?" or "<%" in a binary. One should check if it contains a valid(executable) PHP script in it or not.
  * <script language="php"> should be checked. "<script language=" is common in HTML files. Checking "<script language=" is not a simple task.
  * Almost all applications are not checking these and it would be impossible to make developers do a proper validation.

Disabling embed(template) mode is simple solution for this issue.

=== PHP script injection examples ===

== Session Data ==
Many applications store user inputs in $_SESSION array and use files are session storage. If attacker can inject PHP script in $_SESSION array, all they have to do is find a vulnerable include()/require(). Session save_path could be guessed easily. 

== Novice Mistakes ==
Common novice PHP programmer mistake is writing code like

  include $_GET['module'];

Because PHP is embedded language and the nature of embedded language cannot be changed, this kind of code raises fatal security issues. Attacker may use any uploaded files without proper validations may be used to execute PHP code. Attacker may also be read any files with permissions.

=== Recent PHP usage ===

Since PHP was given birth by Rasmus Lerdorf as a tiny form interpreter for personal use, it has much evolved into a general-purpose scripting language, and is considered to be part of core technologies that are the basis of busiest websites to date.

The design of the language is comparable with its notable successors such as ASP (Active Server Pages) and JSP (Java Server Pages), in which one can easily build a dynamic web page by interleaving presentation elements with application logics, and it was well received by many developers who had to tackle with CGI at the time it got an attention.

However, as web application development got its way in the industry, it was discovered that MVC (model-view-controller) architecture, which effectively promotes the separation of concerns between the domain logic (models) and the presentation logic (views), could be the key concept of many kinds of web applications as well as GUI applications to build maintainable pieces of software.

At the same time, various web security issues became subject to public concern and the 'interleaving' method was pointed out to be too error-prone to create a secure website as it completely dismisses the context of the presentation elements where the application logic is inserted and so forces one to choose the correct escaping method suitable for putting the result of the logic in that place.

And today, many PHP programmers usually choose to use a web application framework that is based on MVC architecture and also takes advantage of modern template engines that feature handy syntax specific to describe common presentation logics. Not a few programmers may once have been bothered to put a PHP tag at the top of every PHP script that only contains classes and functions. In short, PHP tags are just ancient.
===== Proposal =====

  * Allow users to start PHP statements from the top of the script without putting open tags such as ''<?php''.
  * Complete removal of esoretic ''<script lanuage="PHP">'' open tag.
  * Allow open tags (''<?php'', ''<?'', ''<%'') only at the top of the script for compatibility, and issue a parse error when used in other places.
  * Ignore close tags (''?>'' and ''%>'') completely.
  * Add flag that controls embed(template) feature of PHP.

=== Flag to control embed (template) mode ===

php.ini

  template_mode = on   ; On by default. INI_ALL
                       ; On: "<?php" or like is requried.
                       ; Off: No open tag is required.

cli

  php -t foo.php  # template mode. "<?php" is required. Default.
  php -T foo.php  # non-template mode. "<?php" is NOT required.

===== Issues yet to be resolved =====

  * php.ini flag and CLI options

===== Patch =====

https://gist.github.com/2266652

===== Changelog =====

   - 2012-04-01 Moriyoshi Koizumi: Initial.
   - 2012-04-09 Yasuo Ohgaki: Added security issue discussion for embedded mode. Proposal for php.ini and CLI options.
