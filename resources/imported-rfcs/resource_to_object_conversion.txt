====== Resource to object conversion ======
  * Date: 2023-10-31
  * Author: Máté Kocsis kocsismate@php.net
  * Status: Under Discussion

===== Introduction =====

Resources are a legacy data structure which were superseded by objects a long time ago. They have quite a few disadvantages like the inability of using ''resource'' type declarations, lack of garbage collection (they have to be explicitly freed), bad feedback about memory leaks, etc.

As far as I know, Nikita was the first one who realized these shortcomings and started converting resources to objects, [[rfc:operator_overloading_gmp#proposal_bgmp_improvements|''GMP'' back in 2013]], [[https://externals.io/message/104361#104361|''XMLParser'' in 2019]]. However, this ambitious project only got traction during the release cycle of PHP 8 where dozens of extension were refactored so that they started to use objects instead of resources ([[https://github.com/php/php-tasks/issues/6|tracker ticket]]). At the time of writing, only around 7 built-in extensions remain which still expose resources...

===== Discussion =====

As eliminating resources altogether should be a strategic goal for PHP, this time, the main question is not whether the remaining resources should be converted to objects or not, but the timeline when we can do so, in order to have acceptable level of backward compatibility breaks.

Usually, the biggest complaint against these kind of changes is due to return value changes of ''is_resource()'' invocations. An example of such situation is the following:

<code php>
$pipes = [];
$process = proc_open("sleep 1", [], $pipes);
if (is_resource($process)) {
    // do some stuff
}
proc_close($proc);
</code>

The above code won't work anymore after the conversion, since the ''is_resource($process)'' condition will yield a different result than before (''false'' compared to ''true'').

The easiest solution for fixing the problem is to change the condition to the following:

<code php>
$pipes = [];
$process = proc_open("sleep 1", [], $pipes);

if ($process !== false) {
    // do some stuff
}
proc_close($proc);
</code>

By using ''$process !== false'' instead of ''is_resource($process)'' the ''if'' will yield the correct result, and the code is going to be compatible with any PHP version. One could also use ''is_resource($process) || $process instanceof ProcessHandle'', but this is a more verbose way to achieve the same result.

On the other hand, some people suggest that the ''is_resource'' function should also return ''true'' for classes which originally used to be resources (read [[https://externals.io/message/116127|a long thread about this topic here]]). Doing so would apparently minimize the BC break by making the above mentioned code change unnecessary.

However, the current RFC disagrees with this approach because it has some downsides which would do more harm than benefit.

Most often, these issues are easy to spot and fix, but admittedly need some careful manual work. Therefore, the goal of this RFC is to set the rules according to which the project can continue. So far, the vast majority of the individual conversions were "unofficial", meaning they didn't have to go through the formal RFC process, there was no deprecation period (it is not really feasible anyway), and were performed even in minor versions. I do believe this kind of flexibility has been beneficial for the overall project, however, we occasionally get complaints due to the above mentioned BC breaks. That's what this RFC should prevent for future conversions.

The resources yet to be migrated can be categorized the following way based on their backward compatibility impact:

==== Process resource ====

The ''Process'' resource is returned by ''proc_open()''. According to my earlier [[rfc:process_object_name|straw poll]], its new class name is going to be ''ProcessHandle'' once the migration takes place.

**Impact analysis**: [[https://gist.github.com/kocsismate/70314bf3e0ab457ef325de35ed70a98d|31 out of the 2000]] most popular PHP packages rely on checking the result of ''proc_open()'' with ''is_resource()''.

**Implementation**: https://github.com/php/php-src/pull/12098/

==== Primary stream-related resources ====

There are a number of stream-related resources which are to be converted: first of all, the most important ones are ''stream'' and ''persistent stream'' themselves. Historically, these have always been the most widely used resources in the whole PHP ecosystem, since the file handling API is organized around them.

**Impact analysis**: The list of functions whose return type is affected by the conversion of the primary stream resources:

  * ''bzopen()'': [[https://gist.github.com/kocsismate/|1 out of the 2000]] most popular PHP packages rely on checking its result with ''is_resource()''
  * ''PDO::pgsqlLOBOpen()'': None of the 2000 most popular PHP packages
  * ''pg_socket()'': None of the 2000 most popular PHP packages
  * ''socket_export_stream()'': None of the 2000 most popular PHP packages
  * ''SQLite::openBlob()'': None of the 2000 most popular PHP packages
  * ''opendir()''
  * ''popen()'': None of the 2000 most popular PHP packages
  * ''fopen()''
  * ''tmpfile()''
  * ''fsockopen()'': [[https://gist.github.com/kocsismate/bfb6206e57764e1e75ec1b2aa0195bb6|14 out of the 2000]] most popular PHP packages
  * ''pfsockopen()'': [[https://gist.github.com/kocsismate/e0fb282546672939941670712f22e4bf|3 out of the 2000]] most popular PHP packages
  * ''stream_socket_client()'': [[https://gist.github.com/kocsismate/25d7f3c75a82e00a80079ae8b02c8e13|13 out of the 2000]] most popular PHP packages
  * ''stream_socket_server()'': [[https://gist.github.com/kocsismate/7affecdd332bf73fc0325a414ca7e70c|3 out of the 2000]] most popular PHP packages
  * ''stream_socket_accept()'': [[https://gist.github.com/kocsismate/3fb96110f3d8353de84f6b2715fa7106|1 out of the 2000]] most popular PHP packages
  * ''ZipArchive::getStreamIndex()'': None of the 2000 most popular PHP packages
  * ''ZipArchive::getStreamName()'': None of the 2000 most popular PHP packages
  * ''ZipArchive::getStream()'': None of the 2000 most popular PHP packages
  * ''gzopen()'': [[https://gist.github.com/kocsismate/4c897590532e7d6e9b6106d58630dc66|1 out of the 2000]] most popular PHP packages

==== Auxilliary stream-related resources ====

Furthermore, streams have some auxiliary resources:

  * **stream context**: it stores parameters/options for the different stream wrappers
  * **stream filter**: it helps perform operations on streams
  * **userfilter.bucket, userfilter.bucket brigade**: [[https://stackoverflow.com/questions/27103269/what-is-a-bucket-brigade|a very detailed explanation, written by Bob]]

Auxilliary resources are "isolated" from the primary ones, and used less often than them, that's why it may be possible to migrate the two resource categories separately from each other.

**Impact analysis**:
  * **stream context:** since ''stream_context_create()'' throws in case of failure, the issue with the is_resource() check doesn't apply to stream context resources
  * **stream filter**: [[https://gist.github.com/kocsismate/2972a071425ca57031ac3db1bf623865|3 out of the 2000]] most popular PHP packages rely on checking the result of ''stream_filter_append()'' and ''stream_filter_prepend()'' with ''is_resource()''
  * **userfilter.bucket, userfilter.bucket brigade**: None of the 2000 most popular PHP packages rely on checking the result of ''stream_bucket_new()'' with ''is_resource()''. Since ''userfilter.bucket brigade'' is created by PHP itself when the ''php_user_filter::filter()'' method is invoked, therefore neither it is affected by the BC break.

==== Other resources ====

The rest of the built-in extensions which currently expose resources are the following:

  * **COM**
    * com_dotnet_istream_wrapper
    * com_dotnet_dispatch_wrapper
  * **DBA**
    * dba: connection resource returned by ''dba_open()''
    * dba persistent: persistent connection resource  returned by ''dba_popen()''
  * **ODBC** (implementation: https://github.com/php/php-src/pull/12040/)
    * odbc link: connection resource returned by ''odbc_connect()''
    * odbc link persistent: persistent connection returned by ''odbc_pconnect()''
    * odbc result: result resources returned by various ''odbc_*'' functions
  * **SOAP**
    * SOAP SDL: ''SoapClient::$sdl''
    * SOAP table: ''SoapClient::$typemap''
    * SOAP URL: ''SoapClient::$httpurl''

**Impact analysis**: None of the 2000 most popular PHP packages rely on the above mentioned resources.

===== Vote =====

The RFC consists of 4 votes, one for each resource category. Since the majority of the resource migrations in question don't yet have an implementation, most voting choices are intentionally left vague so that they only define whether a resource group can only be migrated in a major version or the conversion can happen in minor versions as well.

==== Process resource ====

<doodle title="When should the migration of the Process resource happen?" auth="kocsismate" voteType="single" closed="true" closeon="2023-12-06T18:00:00Z">
   * in the next major version (e.g. PHP 9.0)
   * in the next minor or major version (e.g. PHP 8.4)
</doodle>

==== Primary stream resources (stream, persistent stream) ====

<doodle title="When should the migration of the primary stream resources happen?" auth="kocsismate" voteType="single" closed="true" closeon="2023-12-06T18:00:00Z">
   * only in a major version (e.g. PHP 9.0)
   * in any minor or major version (e.g. PHP 8.4)
   * primary stream resources should not be migrated to objects
</doodle>

==== Auxiliary stream resources (contexts, filters, brigades, buckets) ====

<doodle title="When should the migration of the auxiliary stream resources happen?" auth="kocsismate" voteType="single" closed="true" closeon="2023-12-06T18:00:00Z">
   * only in a major version (e.g. PHP 9.0)
   * in any minor or major version (e.g. PHP 8.4)
</doodle>

==== Other resources ====

<doodle title="When should the migration of the resources of other extensions happen?" auth="kocsismate" voteType="single" closed="true" closeon="2023-12-06T18:00:00Z">
   * only in a major version (e.g. PHP 9.0)
   * in any minor or major version (e.g. PHP 8.4)
</doodle>
