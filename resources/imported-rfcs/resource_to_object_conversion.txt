====== Resource to object conversion ======
  * Date: 2023-10-31
  * Author: Máté Kocsis kocsismate@php.net
  * Status: Draft

===== Introduction =====

Resources are a legacy data structure which were deprecated by objects a long time ago. They have quite a few disadvantages like the inability of using ''resource'' type declarations, lack of garbage collection (they have to be explicitly freed), bad feedback about memory leaks, etc.

As far as I know, Nikita was the first one who realized these shortcomings and started converting resources to objects, [[rfc:operator_overloading_gmp#proposal_bgmp_improvements|''GMP'' back in 2013]], [[https://externals.io/message/104361#104361|''XMLParser'' in 2019]]. However, this ambitious project only got traction during the release cycle of PHP 8 where dozens of extension were refactored so that they started to use objects instead of resources ([[https://github.com/php/php-tasks/issues/6|tracker ticket]]). At the time of writing, only around 7 built-in extensions remain which still expose resources...

===== Discussion =====

As eliminating resources altogether should be a strategic goal for PHP, this time, the question is not whether the remaining resources should be converted to objects or not, but the timeline when we can do so, in order to have acceptable level of backward compatibility breaks.

Usually, the biggest complaint against these kind of changes is due to return value changes of ''is_resource()'' invocations (read [[https://externals.io/message/116127#116176|a long thread about this topic here]]). An example of such situation with the suggested fix:

<code php>
$pipes = [];
$process = proc_open("sleep 1", [], $pipes);
if (is_resource($process)) {                  // the condition yields false after conversion happens
    ...
}

if ($process !== false) {                     // this is the backward compliant way to check for success
    ...
}
</code>

Most often, these issues are easy to spot and fix, but definitely needs some careful manual work. Therefore, the goal of this RFC is to set the rules according to which the project can continue. So far, the vast majority of the individual conversions were "unofficial", meaning they didn't have to go through the formal RFC process, there was no deprecation period (it is not really feasible anyway), and were performed even in minor versions. I do believe this kind of flexibility has been beneficial for the overall project, however, we occasionally get complaints due to the above mentioned BC breaks. That's what this RFC should prevent for future conversions.

==== Process resource ====

The ''Process'' resource is returned by ''proc_open()''.

==== Stream-related resources ====

There are a number of stream-related resources which are to be converted.

==== Other resources ====

The rest of the built-in extensions which currently expose resources are the following:

  * ODBC
  * SOAP
  * COM
  * DBA
  * OCI8

===== Vote =====

==== Process resource ====

<doodle title="When should the migration of the Process resources happen?" auth="kocsismate" voteType="single" closed="true" closeon="2023-12-06T18:00:00Z">
   * only in a major version (e.g. PHP 9.0)
   * in any minor version (e.g. PHP 8.4)
</doodle>

==== Stream-related resources ====

<doodle title="When should the migration of the stream-related resources happen?" auth="kocsismate" voteType="single" closed="true" closeon="2023-12-06T18:00:00Z">
   * only in a major version (e.g. PHP 9.0)
   * in any minor version (e.g. PHP 8.4)
</doodle>

==== Other resources ====

<doodle title="When should the migration of the resources of other extensions happen?" auth="kocsismate" voteType="single" closed="true" closeon="2023-12-06T18:00:00Z">
   * only in a major version (e.g. PHP 9.0)
   * in any minor version (e.g. PHP 8.4)
</doodle>
