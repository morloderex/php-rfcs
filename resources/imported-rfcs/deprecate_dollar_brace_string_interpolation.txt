====== PHP RFC: Deprecate ${} string interpolation ======

  * Date: 2021-03-13
  * Author: Ilija Tovilo, tovilo.ilija@gmail.com
  * Status: Draft
  * Target Version: PHP 8.2
  * Implementation: TBD

===== Proposal =====

PHP allows embedding variables in strings with double-quotes (''%%"%%'') and heredoc in various ways.

  1. Directly embedding variables ("$foo")
  2. Braces outside the variable ("{$foo}")
  3. Braces after the dollar sign ("${foo}")
  4. Dynamic variable lookup ("${expr}", equivalent to `(string) ${expr}`)

Options 1 and 2 have their pros and cons, but 3 and 4 are easily confused due to overlapping syntax, are strictly less capable than the first two options, and are rarely used in practice.  Option 3 is specifically less capable than 2, and option 4 has different semantics (dynamic variable lookup) that is rarely useful in string interpolation.

This RFC proposes to deprecate options 3 and 4 in PHP 8.2 and remove them in PHP 9.0.  That leaves only two string interpolation options: direct (simple variable only) and powerful (the one that does the most now).

===== Status quo =====

All four options support different subsets of syntax.  That is needlessly confusing, both for the user and for the parser.

==== Simple variable interpolation ====

Options 1, 2, and 3 support embedding basic variables.  Option 4 has no equivalent here.

<code php>
$foo = 'foo';

var_dump("$foo");
var_dump("{$foo}");
var_dump("${foo}");
</code>

==== Array-offset interpolation ====

Options 1, 2, and 3 allow accessing an array offset. Unfortunately, the syntax is not consistent.

<code php>
$foo = ['bar' => 'bar'];
var_dump("$foo[bar]");

var_dump("{$foo['bar']}");
var_dump("${foo['bar']}");
</code>

==== Object property interpolation ====

Only syntax 1 and 2 allow accessing properties.

<code php>
$foo = (object) ['bar' => 'bar'];

var_dump("$foo->bar");
var_dump("{$foo->bar}");
</code>

==== Metehod call interpolation ====

Only syntax 2 allows calling methods.

<code php>
class Foo {
    public function bar() {
        return 'bar';
    }
}

$foo = new Foo();
var_dump("{$foo->bar()}");
</code>

==== Compound interpolation ====

Only syntax 2 allows chaining all of the above.

<code php>
class Bar {
    public function baz() {
        return 'baz';
    }
}

$foo = ['bar' => new Bar()];
var_dump("{$foo['bar']->baz()}");
</code>

==== Option 4 ====

PHP has a feature called [[https://www.php.net/manual/en/language.variables.variable.php|Variable variables]]. It allows you to get a variable by name. The name can be a string stored in another variable.

<code php>
$foo = 'Hello world!';
$bar = 'foo';
var_dump(${$bar});
</code>

The same works within strings. This is the option 4 described above.

<code php>
$foo = 'world!';
$bar = 'foo';
var_dump("Hello ${$bar}");
</code>

As you might notice, this syntax clashes with option 3. If the term between the two braces is not compatible with option 3 PHP will interpret it as option 4 which has completely different semantics.

<code php>
const foo = 'bar';
$foo = 'foo';
$bar = 'bar';

var_dump("${foo}");
//> foo

var_dump("${(foo)}");
//> bar
</code>

The braces switch from option 3 to 4 because braces are not allowed in option 3. This means ''foo'' is no longer interpreted as a variable but as a constant, and option 4 will then try to find a local variable by the name of that constant. This is incredibly unintuitive.

==== Comparison to other languages ====

A number of other languages use ''%%${foo}%%'' style string interpolation, most notably bash and Javascript (in template literals).  However, its behavior is different from that in PHP.  In PHP, that syntax means variable-variables.  In Javascript, it supports arbitrary expressions 2).  In its current form, options 3 and 4 are of limited use, and confusing for users from other nearby languages as they behaves quite differently.

===== Conclusion =====

Option 1 offers a simple "base case" for the most common situation and is widely used.

Option 2 offers the most robust syntax currently supported, and is widely used.

Option 3 offers a subset of the functionality of option 2, and is not widely used.

Option 4 offers functionality that is rarely if ever useful, and easily confused with option 3.

For all of the reasons above this RFC proposes to deprecate option 3 and 4 in PHP 8.1 and remove them in PHP 9.

====== Future scope ======

Options 1 and 2 are not perfect either. They only allow simple expressions on variables. A different RFC might propose to allow embedding arbitrary expressions into strings.

<code php>
var_dump($"#{func()}")
</code>

If we decide to do that it would make sense to remove the less useful options first to not further add to the confusion, that's what this RFC is trying to achieve.

===== Vote =====

Voting starts 2022-xx-x and ends 2022-xx-xx. 

As this is a language change, a 2/3 majority is required.

<doodle title="Deprecate ${} string interpolation in PHP 8.2 and remove them in PHP 9.0?" auth="ilutov" voteType="single" closed="true">
   * Yes
   * No
</doodle>
