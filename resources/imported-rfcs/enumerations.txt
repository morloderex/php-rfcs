====== PHP RFC: Enumerations ======

  * Date: 2020-12-04
  * Author: Larry Garfield (larry@garfieldtech.com), Ilija Tovilo (tovilo.ilija@gmail.com)
  * Status: In Discussion
  * Target Version: PHP 8.1
  * Implementation: https://github.com/php/php-src/pull/6489

===== Introduction =====

This RFC introduces Enumerations to PHP.  The scope of this RFC is limited to "unit enumerations," that is, enumerations that are themselves a value, rather than simply a fancy syntax for a primitive constant, and do not include additional associated information.  This capability offers greatly expanded support for data modeling, custom type definitions, and monad-style behavior. Enums enable the modeling technique of “make invalid states unrepresentable,” which leads to more robust code with less need for exhaustive testing.

Many languages have support for enumerations of some variety. A [[https://github.com/Crell/enum-comparison|survey we conducted of various languages]] found that they could be categorized into three general groups: Fancy Constants, Fancy Objects, and full Algebraic Data Types (ADTs). 

This RFC is part of a larger effort to introduce full Algebraic Data Types.  It implements the "Fancy Objects" variant of enumerations in such a way that it may be extended to full ADTs by future RFCs.  It draws both conceptually and semantically from Swift, Rust, and Kotlin, although it is not directly modeled on either.

The most popular case of enumerations is ''%%boolean%%'', which is an enumerated type with legal values ''%%true%%'' and ''%%false%%''. This RFC allows developers to define their own arbitrarily robust enumerations.

===== Proposal =====

Enumerations are built on top of classes and objects.  That means, except where otherwise noted, "how would Enums behave in situation X" can be answered "the same as any other object instance."  They would, for example, pass an ''object'' type check.  Similarly, enum names and case names are both case insensitive.  (With the same caveat about autoloading on case sensitive file systems that already applies to classes generally.)

==== Unit enumerations ====

This RFC introduces a new language construct, ''%%enum%%''. Enums are similar to classes, and share the same namespaces as classes, interfaces, and traits. They are also autoloadable the same way. An Enum defines a new type, which has a fixed, limited number of possible legal values.

<code php>
enum Suit {
  case Hearts;
  case Diamonds;
  case Clubs;
  case Spades;
}
</code>

This declaration creates a new enumerated type named ''%%Suit%%'', which has four and only four legal values: ''%%Suit::Hearts%%'', ''%%Suit::Diamonds%%'', ''%%Suit::Clubs%%'', and ''%%Suit::Spades%%''. Variables may be assigned to one of those legal values. A function may be type checked against an enumerated type, in which case only values of that type may be passed.

<code php>
function pick_a_card(Suit $suit) { ... }

$val = Suit::Diamonds;

pick_a_card($val);        // OK
pick_a_card(Suit::Clubs); // OK
pick_a_card('Spades');    // throws TypeError
</code>

An Enumeration may have zero or more ''%%case%%'' definitions, with no maximum.  A zero-case enum is syntactically valid, if rather useless.

Cases are not intrinsically backed by a scalar value. That is, ''%%Suit::Hearts%%'' is not equal to 0. Instead, each case is backed by a singleton object of that name. That means that:

<code php>
$a = Suit::Spades;
$b = Suit::Spades;

$a === $b; // true

$a instanceof Suit;         // true
</code>

It also means that enum values are never ''<'' or ''>'' each other, since those comparisons are not meaningful on objects.  Those comparisons will always return false when working with enum values.

This type of enum (with just enum cases and no related data) is known as a "Unit Enum".

All Unit Enums as implemented as instances of their enum type.  The enum type is represented internally as a class that implements an internal ''UnitEnum'' interface that may be typed against.  That is one way to determine an Enum from any other object:

<code php>
Suit::Hearts instanceof UnitEnum; // true
</code>

(See below for more on the enum interfaces.)

All Cases have a read-only property, ''case'', that is the case-sensitive name of the case itself.  That is largely an implementation artifact, but may also be used for debugging purposes.

<code php>
print Suit::Spades->case;
// prints "Spades"
</code>

==== Enumerated Methods ====

Enums may contain methods, and may implement interfaces.  If an Enum implements an interface, then any type check for that interface will also accept all cases of that Enum.

<code php>
interface Colorful {
  public function color(): string;
}

enum Suit implements Colorful {
  case Hearts;
  case Diamonds;
  case Clubs;
  case Spades;
  
  // Fulfills the interface contract.
  public function color(): string {
    return match($this) {
      Suit::Hearts, Suit::Diamonds => 'Red',
      Suit::Clubs, Suit::Spaces => 'Black',
    };
  }
  
  // Not part of an interface; that's fine.
  public function shape(): string {
    return "Rectangle";
  }
}

function paint(Colorful $c) { ... }

paint(Suit::Clubs);  // Works

print Suit::Diamonds->shape(); // prints "rectangle"
</code>

In this example, all four instances of ''Suit'' have two methods, ''%%color()%%'' and ''%%shape()%%''.  As far as calling code and type checks are concerned, they behave exactly the same as any other object instance.

Inside a method on a Case, the ''%%$this%%'' variable is defined and refers to the Case instance.

Methods may be arbitrarily complex, but in practice will usually return a static value or ''match'' on ''%%$this%%'' to provide different results for different cases.

Note that in this case it would be a better data modeling practice to also define a ''%%SuitColor%%'' Enum Type with values Red and Black and return that instead. However, that would complicate this example.

The above hierarchy is logically similar to the following class structure (although this is not the actual code that runs):

<code php>
interface Colorful {
  public function color(): string;
}

final class Suit implements UnitEnum, Colorful {

  public const Hearts = new static('Hearts');
  public const Diamonds = new static('Diamonds');
  public const Clubs = new static('Clubs');
  public const Spades = new static('Spades');

  private function __construct() {}

  public function color(): string {
    return match($this) {
      Suit::Hearts, Suit::Diamonds => 'Red',
      Suit::Clubs, Suit::Spaces => 'Black',
    };
  }

  public function shape(): string {
    return "Rectangle";
  }
  
  public static function cases(): array {
    // See below.
  }
}
</code>

The case instance objects may be assigned to constants because they are created internally in the engine rather than in user-space.  Additionally, the differentiating flag for each case is not actually a constructor parameter.

Methods may be public, private, or protected, although in practice private and protected are equivalent as inheritance is not allowed.

==== Enumeration static methods ====

Enumerations may also have static methods.  The use for static methods on the enumeration itself is primarily for alternative constructors.  Eg:

<code php>
enum Size {
  case Small;
  case Medium;
  case Large;

  public static function fromLength(int $cm) {
    return match(true) {
      $cm < 50 => static::Small,
      $cm < 100 => static::Medium,
      default => static::Large,
    };
  }
}
</code>

Static methods may be public, private, or protected, although in practice private and protected are equivalent as inheritance is not allowed.

==== Enumeration constants ====

Eumerations may include constants, which may be public, private, or protected, although in practice private and protected are equivalent as inheritance is not allowed.

An enum constant may refer to an enum case:

<code php>
enum Size {
  case Small;
  case Medium;
  case Large;

  public const Huge = self::Large;
}
</code>

Additionally, because cases are represented as constants on the enum itself, they may be used as static values in constant definition or function parameter default values.

==== Traits ====

Enumerations may leverage traits, which will behave the same as on classes.  The caveat is that traits ''use''d in an enum must not contain properties.  They may only include methods, static methods, and constants.  A trait with properties will result in a fatal error.

<code php>
interface Colorful {
  public function color(): string;
}

trait Rectangle {
  public function shape(): string {
    return "Rectangle";
  }
}

enum Suit implements Colorful {
  use Rectangle;
  
  case Hearts;
  case Diamonds;
  case Clubs;
  case Spades;

  public function color(): string {
    return match($this) {
      Suit::Hearts, Suit::Diamonds => 'Red',
      Suit::Clubs, Suit::Spaces => 'Black',
    };
  }
}
</code>

==== Comparison to objects ====

Although Enums are implemented using classes under the hood and share much of their semantics, some object-style functionality is forbidden.  These either do not make sense in the scope of enums, their value is debatable (but could be re-added in the future), or their semantics are unclear.

Specifically, the following features of objects are not allowed on enumerations:

  * Constructors - Not relevant without data/state.
  * Destructors - Not relevant without data/state.
  * Class/Enum inheritance. - Enums are by design a closed list, which inheritance would violate. (Interfaces are allowed, but not parent classes.)
  * Enum/Case properties - Properties are a form of state, and enum cases are stateless singletons.  Metadata about an enum or case can always be exposed via methods.
  * Dynamic properties - Avoid state.  Plus, they're a bad idea on classes anyway.
  * Magic methods except for those specifically listed below - Most of the excluded ones involve state.
  * Cloning of enum cases.  Enum cases must be single instances in order to behave predictably.

If you need any of that functionality, classes as they already exist are the superior option.

The following object functionality is available, and behaves just as it does on any other object:

  * Public, private, and protected methods.
  * Public, private, and protected static methods.
  * Public, private, and protected constants.
  * ''%%__call%%'', ''%%__callStatic%%'', and ''%%__invoke%%''  magic methods
  * ''<nowiki>__CLASS__</nowiki>'' and ''<nowiki>__FUNCTION__</nowiki>'' constants behave as normal

The ''%%::class%%'' magic constant on an Enum type evaluates to the type name including any namespace, exactly the same as an object.  The ''%%::class%%'' magic constant on a Case instance also evaluates to the Enum type, as it is an instance of that type.

Additionally, enum cases may not be instantiated directly with ''new'', nor with ''newInstanceWithoutConstructor'' in reflection.  Both will result in an error.

<code php>
$clovers = new Suit(); // error
$mace = new Suit::Club; // error
</code>

==== Scalar Enums ====

By default, Enumerated Cases have no scalar equivalent. They are simply singleton objects. However, there are ample cases where an Enumerated Case needs to be able to round-trip to a database or similar datastore, so having a built-in scalar (and thus trivially serializable) equivalent defined intrinsically is useful.

To define a scalar equivalent for an Enumeration, the syntax is as follows:

<code php>
enum Suit: string {
  case Hearts = 'H';
  case Diamonds = 'D';
  case Clubs = 'C';
  case Spades = 'S';
}
</code>

Scalar backing types of ''%%int%%'' or ''%%string%%'' are supported, and a given enumeration supports only a single type at a time. (That is, no union of ''%%int|string%%''.) If an enumeration is marked as having a scalar equivalent, then all cases must have a unique scalar equivalent defined explicitly.  There are no auto-generated scalar equivalents (e.g., sequential integers).  Scalar cases must be unique; two enum cases may not have the same scalar equivalent.  (However, a constant may refer to a case, effectively creating an alias.)

Scalar equivalent values must be literals. Constants and constant expressions are not supported.

The scalar equivalent of a case is accessible via a ''%%value%%'' property, which is read-only.

<code php>
print Suit::Clubs->value;
// Prints "C"
</code>

In order to enforce the ''value'' property as read-only, a variable cannot be assigned as a reference to it.  That is, the following is an error:

<code php>
// Not OK.
$ref = &Suit::Clubs->value;
</code>

Scalar enums implement an internal ''ScalarEnum'' interface, which extends ''UnitEnum''.  ''ScalarEnum'' exposes an additional static method ''%%from()%%'' that is automatically generated. The ''%%from()%%'' method will up-cast from a scalar to its corresponding Enumerated Case. Invalid scalars with no matching Case will throw a ''%%ValueError%%''.

<code php>
$record = get_stuff_from_database($id);
print $record['suit'];
// Prints "H"
$suit = Suit::from($record['suit']);
$suit === Suit::Hearts; // True
</code>

Manually defining a static ''%%from()%%'' method on a Scalar Enum will result in a fatal error.

Scalar Enums may implement interfaces just like Unit Enums:

<code php>
enum Suit: string implements Colorful {
  case Hearts = 'H';
  case Diamonds = 'D';
  case Clubs = 'C';
  case Spades = 'S';
  
  public function color(): string {
    return match($this) {
      Suit::Hearts, Suit::Diamonds => 'Red',
      Suit::Clubs, Suit::Spaces => 'Black',
    };
  }
}
</code>



==== Value listing ====

The ''UnitEnum'' interface includes a static method ''%%cases()%%''. ''%%cases()%%'' returns an array of all defined Cases in lexical order.

<code php>
Suit::cases();
// Produces: [Suit::Hearts, Suit::Diamonds, Suit::Clubs, Suit:Spades]
</code>

If the enumeration is not a Scalar Enum, the array will be packed (indexed sequentially starting from 0).  If the enumeration is a Scalar Enum, the keys will be the corresponding scalar for each enumeration.

The ''ScalarEnum'' interface additionally has a property ''%%value%%'' that returns the scalar value for a given case.

<code php>
'D' == Suit::Diamonds->value; // true
</code>

==== Serialization ====

Enumerations are serialized differently from objects.  Specifically, they have a new serialization code, "E", that specifies the name of the enum case.  The deserialization routine is then able to use that to set a variable to the existing singleton value.  That ensures that:

<code php>
Suit::Hearts === unserialize(serialize(Suit::Hearts));

print serialize(Suit::Hearts);
// E:11:"Suit:Hearts";
</code>

On deserialization, if an enum and case cannot be found to match a serialized value then a warning will be emitted and ''false'' returned.  

==== Attributes ====

Enums and cases may have attributes attached to them, like any other language construct.  The ''TARGET_CLASS'' target filter will include Enums themselves.  The ''TARGET_CONST'' target filter will include Enum Cases.

No engine-defined attributes are included.  User-defined attributes can do whatever.

==== Match expressions ====

''%%match%%'' expressions offer a natural and convenient way to branch logic depending on the enum value. Since every instance of a Unit Case is a singleton, it will always pass an identity check. Therefore:

<code php>
$val = Suit::Diamonds;

$str = match ($val) {
    Suit::Spades => "The swords of a soldier",
    Suit::Clubs => "Weapons of war",
    Suit::Diamonds => "Money for this art",
    default => "The shape of my heart",
}
</code>

This usage requires no modification of ''%%match%%''.  It is a natural implication of the current functionality.

==== SplObjectStorage and WeakMaps ====

As objects, Enum cases cannot be used as keys in an array.  However, they can be used as keys in a ''SplObjectStorage'' or ''WeakMap''.  Because they are singletons they never get garbage collected, and thus will never be removed from a ''WeakMap'', making these two storage mechanisms effectively equivalent.

This usage requires no modification to ''SplObjectStorage'' or ''WeakMap''.  It is a natural implication of the current functionality.

==== Reflection ====

Enums are reflectable using a ''ReflectionEnum'' class, which extends ''ReflectionClass''.  Methods that are not relevant (such as listing properties) are stubbed out to return empty values.  It also contains the following additional methods:

  * ''hasCase(string $name): bool'' - Returns true if there is a Case defined with that name.  For instance, ''$r->hasCase('Hearts')'' returns true.
  * ''getCases(): array'' - Returns an array of ''ReflectionEnumCase'' objects.
  * ''getCase(string $name): ReflectionEnumCase'' - Returns a single ''ReflectionEnumCase'' object for the corresponding case.  If not found, it throws a ''ReflectionException''.
  * ''hasScalarType(): bool'' - Returns true if the Enum has a scalar equivalent type.  False if not.
  * ''getScalarType(): ReflectionType'' - Returns the scalar equivalent type of the Enum, if any.  If it doesn't have one, it returns a ''ReflectionType'' on ''null''.

''ReflectionEnumCase'' represents an individual Case in an enumeration.  It extends ''ReflectionClassConstant'' and stubs out irrelevant methods.  It also has the following methods:

  * ''getEnum(): ReflectionEnum'' - Returns a reflection of the Enum that contains the Case.
  * ''getScalar(): int|string|null'' - Returns the scalar equivalent value defined for the case, if defined.  If one is not defined, it returns ''null''.
  * The existing method ''getValue()'' can be used to retrieve the corresponding Enum instance for that case.
  * The ''setValue()'' method is disabled outright to prevent modification of the ''value'' property.

Additionally, a new function ''is_enum(mixed): bool'' returns true if the value passed is an enum or case object.

==== Examples ====

Below are a few examples of Enums in action.

=== Basic limited values ===

<code php>
enum SortOrder {
  case ASC;
  case DESC;
}

function query($fields, $filter, SortOrder $order = SortOrder::ASC) { ... }
</code>

The ''query'' function can now proceed safe in the knowledge that ''$order'' is guaranteed to be either ''SortOrder::ASC'' or ''SortOrder::DESC''.  Any other value would have resulted in a TypeError, so no further error checking or testing is needed.

=== Advanced Exclusive values ===

<code php>
enum UserStatus: string {
  case Pending = 'P';
  case Active = 'A';
  case Suspended = 'S';
  case CanceledByUser = 'C';
  
  public function label(): string {
    return match($this) {
      static::Pending => 'Pending',
      static::Active => 'Active',
      static::Suspended => 'Suspended',
      static::CanceledByUser => 'Canceled by user',
    };
  }
}
</code>

In this example, a user's status may be one of, and exclusively, ''UserStatus::Pending'', ''UserStatus::Active'', ''UserStatus::Suspended'', or ''UserStatus::CanceledByUser''.  A function can type a parameter against ''UserStatus'' and then only accept those four values, period.

All four values have a ''label()'' method, which returns a human-readable string.  That string is independent of the "machine name" scalar equivalent string, which can be used in, for example, a database field or an HTML select box.

<code php>
foreach (UserStatus::cases() as $key => $val) {
  printf('<option value="%s">%s</option>\n', $key, $val->label());
}
</code>

==== New interfaces ====

As noted above, this RFC defines two additional internal interfaces.  These interfaces are available to make it possible for user code to determine if a given object is an enumeration, and if so what type.  User-defined classes may not implement or extend these interfaces directly.

<code php>

interface UnitEnum {
  public static function cases(): array;
}

interface ScalarEnum extends UnitEnum {
  public static function from(int|string $scalar): static;
}
</code>

===== Backward Incompatible Changes =====

“enum” becomes a language keyword, with the usual potential for naming conflicts with existing global constants.

The global scoped internal interfaces ''UnitEnum'', and ''ScalarEnum'' are defined.

The global function ''is_enum'' is defined.

===== Open questions =====

==== Reflection ====

Should ''ReflectionEnum'' extend ''ReflectionClass'' or be its own thing?

Should ''ReflectionEnumCase'' extend ''ReflectionConstant'' or be its own thing?

===== Future Scope =====

See the [[rfc:adts|Algebraic data types (Meta RFC)]] document.

==== Grouped syntax ====

It would be possible, in the simple case, to allow multiple cases to be defined together, like so:

<code php>
enum Suit {
  case Hearts, Diamonds, Clubs, Spades;
}
</code>

However, that may cause syntactic issues with the planned addition of typed unions, which may or may not end up including per-case methods.  Until that future extension is settled, we opted to skip this syntactic optimization.  Grouped syntaxes have a somewhat controversial history anyway (they're not universally loved, and often unused entirely in may situations), and it's easy enough to add later if needed, we have omitted that shorthand at this time.  Once the dust settles they may get added in the future.

==== Enums as array keys ====

Because they are objects, enum cases may not be used as keys in an associative array.  It may be possible to support that in the future, but that is not covered at this time.  For now, SplObjectStorage and WeakMaps are good enough.

==== Enum Sets ====

An enum set is the logical OR of two other cases.  For instance, ''$red = Suit::Hearts | Suit::Diamonds''.  Those are not supported at this time.

Adding support for enum sets is a possibility for a future RFC, should an appropriate implementation be determined.

==== Auto-scalar conversion ====

Whether or not a scalar-backed enum can be viewed as "close enough" to its corresponding scalar value is debatable, and of debatable value.  For instance, is a string-backed enum ''Stringable''?  Should an ''int'' type check accept an int-backed enum value?  Should a string-backed enum work in a print statement?  What about up-converting a scalar to its corresponding enum automatically?

The optimal behavior here, if any, will likely not become apparent until enums see widespread use.  We have therefore opted to omit all auto-conversion at this time.  If clear and compelling use cases for auto-conversion appear in the future, future PHP versions can re-introduce such auto-conversion in a more targeted, well-informed way.

==== Magic read-methods ====

The ''%%__get%%'' and ''%%__isset%%'' magic methods are likely safe, as they cannot manipulate state (or at least no more than any other method).  They have been omitted at this time largely to avoid BC breaks in future planned extensions of enumerations, such as Tagged Unions/ADTs.  (See the Meta RFC linked above.)  It is possible that the introduction of associated values will require internal changes that result in additional property names becoming reserved.  For that reason, we have for now omitted those potentially conflicting magic methods.  In practice, there is no functionality they offer that couldn't be implemented using methods.

If when the dust settles it appears that ''%%__get%%'' would not cause a conflict after all, it may be permitted at a later date.

===== Voting =====

This is a simple yes/no vote to include Enumerations. 2/3 required to pass.

===== References =====

[[https://github.com/Crell/enum-comparison|Survey of enumerations supported by various languages, conducted by Larry]]