====== PHP RFC: Add sha256() and sha256_file() functions ======
  * Version: 0.1
  * Date: 2024-09-19
  * Author: Rowan Tommins <imsop@php.net>
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/add-sha256-function

===== Introduction =====

PHP currently has dedicated functions for calculating MD5 and SHA-1 hashes, both of which were once common but are now considered broken from a security point of view. It is widely recommended to use SHA-256 for the purposes these were previously suited to, but PHP lacks dedicated functions to do so. This RFC proposes to add functions for calculating a SHA-256 hash from a string (<php>sha256()</php>), and from a file (<php>sha256_file()</php>). It also proposes to move these functions from ''ext/standard'' to ''ext/hash'', primarily as an aid to organising the official manual.

A proposal to deprecate the <php>md5()</php>, <php>sha1()</php>, <php>md5_file()</php>, and <php>sha1_file()</php> functions in the bulk [[rfc/deprecations_php_8_4#deprecate_md5_sha1_md5_file_and_sha1_file|deprecations for PHP 8.4 RFC]] was declined. Its rationale said, in part:

<blockquote>
The cryptographic checksum MD5 and SHA-1 are considered broken for their main use of verifying the authenticity of a a payload or message and should be replaced by a hash function from the SHA-2 family (e.g. SHA-256) or another cryptographic hash function that is still considered to be secure.

Unfortunately these cryptographically secure hash functions are only available by means of the generic <php>hash()</php> function (and the closely related <php>hash_init()</php>, <php>hash_file()</php>, and <php>hash_hmac</php> functions), making using them more verbose and thus seemingly more complicated than the standalone <php>md5()</php>, <php>sha1()</php>, <php>md5_file()</php>, and <php>sha1_file()</php> functions [...]
</blockquote>

This RFC agrees with this analysis, but proposes the opposite action: rather than //removing// convenient functions to //discourage// their use, this RFC proposes to //add// functions that are easy to discover and use, to //encourage// their use.

===== Standalone vs Universal functions =====

The <php>hash()</php> family of functions (including <php>hash_file</php>, <php>hash_init()</php>, and more) form a powerful "toolkit"

===== Proposal =====

...

===== Backward Incompatible Changes =====
What breaks, and what is the justification for it?

===== Proposed PHP Version(s) =====
List the proposed PHP versions that the feature will be included in.  Use relative versions such as "next PHP 8.x" or "next PHP 8.x.y".

===== RFC Impact =====
==== To SAPIs ====
Describe the impact to CLI, Development web server, embedded PHP etc.

==== To Existing Extensions ====
Will existing extensions be affected?

==== To Opcache ====
It is necessary to develop RFC's with opcache in mind, since opcache is a core extension distributed with PHP.

Please explain how you have verified your RFC's compatibility with opcache.

==== New Constants ====
Describe any new constants so they can be accurately and comprehensively explained in the PHP documentation.

==== php.ini Defaults ====
If there are any php.ini settings then list:
  * hardcoded default values
  * php.ini-development values
  * php.ini-production values

===== Open Issues =====
Make sure there are no open issues when the vote starts!

===== Unaffected PHP Functionality =====
List existing areas/features of PHP that will not be changed by the RFC.

This helps avoid any ambiguity, shows that you have thought deeply about the RFC's impact, and helps reduces mail list noise.

===== Future Scope =====
This section details areas where the feature might be improved in future, but that are not currently proposed in this RFC.

===== Proposed Voting Choices =====
Include these so readers know where you are heading and can discuss the proposed voting options.

===== Patches and Tests =====
Links to any external patches and tests go here.

If there is no patch, make it clear who will create a patch, or whether a volunteer to help with implementation is needed.

Make it clear if the patch is intended to be the final patch, or is just a prototype.

For changes affecting the core language, you should also provide a patch for the language specification.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged into
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
  - a link to the language specification section (if any)

===== References =====
Links to external references, discussions or RFCs

===== Rejected Features =====
Keep this updated with features that were discussed on the mail lists.