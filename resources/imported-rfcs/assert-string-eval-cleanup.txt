====== PHP RFC: Deprecate remains of string evaluated code assertions ======
  * Version: 0.9
  * Date: 2023-05-31
  * Author: George Peter Banyard, <girgias@php.net>
  * Status: In Voting
  * Target Version: PHP 8.3
  * First Published at: https://wiki.php.net/rfc/assert-string-eval-cleanup

===== Introduction =====

Prior to PHP 7 assertions via the assert function could only operate on boolean values or with strings, in which case the string was evaluated and the result of it would be interpreted. The behaviour used by <php>assert()</php> is dependent on various INI settings that can also be set using the <php>assert_options()</php> function.

PHP 7 introduced "Expectations" which work with arbitrary expressions without needing to use <php>eval()</php> internally by utilizing the newly introduced AST. To preserve backwards compatibility, none of the previous assert INI settings were removed to allow the usage of "legacy" code assertions while migrating to the expression based one. In doing so, 2 new INI settings were introduced, ''zend_assertions'' and ''assert.exception''.

Moreover, the "legacy" code assertions were deprecated in PHP 7.2 and have been removed in PHP 8.0. However, only the ''assert.quiet_eval'' INI setting and corresponding <php>ASSERT_QUIET_EVAL</php> have been removed. None of the other INI settings related to those assertions had been deprecated nor removed. Moreover, with the removal of the code assertions in PHP 8.0 some subtle behavioural changes were made if one continues to use the legacy INI settings.

Thus, the proposal is to deprecate those INI settings, the <php>assert_options()</php> function that allows to set them, and the relevant ''ASSERT_*'' constants.


The INI settings and constants in question are:
  * ''assert.active'' and <php>ASSERT_ACTIVE</php>
  * ''assert.warning'' and <php>ASSERT_WARNING</php>
  * ''assert.bail'' and <php>ASSERT_BAIL</php>
  * ''assert.callback'' and <php>ASSERT_CALLBACK</php>
  * ''assert.exception'' and <php>ASSERT_EXCEPTION</php> which were introduced in PHP 7.0

We will now explain what each of these setting does:

==== assert.active ====

Enabled by default. If disabled, any call to the <php>assert()</php> function will immediately return <php>true</php>.
Otherwise, the assertion is executed.

==== assert.warning ====

Enabled by default. If enabled, a warning is emitted if an assertion fails.
As of PHP 7, this setting only has an effect if ''assert.exception'' is disabled.

==== assert.bail ====

Disabled by default. If enabled, the engine bails out when an assertion fails.
One needs to remember that prior to PHP 7, the engine didn't throw exceptions and thus this was the only way to abort execution on assertion failure.

==== assert.callback ====

''null'' by default. This setting allows defining a function (as a string) that should be called when an assertion fails.
The only way to assign a more generic callable (e.g. an object having an <php>__invoke()</php> magic method) is by using the <php>assert_options()</php> function.

==== assert.exception ====

Enabled by default. If enabled, an <php>AssertionError</php> or a custom exception is thrown if an assertion fails.

===== Behavioural changes between PHP 7 and 8 =====

With the removal of the string evaluated assertion in PHP, some unintended behavioural changes were made.

==== Providing a custom exception short-circuits assert() ====

As of PHP 8.0, if a custom exception to be thrown is passed as a second argument to <php>assert()</php> the only INI setting that has any effect is ''assert.active'', because if the assertion fails the custom exception is immediately thrown.

Moreover, the potentially set callback is not called.

==== Signature change of the assertion callback ====

In PHP 7 and previously, the assertion callback signature was as follows:

<PHP>
fn (string $filename, int $line_number, string $code, string $description = ?)
</PHP>

Where <php>$code</php> represent the string evaluated assertion if provided or an empty string.

As of PHP 8.0, the signature of the callback is as follows

<PHP>
fn (string $filename, int $line_number, null $code, string $description = ?)
</PHP>

Because the <php>assert()</php> function now always provides <php>null</php> instead of an empty string for the code argument.

===== Formal Proposal =====
  * Formally deprecate the <php>assert_options()</php> function that was "soft deprecated" in PHP 7.0, by emitting an <php>E_DEPRECATED</php> notice when it is called.
  * Deprecate the ''assert.active'' INI setting and <php>ASSERT_ACTIVE</php> constant, the ''zend_assertions'' INI setting has superseded it for a while.
  * Deprecate the ''assert.warning'' INI setting and <php>ASSERT_WARNING</php> constant
  * Deprecate the ''assert.bail'' INI setting and <php>ASSERT_BAIL</php> constant
  * Deprecate the ''assert.callback'' INI setting and <php>ASSERT_CALLBACK</php> constant, thus deprecating this feature completely.
  * Deprecate the ''assert.exception'' INI setting and <php>ASSERT_EXCEPTION</php> constant
  * Change the return value of <php>assert()</php> from ''bool'' to ''void'' when those features have been removed

The behaviour of a deprecated INI setting is as follows:

A deprecation notice is //only// emitted if the value set in an INI file, or at runtime via <php>ini_set()</php> differs from its default value.

===== Proposed PHP Version =====

Next minor version, i.e. PHP 8.3.

===== Proposed Voting Choices =====

As per the voting RFC a yes/no vote with a 2/3 majority is needed for this proposal to be accepted.

Voting started on 2023-06-28 and will end on 2023-07-12.
<doodle title="Accept Deprecate remains of string evaluated code assertions RFC?" auth="girgias" voteType="single" closed="false">
   * Yes
   * No
</doodle>

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged into
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
  - a link to the language specification section (if any)