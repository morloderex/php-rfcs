
====== Improved TLS Defaults ======
  * Version: 0.2
  * Date: 2014-01-28
  * Author: Daniel Lowrey, rdlowrey@gmail.com
  * Status: Under Discussion
  * First Published at: http://wiki.php.net/rfc/improved-tls-defaults
  * Minor Revision (v0.1 → v0.2): 2014-01-28
  * Major Revision (v0.2 → v0.3): 2014-01-29
  * Minor Revision (v0.3 → v0.4): 2014-01-30

== Revisions ==

v0.4: Removed recommendations to warn on SSLv2/SSLv3 and not use ''ssl'' wrapper for http fopen

v0.3: Added [[https://wiki.php.net/rfc/improved-tls-defaults#stream_wrapper_creep|Stream Wrapper Creep]] section

v0.2: Update cipher list recommendations and s/DSS/DES/ typo.

===== Introduction =====

PHP stream encryption currently employs several potentially insecure default settings. This RFC explores the problematic nature of the current settings and proposes several improvements. Implementing the proposed solutions would result in a more secure implementation without requiring any additional knowledge on the part of the end user. The proposed improvements are not without cost, however, as there exists a minimal potential for BC breakage.

This RFC complements the previously accepted [[https://wiki.php.net/rfc/tls-peer-verification|TLS Peer Verification RFC]] which is insufficient as a standalone measure to address potential TLS pitfalls. To clarify: this RFC suggests that peer verification is only part of the picture and that it does little good to verify peers (for example) if the implementation then unwittingly negotiates weak or insecure ciphers to encrypt transfers to the verified peer.

===== Proposed Change Summary =====

  * [[https://wiki.php.net/rfc/improved-tls-defaults?do=edit&rev=0#default_ciphers|Specify more secure default ciphers for use in encrypted stream transfers]]
  * [[https://wiki.php.net/rfc/improved-tls-defaults?do=edit&rev=0#tls_compression|Disable TLS compression by default]]
  * [[https://wiki.php.net/rfc/improved-tls-defaults?do=edit&rev=0#honor_cipher_order|Add "honor_cipher_order" stream context option]]
  * [[https://wiki.php.net/rfc/improved-tls-defaults?do=edit&rev=0#stream_wrapper_creep|Deprecate/remove superfluous stream wrappers and internally re-value existing constants as flags for fine-grained protocol control]]

===== DEFAULT Ciphers =====

Currently all ssl and tls stream transports use the openssl ''DEFAULT'' cipher list unless manually specified via the "ciphers" SSL context option. This behavior exposes unwitting users to the possibility that very weak ciphers will be negotiated for SSL/TLS sessions. Use of such ciphers renders current encryption measures ineffective against sophisticated attackers.

**Proposal**

  * Change the default cipher list to the following (pending RFC discussion). Note that users may override these settings manually at any time by specifying their own cipher list via the "ciphers" SSL context option.

''!SSLv2:!aNULL:!eNULL:!EXPORT:!LOW:!MD5:!DES:!ADH:!RC4:TLSv1+HIGH@STRENGTH''

The first few ciphers in this list are dented as [[https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_Ciphersuite|"Mandatory discards"]] by Mozilla (''!SSLv2:!aNULL:!eNULL:!EXPORT:!LOW:!MD5:!DES:''). The other ciphers proposed for exclusion have explanations below.

Meanwhile, all TLSv1 and HIGH cipher suites are marked for inclusion. To see which ciphers this corresponds to on your personal openssl installation you may execute the following command:

<code>
$ openssl ciphers -v '!SSLv2:!aNULL:!eNULL:!EXPORT:!LOW:!MD5:!DES:!ADH:!RC4:TLSv1+HIGH@STRENGTH'
</code>

The main differences between these recommendations and the Mozilla list are:

- ''RC4'' and ''ADH'' ciphers are disabled (explanation follows)

- All ''TLSv1'' and ''HIGH'' ciphers are allowed in lieu of adding an endless string of specific cipher names that may or may not be available on any given system.

**Logic**

''!SSLv2''

  * The use of SSLv2 is widely and strongly discouraged and should not be enabled by default. Some OpenSSL libs are already compiled without SSLv2 support, but explicitly disallowing SSLv2 ciphers will provide more protection for users building ''ext/openssl'' against older libraries.

''!aNULL:!eNULL''

  * Prevent ciphers that do not require authentication or encryption (self-explanatory).

''!EXPORT:!MD5:!DES''

  * Disallow ciphers known to be weak/broken/ineffective. The ciphers listed here (in addition to the above SSLv2 and NULL ciphers) compise Mozilla's list of [[https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_Ciphersuite|"Mandatory discards"]].

''!ADH''

  * TLS [[http://www.ietf.org/rfc/rfc2246.txt|RFC2246 Section A.5]] states that ADH ciphers should be disallowed


''!RC4''

  * Reputable outlets now recommend against allowing RC4 ciphers:

  * [[https://community.qualys.com/blogs/securitylabs/2013/03/19/rc4-in-tls-is-broken-now-what|RC4 in TLS is Broken: Now What]]

  * [[http://blogs.technet.com/b/srd/archive/2013/11/12/security-advisory-2868725-recommendation-to-disable-rc4.aspx|Microsoft Security Advisory 2868725: Recommendation to disable RC4]]

''@STRENGTH''

  * Order cipher preferences by strength


===== TLS Compression =====

As of PHP 5.4.13 users may specify the "disable_compression" SSL context option to prevent the CRIME attack vector. However, to benefit from this protection users must recognize the threat and manually assign the relevant context option.

**Proposal**

  * Disable TLS compression by default.

**Logic**

Users are [[https://isecpartners.com/blog/2012/september/details-on-the-crime-attack.aspx|generally advised to disable compression]] as a low-cost method for mitigate CRIME attacks. It's sensible to enable this protection by default as users wishing to re-enable compression at the TLS layer may do so by assigning a falsy value to the "disable_compression" SSL context option.


===== Honor Cipher Order =====

The [[http://contextis.com/research/blog/server-technologies-https-beast-attack/|BEAST]] TLS attack vector was [[http://en.wikipedia.org/wiki/Transport_Layer_Security#BEAST_attack|first publicized in 2011]]. Mitigating this
attack is relatively simple: servers have only to [[https://community.qualys.com/blogs/securitylabs/2011/10/17/mitigating-the-beast-attack-on-tls|prioritize ciphers]] that aren't susceptible to the attack. However, unless instructed otherwise, OpenSSL uses the client's preferences when negotiating the cipher. To prevent nefarious (or naive) clients from prioritizing susceptible ciphers servers must configure SSL sessions using OpenSSL's ''SSL_OP_CIPHER_SERVER_PREFERENCE'' context option.



**Proposal**

  * Add (and enable by default) a new boolean "honor_cipher_order" ssl context option.

**Logic**

Exposing this capability to userland allows encrypted stream servers to transparently mitigate BEAST vulnerabilities and control cipher ordering preferences during negotiation (important).

===== Stream Wrapper Creep =====

The following stream encryption wrappers currently exist in userland:

  * ''ssl''
  * ''sslv2''
  * ''sslv3''
  * ''tls''

Meanwhile, 5.6 has added the following new wrappers:

  * ''tlsv1.0''
  * ''tlsv1.1''
  * ''tlsv1.2''

//Full disclosure: I'm responsible for the new wrappers (sorry!).//

**Yeah, So?**

The problem with this design should be obvious: it grows linearly as each new encryption protocol
is standardized and unleashed on the world. Choosing the correct wrapper is already a daunting task
for users unfamiliar with the various transport layer security protocols and this situation will only
deteriorate as new protocols are continuously adopted.

Beyond the "creep" of new stream wrappers there also exists a consistency problem. Do all users
understand that the ''ssl'' wrapper technically can negotiate //any// of the supported protocols? Do
they know that in contrast the ''tls'' wrapper will //only// negotiate TLSv1 and not the newer TLS
iterations? Do they realize that the ''ssl'' wrapper potentially exposes their transfers to the
broken/insecure SSLv2 and SSLv3 protocols? How can they tell PHP to use (for example) only TLSv1.1
or TLSv1.2?

This design is confusing and has aged poorly in a world where new protocols arrive periodically to
address the shortcomings of previous iterations. Moreover, PHP is built on the foundation of hiding
these kinds of minute details from the user. Developers shouldn't require a full understanding of
the underlying transport layer security protocols to safely encrypt their data transfers.

The goal must always be to make things "just work" in a secure manner without any knowledge on the part of the user.

**Source of the Problem**

The discrete stream wrapper approach is necessary because it depends on //value// assignments to determine the
allowed protocols instead of //flags//. This makes it impossible to achieve fine-grained control over
which protocols are used without fractaling out new constants for every conceivable combination of
protocols. The //value// approach essentially locks users into either "one narrow protocol" or "all
protocols regardless of how secure some of those protocols may or may not be."

This issue is particularly acute for ''stream_socket_server()'' users who need fine-grained control
over which protocols are allowed in their servers (while disallowing the insecure protocols). For
example, a server may wish to only allow TLSv1.1 and TLSv1.2. The existing paradigm makes this
impossible.

**Proposal**

  - Internally re-value the existing ''STREAM_CRYPTO_METHOD_*'' constants to allow the assignment of crypto methods using bitwise flags instead of values. Users may specify any combination of these constants to control the allowed protocols for a given client or server stream. Meanwhile, the "crypto_method" context option already included as part of 5.6 allows all code to control exactly which methods are appropriate for a given operation (e.g. ''file_get_contents('https://somesite.com', FALSE, $context);'') with default support for the TLS family of protocols.
  - Remove the new wrappers currently intended for 5.6 (tlsv1.0, tlsv1.1, tlsv1.2)
  - Soft-deprecate sslv2 and sslv3 in 5.6 with ''E_DEPRECATED'' to funnel users to the more generalized ''ssl'' and ''tls'' wrappers with removal scheduled for 5.7.

**BC Implications of Proposed Stream Wrapper Changes**

//None.//

The only implications for existing code would be the ''E_DEPRECATED'' messages for the ''sslv2'' and ''sslv3'' stream wrappers. Only the stream wrappers will trigger deprecation notices; users may still explicitly allow these protocols in their stream contexts using the appropriate flags without triggering the deprecation notice.

The overarching goals here are twofold:

  - To keep users //safe by default// without inhibiting their ability to manually allow potentially insecure functionality;
  - To eliminate the confusion of having many different wrappers for encrypted streams. By deprecating ''sslv2'' and ''sslv3'' in 5.6 and potentially removing them in 5.7 we simplify the ecosystem without losing any of the existing functionality.

**Existing Constant Re-Valuing**

The existing constants would be internally re-valued as flags as shown below. The least significant bit is used to to denote client status.

<code>
typedef enum {
	STREAM_CRYPTO_METHOD_SSLv2_CLIENT = (1 << 1 | 1),
	STREAM_CRYPTO_METHOD_SSLv3_CLIENT = (1 << 2 | 1),
	STREAM_CRYPTO_METHOD_SSLv23_CLIENT = ((1 << 1) | (1 << 2) | 1),
	STREAM_CRYPTO_METHOD_TLSv1_0_CLIENT = (1 << 3 | 1), /* New in 5.6 */
	STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT = (1 << 4 | 1), /* New in 5.6 */
	STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT = (1 << 5 | 1), /* New in 5.6 */
	STREAM_CRYPTO_METHOD_TLS_CLIENT = ((1 << 3) | (1 << 4) | (1 << 5) | 1), /* Any TLS protocol */
	STREAM_CRYPTO_METHOD_SSLv2_SERVER = (1 << 1),
	STREAM_CRYPTO_METHOD_SSLv3_SERVER = (1 << 2),
	STREAM_CRYPTO_METHOD_SSLv23_SERVER = ((1 << 1) | (1 << 2)),
	STREAM_CRYPTO_METHOD_TLSv1_0_SERVER = (1 << 3), /* New in 5.6 */
	STREAM_CRYPTO_METHOD_TLSv1_1_SERVER = (1 << 4), /* New in 5.6 */
	STREAM_CRYPTO_METHOD_TLSv1_2_SERVER = (1 << 5), /* New in 5.6 */
	STREAM_CRYPTO_METHOD_TLS_SERVER = ((1 << 3) | (1 << 4) | (1 << 5)) /* Any TLS protocol */
} php_stream_xport_crypt_method_t;
</code>



===== Backward Incompatible Changes =====

Most existing code is expected work without any BC implications. The only source of potential breakage involves the scenario where users connect to servers who employ //severely// outdated encryption technologies that are known to be insecure. For these users the option always exists to manually override secure defaults with insecure settings in the stream context.

The proposed changes are offered as an RFC due to the possibility for minimal BC breakage.


===== Proposed PHP Version =====

This RFC is proposed for implementation in PHP 5.6.


===== Impact to Existing Extensions =====

Extension authors should not have to modify code to work with the proposed changes. ''ext/openssl'' is minimally modified and minor changes and additions are also needed in:

  * ext/standard/file.c
  * ext/standard/http_fopen_wrapper.c
  * main/streams/php_stream_transport.h


===== Open Issues =====

  * Feedback on the proposed default cipher list?
  * Should the ''sslv2'' and ''sslv3'' stream wrappers be deprecated?

  
===== Proposed Voting Choices =====

  * Should 5.6 implement more secure stream encryption defaults and use flag-based protocol selection?

  
===== Patches and Tests =====

There is no patch publicly available at this time. Each of the proposed changes have been implemented locally at this time to ensure feasibility. A public patch + applicable tests is in the works and will be added prior to the initiation of a vote.


===== Implementation =====

TBD

  
===== Vote =====

TBD


===== Rejected Features =====

TBD