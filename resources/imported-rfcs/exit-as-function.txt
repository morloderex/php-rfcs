====== PHP RFC: Transform exit() from a language construct into a standard function ======

  * Version: 0.1
  * Date: 2024-05-05
  * Author: Gina Peter Banyard <girgias@php.net>
  * Status: Under Discussion
  * Target Version: PHP 8.4
  * Implementation: <https://github.com/php/php-src/pull/13483>
  * First Published at: <http://wiki.php.net/rfc/exit-as-function>

===== Introduction =====

The <php>exit</php> (and it's alias <php>die</php>) language construct can be used on its own as a "constant"
((We are using this terminology as it can be used in any place where an expression is expected, like a constant: https://3v4l.org/sL9Q5))
to terminate a PHP script with status code <php>0</php>, or it can be used like a "function" which accepts an
optional argument <php>$status</php> that can either be an integer, in which case the PHP script will be terminated
with the given integer as the status code, or it can be a string, in which case the PHP script is terminated
with status code <php>0</php> and the string is printed to STDOUT.

However, because <php>exit()</php> is not a proper function it cannot be called with named argument,
passed to functions as a <php>callable</php>, does not respect the <php>strict_types</php> declare,
and most confusingly, it does not follow the usual type juggling semantics.

Indeed, any value which is //not// an integer, is cast to a string.
This means passing an array or a resource to <php>exit()</php> will not throw a <php>TypeError</php>
but print <php>Array</php> or <php>Resource id #%d</php> respectively with the relevant warning being emitted.
However, it does throw a <php>TypeError</php> for non-<php>Stringable</php> objects.

Moreover, arguments of type <php>bool</php> are cast to <php>string</php> instead of <php>int</php> violating the standard type juggling semantics
for a <php>string|int</php> union type, this is something that we find especially confusing for CLI scripts that may have a
boolean <php>$has_error</php> variable that is passed to <php>exit()</php> with the assumption <php>false</php> will be coerced to <php>0</php>
and <php>true</php> coerced to <php>1</php>.

Finally, the need for <php>exit()</php> to be a language construct with its own dedicated opcode is not a requirement any more
since PHP 8.0 as the opcode throws a special kind of exception which cannot be caught,
((https://github.com/php/php-src/pull/5768))
nor executes <php>finally</php> blocks, to unwind the stack normally.

===== Proposal =====

We propose to make <php>exit()</php> a proper function with the following signature:
<PHP>
function exit(string|int $status = 0): never {}
</PHP>

And to make <php>die()</php> an alias of <php>exit()</php>, transform "constant" usages of <php>exit</php>/<php>die</php> to function calls at compile time.

It will continue to be impossible to declare <php>exit</php> or <php>die</php> functions in namespaces,
or disable/remove them via the <php>disable_functions</php> INI directive.

Moreover, as <php>exit</php> and <php>die</php> will no longer be keywords, it will be possible to use them as <php>goto</php> labels.

Another slight improvement is that the AST printing (seen via <php>assert()</php>)
now reflects what has actually been written in the source code rather than always using <php>exit</php>. 

===== Backward Incompatible Changes =====

The impact of this RFC is deemed to be low.

The <php>T_EXIT</php> token will be removed because <php>exit</php> will no longer need to be parsed specially by the lexer.
As most PHP libraries that deal on an AST level use Nikita Popov's <php>php-parser</php> which creates its own AST,
this should have minimal impact on userland tooling.

Projects that directly use the tokenizer extensions, like Exakat, will need some straight-forward adaptation.

And the behaviour of value of different types passed to <php>exit()</php> will be altered to match the usual type juggling semantics:

^ Argument passed       ^ Current behaviour ^ New behaviour ^ Consequences                                                                                                                         |
| int                   | int               | int           | No change, interpreted as exit code                                                                                                  |
| string                | string            | string        | No change, interpreted as status message                                                                                             |
| bool                  | string            | int           | Was status message, now exit code                                                                                                    |
| float                 | string            | int           | Was status message, now exit code, with a possible <php>"Implicit conversion from float to int loses precision"</php> deprecation notice        |
| null                  | string            | int           | Was status message, now exit code, with <php>"Passing null to parameter #1 ($status) of type string|int is deprecated"</php> deprecation notice |
| stringable object     | string            | string        | No change, interpreted as status message                                                                                             |
| non-stringable object | TypeError         | TypeError     | None                                                                                                                                 |
| array                 | string            | TypeError     | Was status message with warning, now TypeError                                                                                       |
| resource              | string            | TypeError     | Was status message with warning, now TypeError                                                                                       |


===== Future scope =====

These are ideas for future proposals that are //not// part of this RFC:

  * Deprecate using <php>exit</php> as a "constant"
  * Execute <php>finally</php> blocks for <php>exit</php>s
  * Allow disabling <php>exit()</php>/<php>die()</php> functions via the <php>disable_functions</php> INI directive, similarly to how it is possible to disable <php>assert()</php>


===== Version =====

Next minor version, PHP 8.4.

===== Vote =====

As per the voting RFC a yes/no vote with a 2/3 majority is needed for this proposal to be accepted.

Voting started on 2024-XX-XX and will end on 2024-XX-XX.
 
<doodle title="Accept Transform exit() from a language construct into a standard function RFC?" auth="girgias" voteType="single" closed="true">
   * Yes
   * No
</doodle>

===== Notes =====
