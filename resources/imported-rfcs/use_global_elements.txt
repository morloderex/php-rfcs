====== PHP RFC: "use global functions/consts" statement ======
  * Version: 0.3
  * Date: 2019-12-23
  * Author: Tyson Andre <tandre@php.net>
  * Status: Draft
  * First Published at: https://wiki.php.net/rfc/use_global_elements


===== Introduction =====

When calling a function or using a constant that isn't fully qualified from a namespace (other than the global namespace),
PHP will check these two locations in order:

  - The current namespace.
  - The global namespace. (if not found in the current namespace)

This leads to the following problems:

  - A minor decrease in performance, due to not being able to use specialized opcodes (and other optimizations) for functions such as ''strlen'' due to the ambiguity, not being able to evaluate the values of constants,\\ and due to usually needing to check the current namespace before finding a function/constant in the global namespace at runtime.\\ \\ For example, ''version_compare(PHP_VERSION, '7.0.0', '>=')'' can't be converted to a constant by opcache in a namespace,\\ but ''\version_compare(\PHP_VERSION, '7.0.0', '>=')'' can.
  - Developer confusion about what function is being called, if a project does have namespaced functions with the same name as global functions.

In order to eliminate the ambiguity, there are currently several options, which have different drawbacks:

  - Add multiple ''use function function_name'' and ''use const MY_CONST'' at the top of the namespace.\\\\This is prone to merge conflicts when functions start/stop being used, inconvenient to keep up to date, and the vast majority of these will be global functions and constants.
  - Write functions as ''\function_name()'' and constants as ''\MY_CONST''.
      * This is more verbose, and inconvenient if the only types of constants/functions used are global.
      * Some builtins such as ''__DIR__'' and ''empty()'' aren't actually constants/functions, and they can't be prefixed by backslashes.
      * Version control history for lines would change if ''MY_CONST'' was replaced with ''\MY_CONST''
  - Avoid using namespaces (this is forbidden by [PSR-1](https://www.php-fig.org/psr/psr-1/#3-namespace-and-class-names))
  - Mixes of the above approaches.

This RFC proposes a new language feature which avoids those drawbacks.


===== Proposal =====

Support the following statements within namespaces: ''use global functions;'' and ''use global consts;''.
These can be used in combination with other function/global uses, inside of each namespace block.

<code php>
namespace MyNS;

use global functions;
use function OtherNS\my_function; // can occur before or after "use global functions;"

use global consts;
use const OtherNS\OTHER_CONST;

// The below function and constant references now unambiguously refer to the global namespace.
//
// Without "use global ...", php would have checked for MyNS\version_compare
// and MyNS\PHP_VERSION at runtime before checking the global namespace.
if (version_compare(PHP_VERSION, '8.0.5') >= 0) {
    // ...
}
</code>

==== Implementation Details ====

''use global functions'' can be thought of behaving the same way as if every possible function name and constant name was used from the global namespace (for names not used elsewhere).

  * ''use global functions'' and ''use global consts;'' will have an effect on subsequent statements within the namespace block, but not on prior statements.
  * ''use global functions'' and ''use global consts;'' can be used in the same places as ''use const/function element_name;'', and can occur before and/or after ''use const/function element_name;''
  * The tokens ''consts'' and ''functions'' are case insensitive, just like ''const'' and ''function'' are.

There is a working implementation at https://github.com/php/php-src/pull/4951

==== Grammar ====

Two new token types are added (and available through the tokenizer extension): ''T_FUNCTIONS ("functions")'' and ''T_CONSTS ("consts")''.

The only new statements added to the language grammar are ''use global functions;'' and ''use global consts;'', i.e.

<code>
use_global: T_USE T_GLOBAL global_use_type;

global_use_type: T_FUNCTIONS
               | T_CONSTS;
</code>

==== Error handling ====

The error handling (for the first voting options) can be thought of being the same as if every possible function name and constant name was used from the global namespace (for names not used elsewhere).

  * A fatal error is caused by declaring a function in a namespace block with ''use global functions;''
  * A fatal error is caused by declaring a constant with ''const MY_CONST = ...'' in a namespace block with ''use global consts;''.
    ''define()'' is not affected.
  * A fatal error is caused by repeating ''use global <element_type>s'' twice for the same ''<element_type>'' within the same namespace block.
  * A warning is emitted if ''use global <element_type>s;'' and ''use <element_type> global_element_name'' are both used, due to the latter being redundant when referring to the global namespace.
  * A warning is emitted if ''use global <element_type>s;'' is used in the global namespace.


===== Backward Incompatible Changes =====

The tokens "functions" and "consts" can no longer be used in the places where "function" and "const" couldn't be used (e.g. global function names and global constant names) (e.g. '''function functions() {}'' and ''const consts = 2;'' are now invalid, but they can still be used as method names)

  * I assume that adding a new token is preferable to using the generic name token (T_NAME) and rejecting invalid values when parsing (e.g. easier to suggest the expected token for syntax errors).

Apart from the impact of adding a new token type, this feature is opt-in and does not impact existing code.

===== Proposed PHP Version(s) =====

8.0

===== Proposed Voting Choices =====

==== Yes/No Vote ====

(Requires 2/3 vote to pass)

==== Feature Syntax ====

(The option with the most votes will be implemented. In the case of ties for these choices, the earlier option will be preferred.)

  - ''use global functions;'' and ''use global consts;'' in namespace blocks.
  - ''declare(lookup_functions_in_current_namespace = false, lookup_consts_in_global_namespace = false)'' in the file's ''declare()'' blocks. 

==== Severity of redundant uses ====

When ''use global <element_type>s;'' and ''use <element_type> global_element_name;'' are both used in a namespace block, due to the latter being redundant when referring to the global namespace, php will do the following when the file is required:

  - Warning (as described in the RFC)
  - Fatal Error
  - Allow it and don't warn

If "Allow it and don't warn" has over 50% of the votes, that option wins.

Otherwise, the option of "Warning" or "Fatal Error" with the most votes wins.

==== Severity of "use global elements;" from the global namespace ====

  - Warning (as described in the RFC)
  - Fatal Error
  - Allow it and don't warn

If "Allow it and don't warn" has over 50% of the votes, that option wins.

Otherwise, the option of "Warning" or "Fatal Error" with the most votes wins.

===== Patches and Tests =====

https://github.com/php/php-src/pull/4951

===== Implementation =====


===== References =====

https://externals.io/message/107877