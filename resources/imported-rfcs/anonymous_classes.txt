
====== PHP RFC: Anonymous Classes ======
  * Version: 0.1
  * Date: 2013-09-22
  * Author: Joe Watkins, krakjoe@php.net
  * Status: Under Discussion
  * First Published at: http://wiki.php.net/rfc/anonymous_classes

===== Introduction =====

For some time PHP has featured anonymous function support in the shape of Closures; this patch introduces the same kind of functionality for objects of an anonymous class.

===== Backward Incompatible Changes =====

New syntax that will fail to parse in previous versions, so no BC breaks.

===== Proposed PHP Version(s) =====

5.6

===== SAPIs Impacted =====

All

===== Impact to Existing Extensions =====

No impact on existing libraries




===== Open Issues =====

N/A


===== Future Scope =====

This patch opens the door for nested classes 
   https://github.com/krakjoe/php-src/compare/anon_class_objects...nested_classes 
which opens the door for access modification on class declarations (no patch yet)
which all makes for more flexible/powerful OO.
===== Proposed Voting Choices =====

Straight forward, we should have this, we should not have this.

===== Syntax =====

<code php>
<?php
/* return an anonymous implementation of a Page for your MVC framework */
return new class implements Page {
    public function __construct($controller) {
        /* ... */
    }
    /* ... */
} ($controller);

/* vs */
class MyPage implements Page {
    public function __construct($controller) {
        /* ... */
    }
    /* ... */
}
return new MyPage($controller);

/* return an anonymous extension of the DirectoryIterator class */
return new class extends DirectoryIterator {
   /* ... */
} ($path);

/* vs */
class MyDirectoryIterator {
    /* .. */
}
return new MyDirectoryIterator($path);
?>
</code>

===== Implementation =====

https://github.com/php/php-src/pull/470

===== Rejected Features =====

N/A