====== PHP RFC: Nullable Intersection types ======
  * Version: 0.1
  * Date: 2021-07-22
  * Author: Nicolas Grekas, nicolasgrekas@php.net
  * Status: Draft
  * Implementation: https://github.com/php/php-src/pull/7259
  * First Published at: https://wiki.php.net/rfc/nullable_intersection_types

===== Introduction =====
Intersection types as currently accepted for PHP 8.1 are not nullable. This RFC proposes to make them so.

===== Proposal =====
Intersection types as currently accepted for PHP 8.1 are not nullable: when one uses ''X&Y'' as a type on a property, an argument or a return value, there is no syntax to declare them as accepting the ''null'' value. This means that currently it is required to use the null-pattern where default values are needed for properties and for optional arguments. For return-types, a null-object must be returned and potentially detected using a custom check.

While useful in some cases, the null-pattern is not common in PHP. One reason might be that it requires quite some boilerplate (the implementation of the null-object's class), but the most likely reason is that the ''null'' value works just great instead, with zero extra code to write.

This RFC proposes to add a syntax to the language to declare that a type accepts both an intersection or null. The possible syntax choices are discussed below. Using the longest syntax that has been proposed so far as an example, this PR aims at allowing the following piece of code:

<PHP>
class Foo
{
    public (X&Y)|null $bar;

    function setBar((X&Y)|null $bar = null): (X&Y)|null
    {
        return $this->bar = $bar;
    }
}
</PHP>

===== Backward Incompatible Changes =====
None

===== Proposed PHP Version(s) =====
8.1.

===== Future Scope =====
See https://wiki.php.net/rfc/pure-intersection-types#future_scope

===== Proposed Voting Choices =====
As per the voting RFC, the first question requires a 2/3 majority for this proposal to be accepted:

  * Make intersection types nullable: yes / no
  * Preferred syntax: "?" prefix / "|null" suffix
  * If "?" wins, brackets should be: mandatory "?(Y&Y)" / not needed "?X&Y" / both styles should work
  * If "|null" wins, brackets should be: mandatory "(Y&Y)|null" / not needed "X&Y|null" / both styles should work

===== Patches and Tests =====
See https://github.com/php/php-src/pull/7259

Patch will be updated according to the syntax decided by the vote.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged into
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
  - a link to the language specification section (if any)

===== References =====
https://wiki.php.net/rfc/pure-intersection-types
