====== PHP RFC: Covariant Returns and Contravariant Parameters ======
  * Version: 0.1
  * Date: 2018-04-29
  * Author: Levi Morrison <levim@php.net>
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters

===== Introduction =====
Currently PHP has mostly invariant parameter types and mostly invariant return types. However, we do special case a few things such as removing a type constraint on a parameter or adding one where one didn't exist for a return type; here is an example of both cases:

<PHP>interface A {
  function m(B $z);
}
interface B extends A {
  // permitted
  function m($z): A;
}</PHP>

However, we are unable to choose less specific parameter types or more specific return types otherwise:

<PHP>interface X {
  function m(Y $z): X;
}
interface X extends Y {
  // not permitted but type-safe
  function m(X $z): Y;
}</PHP>

This RFC proposes to support these additional cases.

===== Proposal =====
When determining the compatibility of an overridden method with its parents the engine should now permit less specific parameter types and more specific return types. There are three new types that are introduced:

  * ''mixed'': includes all types that exist or will ever exist including null. This matches our usage of mixed in our documentation.
  * ''scalar'': includes bool, int, float, and string. This matches our ''is_scalar'' function.
  * ''any'': includes all types that exist or will ever exist except for null.

TODO: add image showing type hierarchy of all built-in types including ''iterable'', ''callable'', ''object'', etc.

===== Backward Incompatible Changes =====
The only intended backwards compatibility breaks are to reserve new types. Any other incompatibilities should be reported and treated as bugs.

===== RFC Impact To Existing Extensions ====
TODO: New functions and macros should be introduced to make working with variant types in C easier.

===== Proposed PHP Versions =====
This RFC targets both PHP 7.3 and 8.0. Version 7.3 will include all non-breaking changes and provide deprecation or strict warnings for the newly reserved types. Version 8.0 will add the new types.

===== Voting =====
This RFC requires two-thirds in the affirmative for this RFC to pass because it directly affects the behavior of the language.

===== Future Scope =====
A future RFC may consider adding ''num'' or ''numeric''. This RFC did not propose this type to avoid a discussion about how GMP types are not considered ''is_numeric'' and as a consequence we might consider adding a way for C extensions to hook into ''numeric''.

===== Patches and Tests =====
TODO: publish WIP branch.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged into
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
  - a link to the language specification section (if any)

===== References =====
Links to external references, discussions or RFCs.
