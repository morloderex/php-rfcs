====== PHP RFC: Covariant Returns and Contravariant Parameters ======
  * Version: 0.2
  * Date: 2018-04-29
  * Author: Levi Morrison <levim@php.net>
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters

===== Introduction =====
Currently PHP has mostly invariant parameter types and mostly invariant return types. This means that if a method of a super-type has a parameter or return type constraint of ''T'' then the corresponding parameter or return type constraint of method of the sub-type must also be ''T''. However, PHP does special case a few things such as removing a type constraint on a parameter or adding one where one didn't exist for a return type; here is an example of both cases:

<PHP>interface A {
  function m(B $z);
}
interface B extends A {
  // permitted
  function m($z): A;
}</PHP>

However, PHP does not permit choosing less specific parameter types or more specific return types even though these substitutions are type-safe:

<PHP>interface X {
  function m(Y $z): X;
}
interface Y extends X {
  // not permitted but type-safe
  function m(X $z): Y;
}</PHP>

This RFC aims to support these additional cases. 

===== Proposal =====
When determining the compatibility of an overridden method with its parent's the engine should now permit less specific parameter types and more specific return types as long as the new types are compatible with the types specified by the parents.

This RFC fixes [[https://bugs.php.net/bug.php?id=76451|Bug #76451: Aliases during inheritance type checks affected by opcache]].

This RFC adds variance support to ''object'' type. Variance on the object type was previously rejected when the object type was added, presumably on the grounds it should be added when variance is made more general, which is this RFC.

==== Examples ====

Covariant return type with ''object'':

<PHP>interface Factory {
    function make(): object;
}

class Factory implements Factory {
    function make(): Foo;
}
</PHP>

Contravariant parameter type with ''iterable'':
<PHP>interface Concatable {
    // pehaps code that existed before iterable was added
    function concat(Traversable $input); 
}

class Collection implements Concatable {
    // accepts all iterables, not just Traversables
    function concat(iterable $input) {/* . . . */}
}
</PHP>



===== Backward Incompatible Changes =====
There are no intended incompatibilities. All incompatibilities should be reported and treated as bugs.

===== RFC Impact To Existing Extensions ====
TODO: New functions and macros should be introduced to make working with variant types in C easier.

===== Proposed PHP Versions =====
This RFC targets PHP 7.NEXT because it does not have any known compatibility issues.

===== Voting =====
This RFC requires two-thirds of voters to select "yes" for this RFC to pass.

<doodle title="Accept Covariant Returns and Contravariant Parameters?" auth="levim" voteType="single" closed="true">
   * Yes
   * No
</doodle>

===== Future Scope =====
A future RFC may consider other super-types for existing types:

  * ''mixed'': includes all types that exist or will ever exist including null; this matches our usage of mixed in our documentation.
  * ''scalar'': includes bool, int, float, and string; this matches our ''is_scalar'' function.
  * ''numeric'': this probably needs even more discussion because ''is_numeric'' does not deal exclusively with types: it also checks string values.

===== Patches and Tests =====
TODO: publish WIP branch.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged into
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
  - a link to the language specification section (if any)

===== References =====
Links to external references, discussions or RFCs.
