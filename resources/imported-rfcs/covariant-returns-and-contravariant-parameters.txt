====== PHP RFC: Covariant Returns and Contravariant Parameters ======
  * Version: 0.2
  * Date: 2018-04-29
  * Author: Levi Morrison <levim@php.net>
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters

===== Introduction =====
Currently PHP has mostly invariant parameter types and mostly invariant return types. However, we do special case a few things such as removing a type constraint on a parameter or adding one where one didn't exist for a return type; here is an example of both cases:

<PHP>interface A {
  function m(B $z);
}
interface B extends A {
  // permitted
  function m($z): A;
}</PHP>

However, we are unable to choose less specific parameter types or more specific return types otherwise:

<PHP>interface X {
  function m(Y $z): X;
}
interface X extends Y {
  // not permitted but type-safe
  function m(X $z): Y;
}</PHP>

This RFC proposes to support these additional cases.

===== Proposal =====
When determining the compatibility of an overridden method with its parents the engine should now permit less specific parameter types and more specific return types. 

===== Backward Incompatible Changes =====
There are no intended incompatibilities. All incompatibilities should be reported and treated as bugs.

===== RFC Impact To Existing Extensions ====
TODO: New functions and macros should be introduced to make working with variant types in C easier.

===== Proposed PHP Versions =====
This RFC targets PHP 7.3 because it does not have any known compatibility issues.

===== Voting =====
This RFC requires two-thirds in the affirmative for this RFC to pass because it directly affects the behavior of the language.

===== Future Scope =====
A future RFC may consider other super-types for existing types:

  * ''mixed'': includes all types that exist or will ever exist including null; this matches our usage of mixed in our documentation.
  * ''scalar'': includes bool, int, float, and string; this matches our ''is_scalar'' function.
  * ''numeric'': this probably needs even more discussion because ''is_numeric'' does not deal exclusively with types: it also checks string values.

===== Patches and Tests =====
TODO: publish WIP branch.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged into
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
  - a link to the language specification section (if any)

===== References =====
Links to external references, discussions or RFCs.
