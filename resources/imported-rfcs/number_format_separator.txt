====== PHP RFC: Number Format Separator ======
  * Version: 1
  * Date: 2015-12-19
  * Author: Thomas Punt, tpunt@php.net
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/number_format_separator


===== Introduction =====
Long numerical literals can be a source of poor readability in code. Take the following examples:
<code php>
197823459; // what number is this?
97802345932 > 97802349532; // which number is greater?
9803458239 === 9803457239; // are these numbers equal?
</code>

These are difficult to read and difficult reason about. To ameliorate this issue, this RFC proposes the introduction of a digit separator in numerical literals. This will enable for the above examples to be rewritten as:
<code php>
197_823_459; // what number is this?
97_802_345_932 > 97_802_349_532; // which number is greater?
9_803_458_239 === 9_803_457_239; // are these numbers equal?
</code>


===== Proposal =====
This RFC will add support for using the underscore character as a separator in PHP's numerical literals. The separator will be supported by all numerical types and notations in PHP.

Example:
<code php>
1_000_000; // versus 1000000
3.141_592; // versus 3.141592
0x02_56_12; // versus 0x025612
0b0010_1101; // versus 0b00101101
0267_3432; // versus 02673432
</code>

==== Chosen Semantics ====

=== Disallow Leading Underscores ===

Leading underscores will not enhance readability and will conflict with constant naming conventions.
<code php>
_100; // a valid constant in PHP
</code>

=== Disallow Trailing Underscores ===

Trailing underscores will not enhance readability (if anything, they will decrease).
<code php>
100_; // PHP Parse error:  syntax error, unexpected '_' (T_STRING) in ...
</code>

=== Disallow Adjacent Underscores ===

Allowing for two or more underscores to be placed together will provide no further readability benefits.
<code php>
1__000; // PHP Parse error:  syntax error, unexpected '__000' (T_STRING) in
</code>

=== Enable Underscores Between Digits Only ===

Underscores are not allowed around the period for floats, around the **0x** for hexadecimal numbers, or around the **0b** for binary numbers. Other than that, they may be freely interspersed between arbitrary groups of digits. This enables for the developer to group the digits as they see fit.
<code php>
100_.0; // PHP Parse error:  syntax error, unexpected '_' (T_STRING) in...
100._01; // PHP Parse error:  syntax error, unexpected '_01' (T_STRING) in...
0x_0123; // PHP Parse error:  syntax error, unexpected 'x_0123' (T_STRING) in...
0b_0101; // PHP Parse error:  syntax error, unexpected 'b_0101' (T_STRING) in...

100_000; // interpreted as 100000
10_0.0_112; // interpreted as 100.0112
0b01_10_11_00; // interpreted as 0b01101100
</code>


==== Why the Underscore Character? ====
The underscore has been chosen because of its wide usage in other languages for formatting numerical literals.

The following languages all use an underscore:
  * Ada
  * D
  * Java
  * Julia
  * Perl
  * C#
  * Ruby
  * Elixir

Few other languages have deviated from using the underscore to separate digits. One notable language that has deviated is C++, where it could not use an underscore because of conflicts with user-defined literals (specifically in a hexadecimal context). Because PHP does not have such user-defined literals, there are no technical problems with using the underscore as a digit separator in PHP. This proposal therefore seeks to follow suite with the other languages.

==== Why no Support for Stringy Numerics? ====
This RFC does not include stringy numerics because of the BC breakage involved. It will cause the coercion rules for strings to integers to change, which may potentially have wide-ranging impacts for PHP programs. If formatting stringy integer literals is desired, then support for these can be done in the next major version of PHP.

===== Backward Incompatible Changes =====
There are no BC breaks with this feature.

===== Proposed PHP Version(s) =====
PHP 7.1

===== RFC Impact =====
==== To SAPIs ====
No impact.

==== To Existing Extensions ====
No impact.

==== To Opcache ====
No impact.

==== New Constants ====
No impact.

==== php.ini Defaults ====
No impact.

===== Open Issues =====
None so far.

===== Future Scope =====
Support for stringy numerics could be added in the next major version.

===== Proposed Voting Choices =====
A simple yes/no voting option with a 2/3 majority required.

===== Patches and Tests =====
A patch has been made - this part will be updated soon.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== References =====
Previous discussion on separators for numerical literals: https://marc.info/?l=php-internals&m=142431171323037&w=2
Current discussion: to be updated...

===== Rejected Features =====
Keep this updated with features that were discussed on the mail lists.