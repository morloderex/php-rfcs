====== Allow Non-Scalar Keys ======
  * version 1.0
  * Date: 2013-01-28
  * Author: Levi Morrison <levim@php.net>
  * Status: Under Discussion

===== Introduction =====

Implementing the [[http://php.net/manual/en/class.iterator.php|Iterator]] interface allows a class to define the necessary things to use that class as an iterator.  The biggest use-case for implementing the Iterator interface is that it interacts with a foreach loop in a custom way. There are currently limitations on what you can use as the ''key'' part of the iterator:

<code php>
<?php

// $key cannot be an object or array
foreach($object as $key => $value) {

}
</code>

If you implement the iterator interface and return an object or array for the key, you get this error: ''Warning: Illegal type returned from MapIterator::key() in ...''

===== Example Iterator =====
<code php>
<?php

class MapIterator implements Iterator {
    protected $vals = [];
    protected $keys = [];
    protected $index = 0;

    function __construct(array $keys, array $values) {
        $this->keys = $keys;
        $this->vals = $values;
    }

    function rewind() {
        $this->index = 0;
    }

    function valid() {
        return $this->index < count($this->keys) && $this->index >=0;
    }

    function key() {
        return $this->keys[$this->index];
    }

    function current() {
        return $this->vals[$this->index];
    }

    function next() {
        $this->index++;
    }

}

$requestA = new StdClass;
$requestA->startLine = 'GET / HTTP/1.1';
$requestA->headers = ['Host' => 'www.php.net'];

$responseA = new StdClass;
$responseA->startLine = 'HTTP/1.1 200 OK';
$responseA->headers = [];

$requestB = new StdClass;
$requestB->startLine = 'GET /login HTTP/1.1';
$requestB->headers = ['Host' => 'www.php.net'];

$responseB = new StdClass;
$responseB->startLine = 'HTTP/1.1 302 Found';
$responseB->headers = ['Location' => 'http://www.php.net/account/login'];

$requests = [$requestA, $requestB];
$responses = [$responseA, $responseB];

$mapIterator = new MapIterator(
    $requests,
    $responses
);

foreach ($mapIterator as $request => $response) {
    var_dump($request);
    var_dump($response);
}
</code>

===== Proposal and Patch =====

I propose that we lift the restriction that forces a scalar value. Instead we simply assign the key variable to whatever was returned from the iterator. The warning will also be removed. This also opens the possibility to use arrays as keys returned from an iterator, and as such I feel we should also add support for `list` in the keys.

There is no patch at this time. I know Ekneuss was working on something but hasn't had time to finish. I also don't know how closely his patch matches up with this proposal, either.

===== Changelog =====

version 1.0:
  * proposed
