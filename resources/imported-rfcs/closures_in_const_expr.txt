====== PHP RFC: Support Closures in constant expressions ======
  * Version: 0.9
  * Date: 2024-10-24
  * Author: Tim DÃ¼sterhus, tim@tideways-gmbh.com
  * Status: Draft
  * First Published at: https://wiki.php.net/rfc/closures_in_const_expr

This is a suggested template for PHP Request for Comments (RFCs). Change this template to suit your RFC.  Not all RFCs need to be tightly specified.  Not all RFCs need all the sections below.
Read https://wiki.php.net/rfc/howto carefully!


Quoting [[http://news.php.net/php.internals/71525|Rasmus]]:

> PHP is and should remain:
> 1) a pragmatic web-focused language
> 2) a loosely typed language
> 3) a language which caters to the skill-levels and platforms of a wide range of users

Your RFC should move PHP forward following his vision. As [[http://news.php.net/php.internals/66065|said by Zeev Suraski]] "Consider only features which have significant traction to a
large chunk of our userbase, and not something that could be useful in some
extremely specialized edge cases [...] Make sure you think about the full context, the huge audience out there, the consequences of  making the learning curve steeper with
every new feature, and the scope of the goodness that those new features bring."

===== Introduction =====
The elevator pitch for the RFC. The first paragraph of this section will be slightly larger to give it emphasis; please write a good introduction.

===== Proposal =====

It shall be legal to include Closures in constant expressions. This includes:

  * Attributes.
  * Default Values of Properties, Parameters, and static variables.
  * Constants and Class Constants.

Closures placed in constant expressions are subject to the following constraints:

  * They must not include variables from the surrounding scope using <php>use($foo, $bar)</php>, because constant expressions are evaluated at compile time, thus there is no surrounding scope.
  * They must be <php>static</php> (and thus they must not access <php>$this</php>). Semantically <php>$this</php> would only be well-defined in default values for properties and possibly attributes, but this would require reevaluating the Closure for each object / attribute instance, which would be different to existing constant expressions which are only evaluated once. For this reason this is left to future scope.

==== Use Cases ====

Custom field validation for an attribute-based object validation library:

<PHP>
class Locale
{
    #[Validator\Custom(static function (string $languageCode): bool {
        return preg_match('/^[a-z][a-z]$/', $languageCode);
    })]
    public string $languageCode;
}
</PHP>

Testcase generation for a testing library:

<PHP>
class CalculatorTest
{
    #[Test\CaseGenerator(static function (): iterable {
        for ($i = -10; $i <= 10; $i++) {
            yield [$i, $i, 0];
            yield [$i, 0, $i];
            yield [0, $i, ($i * -1)];
        }
    })]
    public function testSubtraction(int $minuend, float $subtrahend, int $result)
    {
        assert(Calculator::subtract($minuend, $subtrahend) === $result);
    }
}
</PHP>


===== Backward Incompatible Changes =====

As with every RFC that changes what previously was a compile error to be valid PHP code, this RFC requires changes to static analyzers and IDEs to correctly understand the semantics of the code and not erroneously report errors.

===== Proposed PHP Version(s) =====

Next PHP 8.x (8.5).

===== RFC Impact =====

==== To SAPIs ====

None.

==== To Existing Extensions ====

None.

==== To Opcache ====

Opcache needs to be adjusted to correctly store Closures in constant expressions in SHM. The PoC PR includes the necessary Opcache changes and passes all tests with Opcache / JIT enabled.

==== New Constants ====

None.

==== php.ini Defaults ====

None.

===== Open Issues =====

n/a

===== Unaffected PHP Functionality =====

List existing areas/features of PHP that will not be changed by the RFC.

This helps avoid any ambiguity, shows that you have thought deeply about the RFC's impact, and helps reduces mail list noise.

===== Future Scope =====

  * Support non-static Closures.
  * Support first-class callables.

===== Proposed Voting Choices =====

<doodle title="Support Closures in constant expressions as proposed?" auth="timwolla" voteType="single" closed="true" closeon="2024-06-05T08:00:00Z">
   * Yes
   * No
</doodle>

===== Patches and Tests =====

https://github.com/php/php-src/pull/16458

===== Implementation =====

n/a

===== References =====


  * https://github.com/php/php-src/pull/16458

===== Rejected Features =====

n/a