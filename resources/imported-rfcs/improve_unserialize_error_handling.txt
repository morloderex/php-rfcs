====== PHP RFC: Improve unserialize() error handling ======
  * Version: 0.9
  * Date: 2022-09-01
  * Author: Tim Düsterhus, timwolla@php.net
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/improve_unserialize_error_handling


===== Introduction =====

PHP's current error reporting in <php>unserialize()</php> is very inconsistent, making it hard to reliably handle errors that occur during unserialization.



===== Proposal =====

The proposed solution to the described problem consists of two parts:

==== New UnserializationFailedException ====

A new <php>\UnserializationFailedException</php> will be added. Whenever a <php>\Throwable</php> is thrown during <php>unserialize</php> (e.g. within an <php>__unserialize()</php> handler or because a throwing error handler converts Notices/Warnings into an Exception), this <php>\Throwable</php> will be wrapped into a new instance of <php>\UnserializationFailedException</php>.

This allows a developer to use <php>catch(\UnserializationFailedException)</php> (a) to catch all <php>\Throwable</php>s happening during unserialization and (b) to catch only <php>Throwable</php>s during unserialization without also catching unrelated <php>\Throwable</php>s.

The original throwable will be made available as the <php>$previous</php> property of <php>\UnserializationFailedException</php>, allowing the developer to learn about the actual cause of the unserialization failure.

Translated into simplified PHP code, the <php>unserialize()</php> implementation could look roughly like this with the proposal implemented:

<PHP>
function unserialize(string $data, array $options = []): mixed
{
    try {
        // The existing unserialization logic happens here.
    } catch (\Throwable $e) {
        throw new \UnserializationFailedException(previous: $e);
    }
}
</PHP>

==== Increase the error reporting severity in the unserialize() parser ====

Apart from unserialize handlers (e.g. <php>__unserialize()</php>) throwing, unserialization can also fail due to a syntax error in the input string and due to out-of-range integers and similar issues.

Currently these cases will not throw. Instead an <php>E_NOTICE</php> or an <php>E_WARNING</php> (or both!) are emitted depending on the type of error.

The type of error should be unified, because the cases that emit an <php>E_NOTICE</php> are not any more or less actionable by the developer than the cases that emit <php>E_WARNING</php>.

Specifically the severity should be increased, because unserialization failing commonly implies that an untrusted input string is passed into <php>unserialize()</php> which is not something that should be done in the first place, as unserializing arbitrary classes might allow for remote code execution.

At the very least the <php>E_NOTICE</php> cases should be adjusted to emit an <php>E_WARNING</php> instead to consistently emit a <php>E_WARNING</php>.

However changing both <php>E_NOTICE</php> and <php>E_WARNING</php> to throw the new <php>\UnserializationFailedException</php> might be a better solution. For applications that use a throwing error handler, the <php>Throwable</php> thrown by the error handler for the <php>E_NOTICE</php> / <php>E_WARNING</php> will be handled by the previously described mechanism and wrapped into <php>\UnserializationFailedException</php>, thus this only affects applications that do not use a throwing error handler.

For these applications throwing an <php>\UnserializationFailedException</php> might be a steep increase in severity, however these applications already need to be prepared to handle <php>Throwable</php>s thrown from an unserialize handler. The fact that an unserialization failure commonly indicates something unsafe also warrants that the operation fails “loudly”, instead of silently continuing.

===== Backward Incompatible Changes =====

==== Addition of a new exception class ====

The UnserializationFailedException will no longer be available. The query <code>symbol:UnserializationFailedException language:php</code> in GitHub's Code Search did not return any non-namespaced results, making this a theoretical issue.

==== Existing error handling for unserialize() might need to be updated ====

This is not considered an issue, because due to the inconsistency in error handling, the only safe solution to handle all possible errors during <php>unserialize()</php> is <php>catch(Throwable)</php>. This continues to work as-is.

Every other solution is already broken in the face of untrusted input data, because (internal) classes can and will throw various types of <php>Exception</php> and <php>Error</php>. Examples of this include:

  * <php>@unserialize()</php> (will fail if a class throws).
  * <php>catch(Exception)</php> (will fail for ext/date which throws <php>Error</php>s).
  * <php>catch(Error)</php> (will fail for various extensions which throw <php>Exception</php> or <php>UnexpectedValueException</php>).

Nothing will change for unserializing trusted, well-formed input strings, because they won't fail.

===== Proposed PHP Version(s) =====

Next PHP 8.x.

===== RFC Impact =====

==== To SAPIs ====

None.

==== To Existing Extensions ====

Existing extensions should update their error handling in the unserialize handlers to emit an error message that is most useful to the user.


==== To Opcache ====

None.

==== New Constants ====

None.

==== php.ini Defaults ====

None.

===== Open Issues =====

None.

===== Unaffected PHP Functionality =====


Anything that does not interact with <php>unserialize()</php>. Developers who interact with <php>__unserialize()</php>, <php>__wakeup()</php>, and <php>Serializable::unserialize()</php> might affected depending on what exactly they are doing with those.

===== Future Scope =====

None.

===== Proposed Voting Choices =====

==== Adding a generic Exception ====

<doodle title="Add the UnserializationFailedException?" auth="timwolla" voteType="single" closed="false" closeon="2022-01-01T00:00:00Z">
   * Yes
   * No
</doodle>

==== Increasing the severity of existing warnings / notices ====

<doodle title="Increase the severity for syntax errors in the serialized payload?" auth="timwolla" voteType="single" closed="false" closeon="2022-01-01T00:00:00Z">
   * Yes
   * No
</doodle>

If the previous vote is accepted, then:

<doodle title="Increase the severity of errors in serialized payload to?" auth="timwolla" voteType="single" closed="false" closeon="2022-01-01T00:00:00Z">
   * UnserializationFailedException
   * Warning
</doodle>

===== Patches and Tests =====

PoC: https://github.com/php/php-src/pull/9425

===== Implementation =====

n/a

===== References =====

  * https://externals.io/message/118311
  * https://github.com/php/php-src/pull/9425

===== Rejected Features =====

n/a