====== PHP RFC: Improve unserialize() error handling ======
  * Version: 0.9
  * Date: 2022-09-01
  * Author: Tim DÃ¼sterhus, timwolla@php.net
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/improve_unserialize_error_handling


===== Introduction =====

tbd

===== Proposal =====

tbd

===== Backward Incompatible Changes =====

==== Addition of a new exception class ====

The UnserializationFailedException will no longer be available. The query <code>symbol:UnserializationFailedException language:php</code> in GitHub's Code Search did not return any non-namespaced results, making this a theoretical issue.

==== Existing error handling for unserialize() might need to be updated ====

This is not considered an issue, because due to the inconsistency in error handling, the only safe solution to handle all possible errors during <php>unserialize()</php> is <php>catch(Throwable)</php>. This continues to work.

Every other solution is already broken in the face of untrusted input data, because (internal) classes can and will throw various types of <php>Exception</php> and <php>Error</php>. Examples of this include:

  * <php>@unserialize()</php> (will fail if a class throws).
  * <php>catch(Exception)</php> (will fail for ext/date which throws <php>Error</php>s).
  * <php>catch(Error)</php> (will fail for various extensions which throw <php>Exception</php> or <php>UnexpectedValueException</php>).

Nothing will change for unserializing trusted, well-formed input strings, because they won't fail.

===== Proposed PHP Version(s) =====

Next PHP 8.x.

===== RFC Impact =====

==== To SAPIs ====

None.

==== To Existing Extensions ====

Existing extensions should update their error handling in the unserialize handlers to emit an error message that is most useful to the user.


==== To Opcache ====

None.

==== New Constants ====

None.

==== php.ini Defaults ====

None.

===== Open Issues =====

None.

===== Unaffected PHP Functionality =====


Anything that does not interact with <php>unserialize()</php>. Developers who interact with <php>__unserialize()</php>, <php>__wakeup()</php>, and <php>Serializable::unserialize()</php> might affected depending on what exactly they are doing with those.

===== Future Scope =====

None.

===== Proposed Voting Choices =====

==== Adding a generic Exception ====

<doodle title="Add the UnserializationFailedException?" auth="timwolla" voteType="single" closed="false" closeon="2022-01-01T00:00:00Z">
   * Yes
   * No
</doodle>

==== Increasing the severity of existing warnings / notices ====

<doodle title="Increase the severity for syntax errors in the serialized payload?" auth="timwolla" voteType="single" closed="false" closeon="2022-01-01T00:00:00Z">
   * Yes
   * No
</doodle>

If the previous vote is accepted, then:

<doodle title="Increase the severity of errors in serialized payload to?" auth="timwolla" voteType="single" closed="false" closeon="2022-01-01T00:00:00Z">
   * UnserializationFailedException
   * Warning
</doodle>

===== Patches and Tests =====

PoC: https://github.com/php/php-src/pull/9425

===== Implementation =====

n/a

===== References =====

  * https://externals.io/message/118311
  * https://github.com/php/php-src/pull/9425

===== Rejected Features =====

n/a