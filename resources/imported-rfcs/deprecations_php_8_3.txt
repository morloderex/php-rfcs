====== PHP RFC: Deprecations for PHP 8.3 ======
  * Date: 2022-08-01
  * Author: Christoph M. Becker <cmb@php.net>
  * Status: Draft

===== Introduction =====

The RFC proposes to deprecate the listed functionality in PHP 8.3 and remove it in PHP 9.

The following list provides a short overview of the functionality targeted for deprecation, while more detailed explanation is provided in the Proposal section:

  * Passing negative ''$width''s to ''mb_strimwidth()''


===== Proposal =====

Each feature proposed for deprecation is voted separately and requires a 2/3 majority. All votes refer to deprecation in PHP 8.3 and removal in PHP 9.0.

==== Passing negative $widths to mb_strimwidth() ====

Regarding the ''$width'' argument of ''mb_strimwidth()'', the PHP manual states: "Negative widths count from the end of the string." In other words, if ''$width'' is -2, then either two halfwidth characters or one fullwidth character should be trimmed from the end of the string.

This feature was introduced in git revision 70187267b4 (January 2016), and was contributed by Francois Laupretre <francois@php.net>.

Although I have not seen anything written by F. Laupretre to explain what the anticipated usage of the feature was, it seems to have very limited utility. ''mb_strimwidth()'' is typically used to trim strings down to a length which can be printed in a terminal without wrapping. It seems very unusual that anyone would want to set the terminal width of a string to "its current value less N". (One possibility is that the feature was introduced for consistency with other standard library functions which accept a negative argument to indicate "count back from the end of a string".)

From the time the feature was merged until now, it has always had a bug when combined with a non-zero ''$from'' argument. The implementation does arithmetic which combines //codepoint counts// with //terminal width counts//, with erroneous results. (This is just like the proverbial "apples and oranges".) If there are any fullwidth characters in the prefix which is skipped because of non-zero ''$from'', then ''mb_strimwidth()'' will not trim the requested width from the end of the string.

It is notable that in 9 years, no user ever noticed and reported this bug. My guess is that almost no-one uses the negative width feature. This would explain why the bug was not noticed.

To implement the feature correctly, without the bug mentioned above, an extra pass over the prefix of the input string identified by ''$from'' would be needed to determine its terminal width. This operation requires O(n) time.

When preparing this RFC, I searched the Internet for existing open-source software which uses ''mb_strimwidth()'' and reviewed over 100 such projects. None of them used negative ''$width'' arguments. However, if readers are aware of existing projects which rely on the negative ''$width'' feature, please add that information here.

==== The NumberFormatter::TYPE_CURRENCY constant ====

This constant is unused since it was added to PHP (in PHP 5.3 or before), likely it was meant to call <php>NumberFormatter::formatCurrency()</php>/<php>NumberFormatter::parseCurrency()</php> from <php>NumberFormatter::format()</php>/<php>NumberFormatter::parse()</php> respectively.
However, this was never implemented, likely because there is no way to pass the necessary currency argument.

===== Backward Incompatible Changes =====

For PHP 8.3 additional deprecation notices will appear. For PHP 9.0 the previously deprecated functionality will no longer be available.

