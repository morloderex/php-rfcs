====== PHP RFC: instance counter ======

  * Version: 0.1
  * Date: 2013-04-08
  * Author: Frank Liepert, contact@frank-liepert.de
  * Contributor: Joe Watkins
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/instance_counter

===== Introduction =====

Coming to Object-Orientated Programming, PHP offers a variety of possibilities to obtain information about classes and their instances (objects). In this regard, the classes/objects functions (http://www.php.net/manual/en/ref.classobj.php) as well as the reflection API (http://www.php.net/manual/en/book.reflection.php) do a great job. But still there is no function to obtain a particular information: the number of instances of a class. 

One might say, simply implement a static counter in each class. But what about built-in classes like SPL? A wrapper would be required. Implementing it these ways, it does not only sound, but it actually is cumbersome. The purpose of this RFC is to address this issue.

===== Proposal =====

The proposal is to add a new function returning an array ('name of the class' => number of instances) in the current script.

The function name should fit in with the current names of class/object functions. Therefore, the name **get_instances_counts()** seems to be reasonable, but is still up for discussion (see [[#Naming of function/method]]).

Example #1:
<code php>
print_r (get_instances_counts());
// Array ()

$foo = new StdClass;

print_r (get_instances_counts());
// Array ( [StdClass] => 1 )

$bar = new StdClass;

print_r (get_instances_counts());
// Array ( [StdClass] => 2 )
</code>

===== A candidate for reflection API? =====

Furthermore, it need to be clarified, if the number of instances of a class is an information allowing you to reflect on a class or not?

  * Answering with no, you should agree with this proposal not belonging to the reflection API.

  * Answering with yes, things are getting a bit more complicated. There are different imaginable scenarios:

==== Reflection API only (Reflection) ====

//Instead of// get_instances_counts(), there would be a public static function in **Reflection**. 

The code from example #1 changes as follows (note the CamelCase instead of underscores):

Example #2:
<code php>
print_r (Reflection::getInstancesCounts());
// Array ()

$foo = new StdClass;

print_r (Reflection::getInstancesCounts());
// Array ( [StdClass] => 1 )

$bar = new StdClass;

print_r (Reflection::getInstancesCounts());
// Array ( [StdClass] => 2 )
</code>

==== Reflection API (ReflectionClass) + class/object function ====

**Big Issue:** ReflectionClass accepts an object as argument. An instance counter of an object is nonsense. (Why does ReflectionClass accept an object, if there is ReflectionObject?)

The code in example #1 stays unchanged. In addition, ReflectionClass provides a method to get the counter of a particular class:

Example #3:
<code php>
$reflection = new ReflectionClass('StdClass');
print $reflection->getInstanceCounter();
// 0

$foo = new StdClass;

print $reflection->getInstanceCounter();
// 1

$bar = new StdClass;

print $reflection->getInstanceCounter();
// 2
</code>

===== Naming of function/method =====

Further suggestions for the function name in example #1 and indirectly the method name in example #2 (with the difference, that it is CamelCase).
<code>
// Proposed
get_instances_counts()

// Alternatives
get_objects_count()
get_instances_count()
get_instance_counts()
get_object_store_count()
get_class_counts() 
</code>

For the method name in example #3 the following suggestions are up for discussion:
<code>
// Proposed
getInstanceCounter()

// Alternatives
getInstanceCount()
</code>

Please consider, that in example #1 and example #2 arrays are returned. Thus, plural forms like "instance__s__" or" count__s__" might be more exact, even if an array can theoretically contain only one element.

In contrast, the method in example #3 refers to __a__ particular class. So, the singular form is appropriate.

===== Backward Incompatible Changes =====

No BC breaks.

===== Proposed PHP Version(s) =====

next PHP 5.4.x or PHP 5.5.x

===== SAPIs Impacted =====

None.

===== Impact to Existing Extensions =====

None.

===== New Constants =====

None.

===== php.ini Defaults =====

None.

===== Open Issues =====

  * Decision on function name.
  * Decision on whether it should be in Reflection.

===== Unaffected PHP Functionality =====

?

===== Future Scope =====

?

===== Proposed Voting Choices =====

?

===== Patches and Tests =====

A first implementation: https://gist.github.com/krakjoe/5275773

Reflection patch: https://gist.github.com/krakjoe/5335139

Tests need to be done.

===== References =====

  * https://gist.github.com/krakjoe/5275773
  * https://gist.github.com/krakjoe/5335139
  * http://www.php.net/manual/en/ref.classobj.php
  * http://www.php.net/manual/en/book.reflection.php

===== Rejected Features =====

- None.