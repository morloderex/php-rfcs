====== PHP RFC: Fix inconsistent behavior of $this variable ======
  * Version: 0.9
  * Date: 2016-05-23
  * Author: Dmitry Stogov, dmitry@zend.com
  * Status: Under Discussion
  * First Published at: https://wiki.php.net/rfc/this_var

===== Introduction =====
Historically PHP implementation accessed special $this variable using two different methods. In some cases this might lead to significant inconsistency, when $this accessed through different methods might have different values.

<code php>
class C {
  function foo() {
    var_dump($this);
  }
  function bar() {
    $a="this";
    $$a=42;
    var_dump($this); // prints int(42)
    $this->foo();    // prints object(C)#1 (0) {}
  }
}
$x = new C;
$x->bar();
</code>

This RFC proposes disabling modification of $this variable using "magic code" and make $this always behave in the same way.

===== Proposal =====

==== Disable using $this as parameter ====

The following code worked in PHP 7, but will emit compilation error in PHP 7.1

<code php>
function foo($this) { // Fatal error: Cannot use $this as parameter
}
</code>

==== Disable using $this as static variable ====

The following code worked in PHP 7, but will emit compilation error in PHP 7.1

<code php>
static $this; // Fatal error: Cannot use $this as static variable
</code>


==== Disable using $this as global variable ====

The following code worked in PHP 7, but will emit compilation error in PHP 7.1

<code php>
global $this; // Fatal error: Cannot use $this as global variable
</code>

==== Disable using $this as catch variable ====

The following code worked in PHP 7, but will emit compilation error in PHP 7.1

<code php>
try {
  ...
} catch (Exception $this) { // Fatal error: Cannot re-assign $this
}
</code>


==== Disable using $this as foreach value variable ====

The following code worked in PHP 7, but will emit compilation error in PHP 7.1

<code php>
foreach ($a as $this) { // Fatal error: Cannot re-assign $this
}
</code>

==== Disable ability to unset() $this ====

It's not allowed to re-assign $this, so why it should be allowed to unset() it.
The following code worked in PHP 7, but will emit compilation error in PHP 7.1

<code php>
unset($this); // Fatal error: Cannot unset $this
</code>

==== Disable ability to re-assign $this indirectly through $$ ====

An attempt to re-assign $this through $$ assignment will lead to throwing of Error exception.

<code php>
$a = "this";
$$a = 42; // throw new Error("Cannot re-assign $this")
</code>

It's still possible to read $this value through $$.

==== Disable ability to re-assign $this indirectly through reference ====

Indirect re-assign $this through reference won't make effect in PHP 7.1

<code php>
class C {
  function foo(){
    $a =& $this;
    $a = 42;
    var_dump($this); // prints object(C)#1 (0) {}, php-7.0 printed int(42)
  }
}
$x = new C;
$x->foo();
</code>

==== Always show true $this value in magic method __call() ====

In PHP 7.0 and below $this in **static** magic method <nowiki>__call</nowiki>() had value NULL. However it was possible to access properties and call object methods.

<code php>
class C {
  static function __call($name, $args) {
    var_dump($this); // prints object(C)#1 (0) {}, php-7.0 printed NULL
    $this->test();   // prints "ops"
  }
  funcriont test() {
    echo "ops\n"; 
  }
}
$x = new C;
$x->foo();
</code>

===== Backward Incompatible Changes =====
All the BC breaks are intentional and they are described in the proposal section.

===== Proposed PHP Version(s) =====
PHP 7.1

===== RFC Impact =====
==== To SAPIs ====
none

==== To Existing Extensions ====
none

==== To Opcache ====
The proposed implementation is compatible with opcache

===== Open Issues =====
none

===== Proposed Voting Choices =====
The vote is a straight Yes/No vote, that requires a 2/3 majority.
The voting will begin on Jun 6 and will close on Jun 16.

===== Patches and Tests =====
[[https://github.com/php/php-src/pull/1918|PR 1918]]

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== Rejected Features =====
Keep this updated with features that were discussed on the mail lists.