====== PHP RFC: #[NotSerializable] ======
  * Version: 1.0
  * Date: 20123-11-26
  * Author: Max Semenik, maxsem.wiki@gmail.com
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/not_serializable

===== Introduction =====
Some classes aren't supposed to be serialized. Examples include closures, various connections like ''PDO'', etc. Currently, while PHP internal classes have a nice way of preventing being serialized/deserialized, userspace doesn't. I'm proposing to make them equal.

Compare the internals slapping ''ce_flags |= ZEND_ACC_NOT_SERIALIZABLE'' to userspace doing something like this:

<code php>
class MyClass
{
    public function __sleep() // Wait, what it's signature is supposed to be? Does it matter?
    {
        throw new Exception('This class must not be serialized');
    }
    
    public function __wakeup()
    {
        throw new Exception('This class must not be unserialized');
    }
}
</code>

Not only is this method bulky, it also lacks a way for various code analysers to detect attempts to serialize such classes. If course, linters may introduce their own attributes/annotations to catch such mistakes; however various linters 

===== Proposal =====
Introduce new attribute that would expose this functionality to userspace.

<code php>
#[NotSerializable]
class MyClass
{
}

serialize(new MyClass()); // Exception: Serialization of 'MyClass' is not allowed
</code>

This change requires no changes to the engine whatsoever, all functionality is already present - it merely gets exposed.

===== Backward Incompatible Changes =====
The only breaking change is the addition of a new non-namespaced class.

===== Proposed PHP Version(s) =====
8.4.

===== Open Issues =====
Make sure there are no open issues when the vote starts!

===== Proposed Voting Choices =====
Implement this RFC? (Yes/no, 2/3 approval required.)

===== Patches and Tests =====
Links to any external patches and tests go here.

If there is no patch, make it clear who will create a patch, or whether a volunteer to help with implementation is needed.

Make it clear if the patch is intended to be the final patch, or is just a prototype.

For changes affecting the core language, you should also provide a patch for the language specification.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged into
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
  - a link to the language specification section (if any)


===== Rejected Features =====
Keep this updated with features that were discussed on the mail lists.