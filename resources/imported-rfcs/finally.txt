====== Request for Comments: Supports finally keyword ======
  * Version: 1.0
  * Date: 2012/07/24
  * Author: Xinchen Hui <laruence.php.net>
  * Status: Under Discussion
  * First Published at: http://wiki.php.net/rfc/finally

===== Introduction =====
This RFC is try to introduce 'finally' support for exceptions. which is requested from FR #32100, #36779

without this feature, user have to write codes like following one to cleanup in an un-handlable exception occurred:
<code php>
<?php
$db = mysql_connect();
try {
   call_some_function($db);
} catch (Exception $e) {
   mysql_close($db);
   throw $e;
}
mysql_close($db);
</code>

introducing finally is not about save one or two lines for such situation, it's about give the user a more proper way to handle such issue.
===== Proposal =====
The finally block always executes when the try block exits. This ensures that the finally block is executed even if an unexpected exception occurs. But finally is useful for more than just exception handling â€” it allows the programmer to avoid having cleanup code accidentally bypassed by a return, continue, or break. Putting cleanup code in a finally block is always a good practice, even when no exceptions are anticipated.

<code php>
<?php
   try {
     $fp = fopen("/tmp/1.php", "w");
     //error occurred
     throw new Exception($e);
   } finally { 
     fclose($fp);
   }
</code>

the most confuse part is call "return in try/catch block",  in this case the finally block will still be called

<code php>
<?php
  try {
    return 2;
  } finally {
    echo "this will be called\n";
  }
  //this will never be called
  echo "you can not see me";

</code>

the above script will outpu:
<code>
this will be called
//return int(2)
</code>

and for nesting try catch finally:
<code php>
<?php
function foo ($a) {
   try {
      echo "1";
      try {
        echo "2";
        throw new Exception("ex");
      } catch (Exception $e) {
        echo "3";
      } finally {
        echo "4";
        throw new Exception("ex");
      } 
   } catch (Exception $e) {
      echo "3";
   } finally {
      echo "2";
   }
   return 1;
}

var_dump(foo("para"));
</code>

will output:
<code>
123432int(1)
</code>
===== Patch =====
  * Patch: https://github.com/laruence/php-src/tree/finally
  * Examples: https://github.com/laruence/php-src/commit/c79af6b2a08d98a330dd017436685bcbc4c1a01c
===== Changelog =====
  * 2012/07/24 Xinchen Hui: Initial version