====== PHP RFC: Make the iterator_*() family accept all iterables ======
  * Version: 1.0
  * Date: 2022-06-21
  * Author: Tim DÃ¼sterhus, duesterhus@woltlab.com
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/iterator_xyz_accept_array


===== Introduction =====

PHP's iterator_*() family currently only accept <php>\Traversable</php>s (i.e. they reject plain <php>array</php>s). This is unnecessarily limiting.

Specifically this concerns the <php>iterator_to_array()</php>, <php>iterator_count()</php>, and <php>iterator_apply()</php> function. While each of them has an array-specific counterpart, the fact that one needs to choose either the array-specific variant or the everything-but-array variant makes writing code the deals with arbitrary <php>iterable</php>s unnecessarily verbose.

Specifically allowing <php>iterator_to_array()</php> to take an array, makes it much easier to write functions accepting an <php>iterable</php> and processing it using <php>array_map()</php> et al:

<PHP>
function before(iterable $foo) {
    if (!is_array($foo)) {
        $foo = iterator_to_array($foo);
    }

    return array_map(strlen(...), $foo);
}
function after(iterable $foo) {
    $foo = iterator_to_array($foo);

    return array_map(strlen(...), $foo);
}
</PHP>

===== Proposal =====

The <php>$iterator</php> parameter of <php>iterator_to_array()</php>, <php>iterator_count()</php>, and <php>iterator_apply()</php> should be widened from <php>\Traversable</php> to <php>iterable</php> (i.e. to <php>\Traversable|array</php>).

===== Backward Incompatible Changes =====

None, this is a purely type widening change.

===== Proposed PHP Version(s) =====

next PHP 8.x

===== RFC Impact =====

==== To SAPIs ====

none

==== To Existing Extensions ====

none

==== To Opcache ====

none

==== New Constants ====

none

==== php.ini Defaults ====

none

===== Open Issues =====

none

===== Unaffected PHP Functionality =====

Anything that isn't <php>iterator_to_array()</php>, <php>iterator_count()</php>, or <php>iterator_apply()</php>.

===== Future Scope =====

none

===== Proposed Voting Choices =====

Each vote requires a 2/3 majority..

  * Vote 1: Change the type of <php>iterator_to_array()</php>'s <php>$iterator</php> parameter from <php>\Traversable</php> to <php>iterable</php>?
  * Vote 2: Change the type of <php>iterator_count()</php>'s <php>$iterator</php> parameter from <php>\Traversable</php> to <php>iterable</php>?
  * Vote 3: Change the type of <php>iterator_apply()</php>'s <php>$iterator</php> parameter from <php>\Traversable</php> to <php>iterable</php>?

===== Patches and Tests =====

PoC implementation to <php>iterator_to_array</php>: https://github.com/php/php-src/pull/8819

===== Implementation =====

n/a

===== References =====

  * Pre-RFC discussion: https://externals.io/message/117979
  * PoC implementation: https://github.com/php/php-src/pull/8819
  * Similar previous RFC that proposed adding **new** functions with an <php>iterable_*</php> prefix: https://wiki.php.net/rfc/iterable_to_array-and-iterable_count
  * Stack Overflow asking for <php>iterable_to_array()</php>: https://stackoverflow.com/q/44587973/782822

===== Rejected Features =====

none