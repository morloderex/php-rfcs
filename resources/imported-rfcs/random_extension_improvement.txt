====== PHP RFC: Random Extension Improvement ======
  * Version: 0.2
  * Date: 2022-06-16
  * Author: Go Kudo <g-kudo@colopl.co.jp> <zeriyoshi@gmail.com>
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/rng_extension

===== Introduction =====

There are several issues with RFC: Random Extension 5.x that are already in the voting phase due to lack of proper discussion.

Key issues include:

==== Engine implementations are not final ====

The Random Extension has classes that are natively implemented as RNG engines, but they are not marked as final.
This allows classes to be created that inherit from native classes, but as stated in the previous RFC, user-implemented engines are inferior to native classes in terms of execution efficiency. This is true even for inheritance without method overrides, which often leads to confusion.

The extension already provides a Random\Engine interface with a single generate(): string method.
Even if the native classes are made final, it is easy for the user to create an alternative class using delegates.

This is clearly an API design error, and the native implementations of the interface should be marked as final.

==== Randomizer lacks array_rand() replacement method ====

array_rand() uses RNG internally, but there is no alternative method in Randomizer.
As per the previous RFC, this was the intent, but upon further investigation, array_rand() is used by many packages and should probably be drop-in replaceable.

However, the name of the method may need to be reconsidered. How about Randomizer::pickArrayKey(array $array, int $num = 1): int|string|array or something similar?

==== Lacks array_rand() for strings ====

The random function is implemented as a pair of operations on arrays and strings, respectively, but there is currently no string version of array_rand().

Therefore, a new pickString(string $string, int $num): string method corresponding to pickArrayKey() is implement. The process is similar to pickArrayKey() and operates on strings.

The idea came from Tim. As an example, the following can be used to generate arbitrary strings, including color codes:

<code php>
(new \Random\Randomizer())->pickString('0123456789abcdef', 6); // return a random hexadecimal color code.
</code>

==== PCG64 is ambiguous ====

The Random Extension has implemented PCG64 as a new PRNG, but it is officially one variant of PCG64, oneseq-128-xsl-rr-64, and may need to be made more easily understood.

Therefore, change the class name from Random\Engine\PCG64 to Random\Engine\PcgOneseqXslRr64.

==== Mersenne Twister is ambiguous ====

When PCG makes the choice to reflect a more detailed implementation in the name, Random\Engine\MersenneTwister is also an issue at the same time.

Random\Engine\MersenneTwister is precisely an implementation of the MT19937 algorithm.

MT19937 also has an algorithm called MT19937_64 that generates 64-bit values. If for some reason MT19937_64 were to be implemented, the fact that the name Mersenne Twister is already in use could be problematic.

==== PCG is not so famous ====

PCG is a very good algorithm, boasting great randomness and performance.

However, I think its name recognition is in some ways inferior to Vigna's RNG, which started with Xorshift.

Therefore, I reimplement Xoshiro256**, which was previously mentioned as a candidate, and create the class Random\Engine\Xoshiro256StarStar. This will avoid the problem of using the old MT19937 since it is not familiar with PCG.

===== Proposal =====

For each of these issues, we will create a ballot option and make a decision.

==== Engine implementations are not final ====

<doodle title="Engine implementations to final" auth="zeriyoshi" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== Randomizer lacks array_rand() replacement method ====

<doodle title="Implement Randomizer::pickArrayKey(array $array, int $num = 1): int|string|array" auth="zeriyoshi" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== Lacks array_rand() for strings ====

<doodle title="Implement Randomizer::pickString(string $string, int $num): string" auth="zeriyoshi" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== PCG64 is ambiguous ====

<doodle title="Rename Random\Engine\PCG64 to Random\Engine\Pcg64OneseqXslRr64" auth="zeriyoshi" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== Mersenne Twister is ambiguous ====

<doodle title="Rename Random\Engine\MersenneTwister to Random\Engine\MT19937" auth="zeriyoshi" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== PCG is not so famous ====

<doodle title="Implement Random\Engine\Xoshiro256StarStar" auth="zeriyoshi" voteType="single" closed="true">
   * Yes
   * No
</doodle>

===== Backward Incompatible Changes =====

The following names have been reserved and will no longer be available (optional):

  * Random\Engine\Pcg64OneseqXslRr64
  * Random\Engine\Xoshiro256StarStar (optional)
  * Random\Engine\MT19937

===== Proposed PHP Version(s) =====
8.2

===== RFC Impact =====
==== To SAPIs ====
none

==== To Existing Extensions ====
none

==== To Opcache ====
none

==== New Constants ====
none

==== php.ini Defaults ====
none

===== Patches and Tests =====
currently none

===== References =====

  * https://externals.io/message/117939