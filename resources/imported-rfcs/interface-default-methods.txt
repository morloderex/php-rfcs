====== PHP RFC: Interface Default Methods ======
  * Version: 0.9
  * Date: 2022-06-27
  * Author: Levi Morrison, levim@php.net
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/interface-default-methods


===== Introduction =====
Over time, authors sometimes will want to add methods to an interface. Today, this causes breakages. This RFC proposes one way to reduce the scope of breakage.

===== Proposal =====

Interface methods can now provide an implementation.

<PHP>
interface Example {
  // Today, you cannot specify an implementation, only a
  // signature.
  function method1(): void;

  // With this RFC, you can provide an implementation:
  function method2(): void {
    echo __METHOD__, "\n";
  } 
}
</PHP>

==== Default Method Resolution ====

Default methods for interfaces introduce a form of multiple inheritance. How is a method selected?

Java's resolution algorithm looks like this:
  - Class definitions always win. If a class, or a parent class, defines a concrete method, then this will always win over all possible default methods.
  - More specific interfaces take priority over less specific ones. If interfaces ''A'' and ''B'' exist and ''B'' extends ''A'', and both have a default method for the same method, then when a class implements B directly or indirectly the method from ''B'' will take precedence over the method from ''A''.
  - If the above rules fail, then the class needs to implement the method itself, possibly delegating to one of the interfaces.

This RFC proposes the same. However, rule 2 has not yet been implemented so I am unsure how feasible it is.

Here's an example of a class delegating to another method:

<PHP>
interface Interface1 {
    function method1() { echo __METHOD__ . "\n"; }
}

interface Interface2 {
    function method1() { echo __METHOD__ . "\n"; }
}

class Class1 implements Interface1, Interface1 {
    function method1() {
        Interface1::method1();
    }
}

(new Class1())->method1();
</PHP>

===== Backward Incompatible Changes =====
None, as long as you do not use the feature.

===== Proposed PHP Version(s) =====
PHP 8.NEXT.

===== RFC Impact =====

==== To Existing Extensions ====
Modules can specify an interface implementation as well.

==== To Opcache ====
Opcache should also work with this feature.

===== Open Issues =====
Make sure there are no open issues when the vote starts!

===== Future Scope =====
This section details areas where the feature might be improved in future, but that are not currently proposed in this RFC.

===== Proposed Voting Choices =====
Include these so readers know where you are heading and can discuss the proposed voting options.

===== Patches and Tests =====

WIP: https://github.com/php/php-src/compare/master...morrisonlevi:php-src:interface-default-methods

===== Implementation =====

After the project is implemented, this section should contain 
  - the version(s) it was merged into
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
  - a link to the language specification section (if any)

===== References =====
Links to external references, discussions or RFCs

===== Rejected Features =====
Keep this updated with features that were discussed on the mail lists.