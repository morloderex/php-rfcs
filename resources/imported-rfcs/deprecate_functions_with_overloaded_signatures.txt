====== PHP RFC: Deprecate functions with overloaded signatures ======
  * Date: 2023-01-31
  * Author: Máté Kocsis <kocsismate@php.net>
  * Target version: PHP 8.3
  * Status: Draft
  * Implementation:

===== Introduction =====

===== Proposal =====

==== assert_options() ====

''assert_options()'' currently supports two signatures:

<code php>
function assert_options(int $option): mixed {}

function assert_options(int $option, mixed $value): mixed {}
</code>

This RFC proposes to add a new function as a replacement for the 2nd signature in PHP 8.3, and deprecate it in the next to next minor PHP version (possibly PHP 8.4). Finally, calling ''assert_options'' with 2 parameters would become unsupported in the next major PHP version (possibly PHP 9.0), resulting in the following methods:

<code php>
function assert_options(int $option): mixed {}

function assert_set_option(int $option, mixed $value): mixed {}
</code>

<doodle title="Deprecate and then remove the above mentioned signature of assert_options()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== DatePeriod::__construct() ====

''DatePeriod::%%__construct()%%'' currently supports three signatures:

<code php>
class DatePeriod
{
    ...

    public function __construct(DateTimeInterface $start, DateInterval $interval, int $recurrences, int $options = 0) {}

    public function __construct(DateTimeInterface $start, DateInterval $interval, DateTimeInterface $end, int $options = 0) {}

    public function __construct(string $isostr, int $options = 0) {}

    ...
}
</code>

This RFC proposes to add two new factory methods as a replacement for the latter two signatures in PHP 8.3 and deprecate the replaced signatures in the next to next minor PHP version (possibly PHP 8.4). Finally, the deprecated signatures would become unsupported in the next major PHP version (possibly PHP 9.0), resulting in the following methods:

<code php>
class DatePeriod
{
    ...

    public function __construct(DateTimeInterface $start, DateInterval $interval, DateTimeInterface $end, int $options = 0): static {}

    public static function createFromRecurrences(DateTimeInterface $start, DateInterval $interval, int $recurrences, int $options = 0): static {}

    public static function createFromIso8601(string $specification, int $options = 0): static {}

    ...
}
</code>

<doodle title="Deprecate and then remove the above mentioned signatures of DatePeriod::__construct()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>


==== imagegd2() ====

''imagegd2()'' currently supports two signatures:

<code php>
function imagegd2(GdImage $image, ?string $file = null, int $chunk_size = 128, int $mode = IMG_GD2_RAW): bool {}

function imagegd2(GdImage $image, ?string $file = null, int $chunk_size = 128, int $mode = IMG_GD2_RAW): bool {}
</code>

This RFC proposes to add a new function as a replacement for the 2nd signature in PHP 8.3, and deprecate it in the next to next minor PHP version (possibly PHP 8.4). Finally, calling ''assert_options'' with 2 parameters would become unsupported in the next major PHP version (possibly PHP 9.0), resulting in the following methods:

<code php>
function imagegd2(GdImage $image, ?string $file = null, int $chunk_size = 128, int $mode = IMG_GD2_RAW): bool {}
</code>

<doodle title="Deprecate and then remove the above mentioned signature of imagegd2()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== IntlCalendar::set() ====

''IntlCalendar::set()'' currently supports two signatures:

<code php>
class IntlCalendar
{
    ...

    public function set(int $field, int $value): bool(int $field, int $value) {}

    public function set(int $year, int $month, int $dayOfMonth = null, int $hour = null, int $minute = null, int $second = null): bool {}

    ...
}
</code>

It's important to note that it's not possible call ''IntlCalendar::set()'' with 4 arguments, as the ICU library which is triggered under the hood [[https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/classicu_1_1Calendar.html#afb3dbfabf06d5cc6f6b0127061c09b61|neither supports it]].

This RFC proposes to add two new methods as a replacement for the second signature in PHP 8.3 and deprecate calling the ''set()'' method with more than two arguments in the next to next minor PHP version (possibly PHP 8.4). Finally, the deprecated signature would become unsupported in the next major version (possibly PHP 9.0), resulting in the following methods:

<code php>
class IntlCalendar
{
    ...

    public function set(int $field, int $value): bool {}

    public function setDate(int $year, int $month, int $dayOfMonth): void {}
    
    public function setDateTime(int $year, int $month, int $dayOfMonth, int $hour, int $minute, ?int $second = null): void {}

    ...
}
</code>

Please note that the newly added methods have a ''void'' return type. This is possible because ''IntlCalendar::set()'' always returns ''true''.

As ''IntlCalendar::set()'' is an alias of ''intlcal_set()'', the deprecation and then the removal would apply to the function as well. Since the procedural-style API of the intl extension is [[https://externals.io/message/114473#114673|considered legacy]], this RFC proposes to deprecate ''intlcal_set()'' as of the next to next PHP version (possibly PHP 8.4), and remove it in the next major PHP version (possibly PHP 9.0).

<doodle title="Deprecate and remove the above mentioned signatures of IntlCalendar::set() and intlcal_set()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== IntlGregorianCalendar::__construct() ====

''IntlGregorianCalendar::%%__construct()%%'' currently supports three signatures:

<code php>
class IntlGregorianCalendar
{
    ...

    public function __construct(IntlTimeZone|DateTimeZone|string|null $timezone = null, ?string $locale = null) {}

    public function __construct(int $year, int $month, int $dayOfMonth) {}

    public function __construct(int $year, int $month, int $dayOfMonth, int $hour, int $minute, ?int second = null) {}

    ...
}
</code>

It's important to note that it's not possible call ''%%IntlGregorianCalendar::__construct()%%'' with 4 arguments, as the ICU library which is triggered under the hood [[https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/classicu_1_1GregorianCalendar.html#aef388a4067f3c53f3fa38068c8be012d|neither supports it]].

This RFC proposes to add two new static methods as a replacement for the latter two signatures in PHP 8.3 and deprecate calling the constructor with more than two arguments in the next to next minor PHP version (possibly PHP 8.4). Finally, the deprecated signatures would become unsupported in the next major version (possibly PHP 9.0), resulting in the following methods:

<code php>
class IntlGregorianCalendar
{
    ...

    public function __construct(IntlTimeZone|DateTimeZone|string|null $timezone = null, ?string $locale = null) {}

    public static function createFromDate(int $year, int $month, int $dayOfMonth): static {}

    public static function createFromDateTime(int $year, int $month, int $dayOfMonth, int $hour, int $minute, ?int second = null): static {}

    ...
}
</code>

As the constructor is an alias of ''intlgregcal_create_instance()'', the deprecation and then the removal would apply to the function as well. Since the procedural-style API of the intl extension is [[https://externals.io/message/114473#114673|considered legacy]], this RFC proposes to deprecate ''intlgregcal_create_instance()'' as of the next to next PHP version (possibly PHP 8.4), and remove in the next major PHP version (possibly PHP 9.0).

<doodle title="Deprecate and remove the above mentioned signatures of IntlCalendar::__construct() and intlcal_set()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== Phar::setStub() ====

''Phar::setStub()'' currently supports two signatures:

<code php>
class Phar
{
    ...

    public function setStub(resource $resource, int $length) {}
    
    public function setStub(string $string) {}

    ...
}
</code>

This RFC proposes to add a new method as a replacement for the latter signature in PHP 8.3 and then deprecate the replaced signature in the next to next minor PHP version (possibly PHP 8.4). Finally, the deprecated signature would become unsupported in the next major PHP version (possibly PHP 9.0), resulting in the following methods:

<code php>
class Phar
{
    ...

    public function setStub(resource $resource, int $length) {}
    
    public function setStubFromString(string $string): void {}

    ...
}
</code>

Please note that the newly added method has a ''void'' return type. This is possible because ''Phar::setStub()'' always returns ''true''.

As the implementation of ''Phar::setStub()'' is "aliased" to ''PharData::setStub()'', this RFC proposes to implement the above mentioned changes in case of ''PharData::setStub()'' as well.

<doodle title="Deprecate and remove the above mentioned signature of Phar::setStub() and PharData::setStub()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== ReflectionMethod::__construct() ====

''ReflectionMethod::%%__construct()%%'' currently supports two signatures:

<code php>
class ReflectionMethod
{
    ...

    public function __construct(object|string $objectOrMethod, string $method) {}
    
    public function __construct(string $classMethod) {}
    
    ...
}
</code>

This RFC proposes to add the following new factory method in PHP 8.3 and deprecate the first constructor signature in the next to next minor PHP version (possibly PHP 8.4). Finally, the deprecated signature would become unsupported in the next major PHP version (possibly PHP 9.0), resulting in the following methods:

<code php>
class ReflectionMethod
{
    ...

    public function __construct(object|string $objectOrMethod, string $method) {}

    public static function createFromMethodName(string $method): static {}
    
    ...
}
</code>

<doodle title="Deprecate and remove the above mentioned signature of ReflectionMethod::__construct()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>

===== Backwards incompatible changes =====

Additional deprecation notices will appear in the next to next minor PHP version (possibly PHP 8.4). For the next major PHP version (possibly PHP 9.0) all the previously deprecated functionality will no longer be available.

===== Impact on extensions =====

None.