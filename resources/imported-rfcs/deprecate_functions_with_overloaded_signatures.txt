====== PHP RFC: Deprecate functions with overloaded signatures ======
  * Date: 2023-01-31
  * Author: Máté Kocsis <kocsismate@php.net>
  * Target version: PHP 8.3
  * Status: Draft
  * Implementation:

===== Introduction =====

Signature overloading may be a very familiar concept for Java developers for instance, but PHP doesn't natively support it in userland. In spite of this fact, many internal functions are implemented due to historical reasons so that they can be expressed only with multiple signatures. The vast majority of such cases are caused by accepting varying number of parameters, among a few cases when some methods are static and instance methods in the same time. In Java, being able to support multiple parameter types requires overloading function signatures, but it's not the case anymore with PHP since the introduction of union types.

If our aim is to find consistency between internal and userland code (and it really is), we should either add native support for signature overloading, or phase out the overloaded internal function signatures. As the former is widely known to be [[https://github.com/Danack/RfcCodex/blob/master/method_overloading.md|impossible to implement in an effective way]], the latter solution is the right choice. it's important to mention that maintaining consistency is not the only motivation why we should get rid of this long standing issue.

Before PHP 8.0, overloaded signatures didn't cause a big harm, except for making the usability of the functions in questions worse as well as their behavior more surprising. However, as of PHP 8.0, having a clear default value handling semantics is much more important than before due to the following reasons:
  * Since PHP 8.0, ''ReflectionParameter'' supports retrieving the default parameter values of internal functions when the default value exists
  * [[rfc:named_params|PHP RFC: Named Arguments]] supports skipping optional parameters (as in implicitly passing its default value) when the default value exists
  * For ~2 years now, the online manual at [[https://php.net|php.net]] is semi-automatically updated based on the exact signatures known by php-src, which are collected via the [[https://externals.io/message/105970|so-called stubs]]. Unfortunately, overloaded functions cannot be updated via our tooling, leaving these signatures outdated, displaying the wrong parameter names and types, as well as missing proper default values.

After the named arguments RFC was accepted, dozens (if not hundreds) of functions were fixed in PHP 8.0 so that they started to behave according to a clear default parameter value handling semantics. Usually, this required us to make the parameters nullable, but sometimes it was enough to make a few small adjustments to the parameter parsing code. As all the easier cases are fixed for quite a long time, this RFC tries to tackle the ones with some BC impact.

===== Proposal =====

This RFC consists of multiple votes to phase out the below mentioned overloaded function signatures over the course of PHP 8.X version series. In order to reduce the BC impact, PHP 8.3 would only add the suggested replacements first. The next to next minor PHP version (possibly PHP 8.4) would then deprecate the overloaded signatures accepted in this RFC. Finally, the next major PHP version (possibly PHP 9.0) would completely get rid of the overrides.

==== assert_options() ====

''assert_options()'' currently supports two signatures:

<code php>
function assert_options(int $option): mixed {}

function assert_options(int $option, mixed $value): mixed {}
</code>

This RFC proposes to add a new function as a replacement for the 2nd signature in PHP 8.3, and deprecate calling ''assert_options()'' with 2 parameters in the next to next minor PHP version (possibly PHP 8.4). Finally, the deprecated signature would become unsupported in the next major PHP version (possibly PHP 9.0), resulting in the following methods:

<code php>
function assert_options(int $option): mixed {}

function assert_set_option(int $option, mixed $value): mixed {}
</code>

<doodle title="Deprecate and then remove the above mentioned signature of assert_options()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== DatePeriod::__construct() ====

''DatePeriod::%%__construct()%%'' currently supports three signatures:

<code php>
class DatePeriod
{
    ...

    public function __construct(DateTimeInterface $start, DateInterval $interval, int $recurrences, int $options = 0) {}

    public function __construct(DateTimeInterface $start, DateInterval $interval, DateTimeInterface $end, int $options = 0) {}

    public function __construct(string $isostr, int $options = 0) {}

    ...
}
</code>

This RFC proposes to add three new factory methods as a replacement for the current signatures in PHP 8.3 and deprecate the constructor in the next to next minor PHP version (possibly PHP 8.4). Finally, the constructor would become unsupported in the next major PHP version (possibly PHP 9.0), resulting in the following methods:

<code php>
class DatePeriod
{
    ...

    public function createFromInterval(DateTimeInterface $start, DateInterval $interval, DateTimeInterface $end, int $options = 0): static {}

    public static function createFromRecurrences(DateTimeInterface $start, DateInterval $interval, int $recurrences, int $options = 0): static {}

    public static function createFromIso8601(string $specification, int $options = 0): static {}

    ...
}
</code>

<doodle title="Deprecate and then remove DatePeriod::__construct()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== FFI::cast(), FFI::new(), and FFI::type() ====

''FFI::cast()'', ''FFI::new()'', and ''FFI::type()'' currently support two signatures each:

<code php>
class FFI
{
    ...

    public static function cast(FFI\CType|string $type, FFI\CData|int|float|bool|null &$ptr): ?FFI\CData {}

    public function cast(FFI\CType|string $type, FFI\CData|int|float|bool|null &$ptr): ?FFI\CData {}

    public static function new(FFI\CType|string $type, bool $owned = true, bool $persistent = false): ?FFI\CData {}

    public function new(FFI\CType|string $type, bool $owned = true, bool $persistent = false): ?FFI\CData {}
    
    public static function type(string $type): ?FFI\CType {}

    public function type(string $type): ?FFI\CType {}

    ...
}
</code>

This RFC proposes to deprecate the static signatures of ''FFI::cast()'', ''FFI::new()'', and ''FFI::type()'' in the next to next minor PHP version (possibly PHP 8.4). Finally, calling these functions statically would become unsupported in the next major PHP version (possibly PHP 9.0), resulting in the following methods:

<code php>
class FFI
{
    ...

    public function cast(FFI\CType|string $type, FFI\CData|int|float|bool|null &$ptr): ?FFI\CData {}

    public function new(FFI\CType|string $type, bool $owned = true, bool $persistent = false): ?FFI\CData {}

    public function type(string $type): ?FFI\CType {}

    ...
}
</code>

<doodle title="Deprecate and then remove the above mentioned signatures of FFI::cast(), FFI::new(), and FFI::type()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>


==== get_class() and get_parent_class() ====

''get_class()'' currently supports two signatures:

<code php>
function get_class(object $object): string {}

function get_class(): string {}
</code>

These are due to the [[rfc:get_class_disallow_null_parameter|PHP RFC: get_class() disallow null parameter]] RFC which was implemented for PHP 7.2. The ''get_parent_class()'' function behaves consistently:

<code php>
function get_parent_class(object|string $object_or_class): string {}

function get_parent_class(): string {}
</code>

This RFC proposes to deprecate the signatures without parameters in PHP 8.3, and then calling ''get_class'' as well as ''get_parent_class()'' without parameters would become unsupported in the next major PHP version (possibly PHP 9.0), resulting in the following methods:

<code php>
function get_class(object $object): string {}

function get_parent_class(object|string $object_or_string): string {}
</code>

Code which invokes ''get_class()'' without parameters should be modified to use ''%%__CLASS__%%'' or ''get_class($this)'' instead, while code which invokes ''get_parent_class()'' without parameters should be modified to use ''get_parent_class($this)'' instead.

<doodle title="Deprecate and then remove the above mentioned signature of get_class()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== IntlCalendar::set() ====

''IntlCalendar::set()'' currently supports the following signatures:

<code php>
class IntlCalendar
{
    ...

    public function set(int $field, int $value): bool {}

    public function set(int $year, int $month, int $dayOfMonth): bool {}

    public function set(int $year, int $month, int $dayOfMonth, int $hour, int $minute): bool {}

    public function set(int $year, int $month, int $dayOfMonth, int $hour, int $minute, int $second): bool {}

    ...
}
</code>

It's important to note that it's not possible call ''IntlCalendar::set()'' with 4 arguments, as the ICU library which is triggered under the hood [[https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/classicu_1_1Calendar.html#afb3dbfabf06d5cc6f6b0127061c09b61|neither supports it]].

This RFC proposes to add two new methods as a replacement for the three latter signatures in PHP 8.3 and deprecate calling the ''set()'' method with more than two arguments in the next to next minor PHP version (possibly PHP 8.4). Finally, the deprecated signatures would become unsupported in the next major version (possibly PHP 9.0), resulting in the following methods:

<code php>
class IntlCalendar
{
    ...

    public function set(int $field, int $value): bool {}

    public function setDate(int $year, int $month, int $dayOfMonth): void {}
    
    public function setDateTime(int $year, int $month, int $dayOfMonth, int $hour, int $minute, ?int $second = null): void {}

    ...
}
</code>

Please note that the newly added methods have a ''void'' return type. This is possible because ''IntlCalendar::set()'' always returns ''true''.

As ''IntlCalendar::set()'' is an alias of ''intlcal_set()'', the deprecation and then the removal would apply to the function as well. Since the procedural-style API of the intl extension is [[https://externals.io/message/114473#114673|considered legacy]], this RFC proposes to deprecate ''intlcal_set()'' as of the next to next PHP version (possibly PHP 8.4), and remove it in the next major PHP version (possibly PHP 9.0).

<doodle title="Deprecate and remove the above mentioned signatures of IntlCalendar::set() and intlcal_set()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== IntlGregorianCalendar::__construct() ====

''IntlGregorianCalendar::%%__construct()%%'' currently supports three signatures:

<code php>
class IntlGregorianCalendar
{
    ...

    public function __construct(IntlTimeZone|DateTimeZone|string|null $timezone = null, ?string $locale = null) {}

    public function __construct(int $year, int $month, int $dayOfMonth) {}

    public function __construct(int $year, int $month, int $dayOfMonth, int $hour, int $minute, ?int second = null) {}

    ...
}
</code>

It's important to note that it's not possible call ''%%IntlGregorianCalendar::__construct()%%'' with 4 arguments, as the ICU library which is triggered under the hood [[https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/classicu_1_1GregorianCalendar.html#aef388a4067f3c53f3fa38068c8be012d|neither supports it]].

This RFC proposes to add two new static methods as a replacement for the latter two signatures in PHP 8.3 and deprecate calling the constructor with more than two arguments in the next to next minor PHP version (possibly PHP 8.4). Finally, the deprecated signatures would become unsupported in the next major version (possibly PHP 9.0), resulting in the following methods:

<code php>
class IntlGregorianCalendar
{
    ...

    public function __construct(IntlTimeZone|DateTimeZone|string|null $timezone = null, ?string $locale = null) {}

    public static function createFromDate(int $year, int $month, int $dayOfMonth): static {}

    public static function createFromDateTime(int $year, int $month, int $dayOfMonth, int $hour, int $minute, ?int second = null): static {}

    ...
}
</code>

As the constructor is an alias of ''intlgregcal_create_instance()'', the deprecation and then the removal would apply to the function as well. Since the procedural-style API of the intl extension is [[https://externals.io/message/114473#114673|considered legacy]], this RFC proposes to deprecate ''intlgregcal_create_instance()'' as of the next to next PHP version (possibly PHP 8.4), and remove in the next major PHP version (possibly PHP 9.0).

<doodle title="Deprecate and remove the above mentioned signatures of IntlCalendar::__construct() and intlcal_set()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>


==== pg_fetch_result(), pg_field_prtlen(), and pg_field_is_null() ====

''pg_fetch_result()'', ''pg_field_prtlen()'', and ''pg_field_is_null()'' currently support two signatures each:

<code php>
function pg_fetch_result(PgSql\Result $result, mixed $field): string|false|null {}

function pg_fetch_result(PgSql\Result $result, int $row, mixed $field): string|false|null {}
</code>

<code php>
function pg_field_prtlen(PgSql\Result $result, string|int $field): int|false {}

function pg_field_prtlen(PgSql\Result $result, int $row, string|int $field): int|false {}
</code>

<code php>
function pg_field_is_null(PgSql\Result $result, string|int $field): int|false {}

function pg_field_is_null(PgSql\Result $result, int $row, string|int $field): int|false {}
</code>

This RFC proposes to make the ''$row'' parameters nullable in PHP 8.3, and deprecate the 2 parameter signatures (which don't have ''$row'') in the next to next minor PHP version (possibly PHP 8.4). Finally, calling ''pg_fetch_result()'', ''pg_field_prtlen()'', and ''pg_field_is_null()'' without passing either the ''$row'' or the 3rd parameters would become unsupported in the next major PHP version (possibly PHP 9.0), resulting in the following functions:

<code php>
function pg_fetch_result(PgSql\Result $result, ?int $row, mixed $field): string|false|null {}

function pg_field_prtlen(PgSql\Result $result, ?int $row, string|int $field): int|false {}

function pg_field_is_null(PgSql\Result $result, ?int $row, string|int $field): int|false {}
</code>

Since all these functions have an alias (''pg_result()'', ''pg_fieldprtlen()'', and ''pg_fieldisnull'' respectively), the deprecations would affect them as well. However, as these aliases have already been deprecated, there is no use to change them in any way. That's why this RFC proposes not to implement the above mentioned changes in case of the aliases in question.

<doodle title="Deprecate and then remove the above mentioned signatures of pg_fetch_result(), pg_field_prtlen(), and pg_field_is_null()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== Phar::setStub() ====

''Phar::setStub()'' currently supports two signatures:

<code php>
class Phar
{
    ...

    public function setStub(string $string) {}

    public function setStub(resource $resource, int $length) {}
   

    ...
}
</code>

This RFC proposes to deprecate the latter signature in PHP 8.3 and then remove its support in the next major PHP version (possibly PHP 9.0), resulting in the following method:

<code php>
class Phar
{
    ...

    public function setStub(string $string) {}

    ...
}
</code>

''Phar::setStub($resource, $length)'' reads the input resource into memory as a string and then continues evaluation just like if a string was passed. That's why this signature is trivial to replace to ''$phar->setStub(stream_get_contents($resource));''

As the implementation of ''Phar::setStub()'' is "aliased" to ''PharData::setStub()'', this RFC proposes to implement the above mentioned changes in case of ''PharData::setStub()'' as well.

<doodle title="Deprecate and remove the above mentioned signature of Phar::setStub() and PharData::setStub()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== ReflectionMethod::__construct() ====

''ReflectionMethod::%%__construct()%%'' currently supports two signatures:

<code php>
class ReflectionMethod
{
    ...

    public function __construct(object|string $objectOrMethod, string $method) {}
    
    public function __construct(string $classMethod) {}
    
    ...
}
</code>

This RFC proposes to add the following new factory method in PHP 8.3 and deprecate the first constructor signature in the next to next minor PHP version (possibly PHP 8.4). Finally, the deprecated signature would become unsupported in the next major PHP version (possibly PHP 9.0), resulting in the following methods:

<code php>
class ReflectionMethod
{
    ...

    public function __construct(object|string $objectOrClass, string $method) {}

    public static function createFromMethodName(string $method): static {}
    
    ...
}
</code>

<doodle title="Deprecate and remove the above mentioned signature of ReflectionMethod::__construct()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>


==== ReflectionProperty::setValue() ====

''ReflectionProperty::setValue()'' currently supports three signatures:

<code php>
class ReflectionProperty
{
    ...

    public function setValue(object $object, mixed $value) {}

    public function setValue(mixed $unused, mixed $value) {}

    public function setValue(mixed $value) {}

    ...
}
</code>

The latter two signatures are exclusive to static properties for which an object instance is unnecessary to operate on.

This RFC proposes to add a new method in PHP 8.3 as a replacement for the 3rd signature, and deprecate the latter two signatures of ''ReflectionProperty::setValue()'' in the next to next minor PHP version (possibly PHP 8.4). Finally, the deprecated signatures would become unsupported in the next major PHP version (possibly PHP 9.0), resulting in the following methods:

<code php>
class ReflectionProperty
{
    ...

    public function setValue(object $object, mixed $value) {}

    public function setStaticValue(mixed $value) {}

    ...
}
</code>

<doodle title="Deprecate and remove the above mentioned signature of ReflectionProperty::setValue()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>

===== Backwards incompatible changes =====

Additional deprecation notices will appear in PHP 8.3 or in the next to next minor PHP version (possibly PHP 8.4). For the next major PHP version (possibly PHP 9.0) none of the previously deprecated functionality will be available.

===== Impact on extensions =====

None.