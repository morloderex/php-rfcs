====== PHP RFC: Deprecate functions with overloaded signatures ======
  * Date: 2020-07-06
  * Author: Máté Kocsis <kocsismate@php.net>
  * Target version: PHP 8.3
  * Status: Draft
  * Implementation:

===== Introduction =====

===== Proposal =====


==== IntlCalendar::set() ====

''IntlCalendar::set()'' currently supports two signatures:

<code php>
class IntlCalendar
{
    ...

    public function set(int $field, int $value): bool(int $field, int $value) {}

    public function set(int $year, int $month, int $dayOfMonth = null, int $hour = null, int $minute = null, int $second = null): bool {}

    ...
}
</code>

It's important to note that it's not possible call ''IntlCalendar::set()'' with 4 arguments, as the ICU library which is called under the hood [[https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/classicu_1_1Calendar.html#afb3dbfabf06d5cc6f6b0127061c09b61|neither supports it]].

This RFC proposes to add two new methods as a replacement for the second signature in PHP 8.3 and deprecate calling the ''set()'' method with more than two arguments in the next to next minor PHP version (possibly PHP 8.4). Finally, the deprecated signature would become unsupported in the next major version (possibly PHP 9.0), resulting in the following methods:

<code php>
class IntlCalendar
{
    ...

    public function set(int $field, int $value): bool {}

    public function setDate(int $year, int $month, int $dayOfMonth): void {}
    
    public function setDateTime(int $year, int $month, int $dayOfMonth, int $hour, int $minute, ?int $second = null): void {}
    
    ...
}
</code>

As ''intlcal_set()'' is an alias of ''IntlCalendar::set()'', the deprecation and then the removal would apply to it as well. As a replacement for the 2+ parameter signature, 2 new functions were introduced, aliased to their object-oriented counterpart:

<code php>
function intlcal_set(int $field, int $value): bool {}

function intlcal_set_date(int $year, int $month, int $dayOfMonth): void {}
    
function intlcal_set_date_time(int $year, int $month, int $dayOfMonth, int $hour, int $minute, ?int $second = null): void {}
</code>

Please note that the newly added methods/functions has a ''void'' return type. This is possible because ''IntlCalendar::set()'' and ''intlcal_set()'' always return ''true''.

<doodle title="Deprecate and remove the above mentioned signatures of IntlCalendar::set() and intlcal_set()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== DatePeriod::__construct() ====

''DatePeriod::%%__construct()%%'' currently supports three signatures:

<code php>
class DatePeriod
{
    ...

    public function __construct(DateTimeInterface $start, DateInterval $interval, int $recurrences, int $options = 0) {}

    public function __construct(DateTimeInterface $start, DateInterval $interval, DateTimeInterface $end, int $options = 0) {}

    public function __construct(string $isostr, int $options = 0) {}

    ...
}
</code>

This RFC proposes to add the following three new factory methods as a replacement in PHP 8.3 and deprecate the constructor in the next to next minor PHP version (possibly PHP 8.4). Finally, the constructor would be removed altogether in the next major PHP version (possibly PHP 9.0), resulting in the following methods:

<code php>
class DatePeriod
{
    ...

    public static function createFromRecurrences(DateTimeInterface $start, DateInterval $interval, int $recurrences, int $options = 0): static {}

    public static function createFromDates(DateTimeInterface $start, DateInterval $interval, DateTimeInterface $end, int $options = 0): static {}

    public static function createFromIso8601(string $specification, int $options = 0): static {}

    ...
}
</code>

<doodle title="Deprecate and then remove DatePeriod::__construct()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== ReflectionMethod::__construct() ====

''ReflectionMethod::%%__construct()%%'' currently supports two signatures:

<code php>
class ReflectionMethod
{
    ...

    public function __construct(object|string $objectOrMethod, string $method) {}
    
    public function __construct(string $classMethod) {}
    
    ...
}
</code>

This RFC proposes to add the following new factory method in PHP 8.3 and deprecate the first constructor signature in the next to next minor PHP version (possibly PHP 8.4). Finally, the deprecated signature would become unsupported in the next major PHP version (possibly PHP 9.0), resulting in the following methods:

<code php>
class ReflectionMethod
{
    ...
    public function __construct(object|string $objectOrMethod, string $method) {}

    public static function createFromMethodName(string $method): static {}
    
    ...
}
</code>

<doodle title="Deprecate the above mentioned signature of ReflectionMethod::__construct()?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>

===== Backwards incompatible changes =====

Additional deprecation notices will appear. For PHP 9.0 all the previously deprecated functionality will no longer be available.

===== Impact on extensions =====

None.