====== PHP RFC: RNG fixes and changes ======
  * Version: 1.0
  * Date: 2016-05-03
  * Author: Leigh T <leigh@php.net>
  * Status: Under Discussion
  * First Published at: https://wiki.php.net/rfc/rng_fixes

===== Introduction =====

There are several long standing issues with random number generation that should be addressed:

  * Incorrect implementations
  * Platform-specific outputs
  * Poor scaling of bounded outputs
  * Insecure usage

Some of these fixes alter the output of the RNG or change the behaviour of functions that depend on them, so it makes sense to perform all of the changes at the same time.

===== Proposal =====

There are several proposals up for discussion that I hope to fine-tune, improve upon or eliminate completely during the discussion phase. The proposals are:

  * Replace mt_rand() and rand() to a strong, modern RNG.
  * Alternatively, fix the current mt_rand() implementation.
  * Alias rand() to mt_rand().
  * Fix RAND_RANGE for large ranges.
  * Replace insecure uses of php_rand() with php_random_bytes()
  * Make array_rand() more efficient

== Replace mt_rand() and rand() to a strong, modern RNG. ==
Most of the identified issues can be addressed by replacing the implementations of <php>mt_rand()</php> and <php>rand()</php> with a more modern random number generator such as ([[http://xoroshiro.di.unimi.it/|Xoroshiro128+]]) or ([[http://www.pcg-random.org/|PCG]])

As we currently recommend using <php>mt_rand()</php> over <php>rand()</php> it doesn't make sense to only replace the implementation of <php>rand()</php> with a stronger RNG.

This change would alter the output streams of both functions, however it fixes:

  * Incorrect implementation of <php>mt_rand()</php> (with documentation to say it is no longer <php>mt_rand()</php>)
  * Platform-specific outputs
  * Poor scaling of bounded outputs

== Fix mt_rand() implementation ==
The implementation of <php>mt_rand()</php> in PHP contains a typo that makes it generate a different sequence of numbers to the original mt19937 implementation. [[https://bugs.php.net/bug.php?id=71152|See bug #71152]]

It is not known if the period or the quality of the output from the RNG is negatively affected due to this typo.

As <php>mt_rand()</php> can be seeded for repeatable sequences the current implementation makes it incompatible with other systems that do use correct implementations. However fixing it also means that the sequence generated for a given seed in PHP will also now be different.

== Alias rand() to mt_rand() ==
<php>rand()</php> uses the system random number generator. The output of this RNG is system dependant and on many systems produces weak random numbers. ([[https://bugs.php.net/bug.php?id=45301|See bug #45301]])

Aliasing it to <php>mt_rand()</php> improves the quality of the output and means the same output can be expected for a given seed regardless of platform.

== Replace RAND_RANGE() ==
The macro used to scale the output of an RNG between two bounds is insufficient for large ranges. ([[https://bugs.php.net/bug.php?id=45184|See bug #45184]])

The proposed fix is to concatenate multiple outputs for ranges exceeding 32 bits, and use rejection sampling (the same as used in <php>random_bytes()</php>) to produce unbiased outputs.

== Replace insecure uses of php_rand() with php_random_bytes() ==
There are several instances where <php>rand()</php> is used internally in a security sensetive context

  * <php>crypt()</php> salt generation
  * SOAP HTTP auth nonce generation
  * <php>mcrypt_create_iv()</php> fallback with invalid source.

These instances should all be fixed to use the secure random number generator (even mcrypt which is deprecated)

== Make array_rand() more efficient ==
It has been noted that ([[http://php.net/manual/en/function.array-rand.php#117114|array_rand() produces weird and very uneven random distribution]]). As the above proposals change the output of <php>array_rand()</php> anyway, we can fix this at the same time.

===== Backward Incompatible Changes =====

A call to <php>srand()</php> or <php>mt_srand()</php> with a given seed will produce a different output in the following functions:
  * <php>mt_rand()</php>
  * <php>rand()</php>
  * <php>array_rand()</php>
  * <php>shuffle()</php>
  * <php>str_shuffle()</php>
  * <php>crypt()</php>
  * <php>mcrypt_create_iv()</php>

===== Proposed PHP Version(s) =====
7.1

===== RFC Impact =====
==== To SAPIs ====
None

==== To Existing Extensions ====
This is covered in the Backward Incompatible Changes section

==== To Opcache ====
None, this is a functional change, no changes to opcodes or code generation are required.

==== New Constants ====
None

===== Open Issues =====
None

===== Proposed Voting Choices =====
This will be an all or nothing vote (after discussion), and as the changes are functional, will require a 50%+1 majority to pass.

===== Patches and Tests =====
WIP - I will release a patch after a week or so of discussion has taken place when there is a better idea of which proposals are wanted.

===== Implementation =====

===== References =====

===== Rejected Features =====
None