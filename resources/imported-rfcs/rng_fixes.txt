====== PHP RFC: RNG fixes and changes ======
  * Version: 1.0
  * Date: 2016-05-03
  * Author: Leigh T <leigh@php.net>
  * Status: Under Discussion
  * First Published at: https://wiki.php.net/rfc/rng_fixes

===== Introduction =====

There are several long standing issues with random number generation that need to be addressed:

  * Incorrect implementations
  * Platform-specific outputs
  * Poor scaling of bounded outputs
  * Insecure usage

Some of these fixes alter the output of the RNG or change the behaviour of functions that depend on them, so it makes sense to perform all of the changes at the same time.

===== Proposal =====

== Fix mt_rand_() output ==
The implementation of <php>mt_rand()</php> in PHP contains a typo that makes it generate a different sequence of numbers to the original mt19937 implementation. [[https://bugs.php.net/bug.php?id=71152|See bug #71152]]

It is not known if the period or the quality of the output from the RNG is negatively affected due to this typo.

As <php>mt_rand()</php> can be seeded for repeatable sequences the current implementation makes it incompatible with other systems that do use correct implementations. However fixing it also means that the sequeunce for a given seed will now be different.

== Alias rand() to mt_rand() ==
<php>rand()</php> uses the system random number generator. The output of this RNG is system dependant and on many systems produces weak random numbers. ([[https://bugs.php.net/bug.php?id=45301|See bug #45301]])

Aliasing it to <php>mt_rand()</php> improves the quality of the output and means the same output can be expected regardless of platform, for a given seed.

== Replace RAND_RANGE() ==
The macro used to scale the output of an RNG between two bounds is insufficient for large ranges. ([[https://bugs.php.net/bug.php?id=45184|See bug #45184]])

The proposed fix is to concatenate multiple outputs for ranges exceeding 32 bits, and use rejection sampling (the same as used in <php>random_bytes()</php>) to produce unbiased outputs.

== Replace insecure uses of php_rand() with php_random_bytes() ==
There are several instances where rand() is used internally in a security sensetive context

  * <php>crypt()</php> salt generation
  * SOAP HTTP auth nonce generation
  * <php>mcrypt_create_iv()</php> fallback

These instances should all be fixed to use the secure random number generator (even mcrypt which is deprecated)

===== Backward Incompatible Changes =====

A call to <php>srand()</php> or <php>mt_srand()</php> with a given seed will produce a different output in the following functions:
  * <php>mt_rand()</php>
  * <php>rand()</php>
  * <php>array_rand()</php>
  * <php>shuffle()</php>
  * <php>str_shuffle()</php>
  * <php>crypt()</php>
  * <php>mcrypt_create_iv()</php>

===== Proposed PHP Version(s) =====
7.1

===== RFC Impact =====
==== To SAPIs ====
None

==== To Existing Extensions ====
This is covered in the Backward Incompatible Changes section

==== To Opcache ====
None, this is a functional change, no changes to opcodes or code generation are required.

==== New Constants ====
None

===== Open Issues =====
None

===== Proposed Voting Choices =====
This will be an all or nothing vote (after discussion), and as the changes are functional, will require a 50%+1 majority to pass.

===== Patches and Tests =====
WIP

===== Implementation =====


===== References =====
Links to external references, discussions or RFCs

===== Rejected Features =====
None