====== Request for Comments: Source Files Without Opening Tag ======
  * Version: 1.0
  * Date: 2012-04-08
  * Author: Thomas Boutell <tom@punkave.com>
  * Status: Under Discussion
  * First Published at: http://wiki.php.net/rfc/source_files_without_opening_tag
  * Other formats: none yet

This RFC proposes a way to support source files without <?php at the top.

===== Introduction =====

The purpose of this RFC is to provide a way to support source files that do not begin with <?php while maintaining backwards compatibility. 

==== Why is this desirable? ====

In modern framework development and larger projects in general, it is often considered good practice to implement PHP classes in files which contain only
PHP code and typically contain no "raw HTML" (no code which is not wrapped by <?php and ?>). In such files, typing <?php at the top is:

1. Tedious. There is a small but real frustration involved in this redundancy. Small but real frustrations can contribute to long-term disenchantment with a programming language.
2. Error-prone in a subtle and hard-to-debug way: if any whitespace is introduced before <?php, the code still works, but your XHTML doctype fails to be recognized, your header() calls fail, etc. Since you may not use these in every situation the bug is often not spotted until an inopportune time.

However these same projects and frameworks may advocate the use of "raw HTML" in PHP files intended as templates for rendering pages, forms and the like. This is a longstanding feature of PHP (indeed the original feature of PHP). Support for it should be maintained, and may perhaps be improved in future to address PHP's current limitations as a templating language.

===== Proposal =====

=== 1. Core Code Changes ===

The following new keywords will be introduced:

require_code, require_code_once, include_code, include_code_once

These keywords behave exactly like require, require_once, include and include_once, with the following exception:

The parser starts out in "PHP mode." That is, the parser assumes that the very first character of the file being included is executable PHP code, not raw HTML or other content to be output directly.

=== 2. Proposed Filename Convention ===

Although the introduction of new keywords gives coders flexibility, it is still desirable in most cases to have a commonly recognized convention to distinguish files that should be read starting in "PHP mode" from legacy and template files that should be read starting in "HTML mode." The following convention is proposed:

* Files that should be read starting in HTML mode should have a .php extension, for backwards compatibility.

* Files that should be read starting in PHP mode should have a .phpc extension (short for "PHP code").

However enforcement of this convention is NOT proposed. The require_code keyword should NOT attempt to make inferences from the file extension. 

===== Patch =====

Not yet.

===== Anticipated And Previously Raised Questions =====

"Does this break my existing code?"

No. Code that never uses `require_code` and or the related new keywords will not be affected in any way.

"Doesn't typing `require_code` add up to just as much annoyance as typing `<?php`?"

Typically projects that use class files in this way also have autoloaders to load classes implicitly when they are first used. So `require_once` would be typed once in the autoloader, not everywhere.

"Won't this slow down the autoloader?"

Not really. Even in a worst-case scenario where `stat()` calls are slow and the autoloader performs no caching even in a production environment, the autoloader will often be able to assume that only `.phpc` files are expected because that is the convention of the library or framework from which they came, so it won't be necessary to `stat()` first for `.phpc` and then check for `.php` as well. In practice it is also possible to prewarm autoloader caches as part of deployment.

"Won't this break if you try to use the code with an older version of PHP?"

Of course. A choice to use this feature implies a choice to support only the supporting version of PHP or newer. But it'll break cleanly with a clear error message, just like code that tries to use traits or other newer features. That is one of the advantages of using new keywords rather than applying special behavior to file extensions automatically or similar.

"Why doesn't the proposal forbid the use of `?>` to get back to 'HTML mode' in a `.phpc` file?"

Two reasons:

1. While it is tempting to be a purist about this, those who are creating code generators and the like may sometimes find it useful to leverage HTML mode in a class file. It is not the place of this proposal to forbid them from doing what they want if it doesn't interfere with the ability of others to write maintainable, bug-free code more conveniently.

2. It is suspected that the implementation of the proposal will be simpler and therefore easier to debug and maintain if it is limited simply to setting the initial state of the parser.

===== Changelog =====

No changes yet.

