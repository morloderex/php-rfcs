====== PHP RFC: ReflectionType Improvements ======
  * Version: 1.0
  * Date: 2016-06-10
  * Author: Levi Morrison <levim@php.net>
  * Status: Declined
  * First Published at: https://wiki.php.net/rfc/ReflectionTypeImprovements

===== Introduction =====
For PHP 7.0 the ''ReflectionType'' API was introduced in conjunction with [[rfc::return_types] | return types]]. Its minimal API was intended to be the base for future improvements; this RFC contains some of those improvements.

===== Proposal =====
This RFC adds two new subtypes for ''ReflectionType''; here are their stubs:

<PHP>
class ReflectionNamedType extends ReflectionType {
    public function getName(): string;
}

class ReflectionClassType extends ReflectionNamedType {
    public function getClass(): ReflectionClass;
}
</PHP>

If the engine does not recognize a type it will call the autoloader; if the class is found then a ''ReflectionClassType'' will be returned. Presently in all other cases a plain ''ReflectionNamedType'' will be returned but this may change in the future. For instance if we had intersection types they would be unnamed and therefore would be different subtype of ''ReflectionType''. 

A call to the ''getName()'' method of a ''ReflectionNamedType'' that represents any of ''int'', ''?int'' or ''int $foo = null'' will return ''int'' in each case. Note that the ''<nowiki>__toString</nowiki>'' method would return ''int'', ''?int'' and ''?int'' respectively. Note that the names of builtin types are normalized, so ''getName()'' on builtin types will always be in lower case and thus safe for string comparisons.

===== Backward Incompatible Changes =====
There is a change for ''<nowiki>ReflectionType::__toString()</nowiki>'' which will now include a ''?'' for nullable types. This change is justified for several reason:

  - ''ReflectionType'' was introduced in 7.0 and therefore adoption is low
  - The change reflects the intention of the meaning of ''<nowiki>__toString</nowiki>'' to be the string representation of the type that would pass syntax checking. Unfortunately this intention wasn't formally documented thus classifying this as a BC break.

===== PHP Version =====
This RFC targets PHP 7.Next which is currently version 7.1.

===== Unaffected PHP Functionality =====
''ReflectionClass'' is unaffected; this only touches ''ReflectionType''.

===== Voting =====
It is unclear if voting requires 50%+1 or 2/3. On one hand this is not a language change but on the other this does contain a BC break. Rather than debating it one way or the other I've chosen to require 2/3.

The vote is a simple yes or no for these changes. Voting opened 2016-06-30 and will close 2016-07-08.

<doodle title="Accept ReflectionType Improvements RFC?" auth="levim" voteType="single" closed="true">
   * Yes
   * No
</doodle>

===== Patches and Tests =====
The patch for this is not difficult; it will be coming soon.
