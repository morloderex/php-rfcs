====== PHP RFC: Replace "Missing argument" warning with "Too few arguments" exception ======
  * Version: 0.9
  * Date: 2016-06-01
  * Author: Dmitry Stogov, dmitry@zend.com
  * Status: Under Discussion
  * First Published at: https://wiki.php.net/rfc/too_few_args

===== Introduction =====
Historically, PHP allows calling functions with fewer actual parameters when required by function definition. These "non-passed" arguments lead to warning emission and continuation of function execution with uninitialized arguments.

<code php>
function foo($a) {
   var_dump($a);   // NULL + Warning: Undefind variable: a 
   var_dump($a);   // NULL + Warning: Undefind variable: a
}
foo();             // Warning: Missing argument 1 for foo()
</code>

This strange behavior:
  * allows execution of functions with unexpected input data (nobody checks isset() for all arguments)
  * doesn't have real use cases (in any case, foo($a = null) is better)
  * may lead to warning bloating
  * disables obvious optimisation opportunists

===== Proposal =====
I propose to disable calling functions with insufficient actual parameters. PHP will throw a "Error" exception insted.

<code php>
function foo($a) {
   var_dump($a);   // not executed
   var_dump($a);   // not executed
}
foo();             // throw Error("Too few arguments to function foo(), 0 passed in %s on line %d and exactly 1 expected")
</code>

Using this approach, all attempts to call function with unexpected input data are going to be caught in first place.

===== Backward Incompatible Changes =====
The BC break in intended.

===== Proposed PHP Version(s) =====
PHP 7.1

===== Proposed Voting Choices =====
The vote is a straight Yes/No vote, that requires a 2/3 majority. 

===== Patches and Tests =====
[[https://github.com/php/php-src/pull/1928|PR 1928]]

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
