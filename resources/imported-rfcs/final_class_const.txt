====== PHP RFC: Final class constants ======
  * Date: 2021-04-23
  * Author: Máté Kocsis <kocsismate@php.net>
  * Status: Under discussion
  * Implementation: https://github.com/php/php-src/pull/6878

===== Introduction =====

Currently, class constants are always overridable by child classes. This causes a few smaller caveats:

First of all, the engine can't optimize class constant references when late static binding is involved, so it has to pessimistically assume that ''FOO'' is overridden in case of ''static::FOO'' or ''$this::FOO'' invocations.

What's more important is that one cannot make sure that a class constant value stays constant. Even if one always references them by using ''self::'', doing so won't prevent a child class from changing the value. Although constants not being constants is usually considered only as a theoretical problem, being able to add a ''final'' modifier would make the intention explicit that child classes shouldn't try to override them.

Another interesting fact is that interface constants are already ''final'':

<code php>
interface I
{
    public const X = "i";
}

class C implements I
{
    public const X = "bar";
}

// Fatal error: Cannot inherit previously-inherited or override constant X from interface I
</code>

This leads to an interesting inconsistency. By introducing an intermediate class, overriding still becomes possible:

<code php>
interface I
{
    public const X = "i";
}

class C implements I
{
}

class D extends C 
{
    public const X = "d";
}

// No error
</code>


===== Proposal =====

The final modifier can be added to class constants. Doing so prevents a constant to be overridden in a child class:

<code php>
class Foo
{
    final public const X = "foo";
}

class Bar extends Foo
{
    public const X = "bar";
}

// Fatal error: Bar::X cannot override final constant Foo::X
</code>

Besides, interface constants would become overridable by default, and the ''final'' modifier could be used to retain the original behavior.

<code php>
interface I
{
    public const X = "i";
    final public const Y = "i";
}

class C implements I
{
    public const X = "c"; // Overriding I::X is possible
    public const Y = "c"; // Overriding I::Y is not possible
}

// Fatal error: C::Y cannot override final constant I::Y
</code>

===== Reflection =====

A ''ReflectionClassConstant::isFinal()''method is added in order to be able to retrieve if a constant is final.

===== Backward Incompatible Changes =====

None.

===== Vote =====

Add support for final class constants? The vote requires 2/3 majority to be accepted.


