====== PHP RFC: Binary String Comparison ======
  * Version: 0.1
  * Date: 2014-08-01
  * Author: Marc Bennewitz, php@mabe.berlin
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/binary_string_comparison

This RFC proposes to change the behavior of non-strict string to string comparison to be binary safe.

===== Introduction =====
In PHP on comparing two strings in non-strict mode both operands will be casted to numbers and if it succeed both numbers will be compared instead of a binary string comparison.

The current behavior is very confusing also in the world of a loosely typed language. Because both operands have the same type and there is no context which could mark them as numeric. Only because the content could represent numeric characters using the ASCII table it's not automatically a number. Btw. in the world of multilingual webpages you will get other errors (e.g. in German the comma and the dot is switched).

The current behavior is very unknown in the wold of PHP developers and newcomers because there is no numeric context. Sure there is a note somewhere in the documentation but it is nothing 99.9% of people would expect.

The current behavior leads to bugs that are very hard to find/catch and it makes code hard to know what's going on.

Using strict string comparison helps to workaround such behavior bit it ends up in using strict comparison all over which makes non-strict comparison useless.

===== Proposal =====
This RFC proposes to change the behavior of non-strict string to string comparison to be binary safe (as the strict comparison operator does).

On comparing two numeric strings both operands will be equal if the string representation will be the same.
On comparing two numeric strings the first operand will be greater if the first not matching byte will be higher.
On comparing two numeric strings the first operand will be lower if the first not matching byte will be lower.

As a side effect it makes string comparison much faster and force developer to really write what they mean (No need to guess) and to force developers to cast/filter input once which also affects performance.

=== string == string ===
(http://3v4l.org/4KA8M)

    <?php
    echo ('1' == '1' ? 'true' : 'false') . " ('1' == '1')\n";
    echo ('2' == '1' ? 'true' : 'false') . " ('2' == '1')\n";
    echo ('1e1' == '10' ? 'true' : 'false') . " ('1e1' == '10')\n";
    echo ('1E1' == '10' ? 'true' : 'false') . " ('1E1' == '10')\n";
    echo ('1e-1' == '0.1' ? 'true' : 'false') . " ('1e-1' == '0.1')\n";
    echo ('1E-1' == '0.1' ? 'true' : 'false') . " ('1E-1' == '0.1')\n";
    echo ('+1' == '1' ? 'true' : 'false') . " ('+1' == '1')\n";
    echo ('+0' == '-0' ? 'true' : 'false') . " ('+0' == '-0')\n";
    echo ('0.99999999999999994' == '1' ? 'true' : 'false') . " ('0.99999999999999994' == '1')\n";
    echo ('0.99999999999999995' == '1' ? 'true' : 'false') . " ('0.99999999999999995' == '1')\n";
    echo ("\n1" == '1' ? 'true' : 'false') . " (\"\\n1\" == '1')\n";
    echo ("1\n" == '1' ? 'true' : 'false') . " (\"1\\n\" == '1')\n";

Current Behavior:

    true ('1' == '1')
    false ('2' == '1')
    true ('1e1' == '10')
    true ('1E1' == '10')
    true ('1e-1' == '0.1')
    true ('1E-1' == '0.1')
    true ('+1' == '1')
    true ('+0' == '-0')
    false ('0.99999999999999994' == '1')
    true ('0.99999999999999995' == '1')
    true ("\n1" == '1')
    false ("1\n" == '1')

Changed Behavior:

    true ('1' == '1')
    false ('2' == '1')
    false ('1e1' == '10')
    false ('1E1' == '10')
    false ('1e-1' == '0.1')
    false ('1E-1' == '0.1')
    false ('+1' == '1')
    false ('+0' == '-0')
    false ('0.99999999999999994' == '1')
    false ('0.99999999999999995' == '1')
    false ("\n1" == '1')
    false ("1\n" == '1')

===== Backward Incompatible Changes =====
Existing code that relies on the current behavior on non-strict string to string comparison will only produce the originally expected result if the string representation is the same. This can be easily resolved by explicitly casting one of the operands to an integer or float.

===== Proposed PHP Version(s) =====
As this is a backwards-incompatible change, this RFC targets PHP.next.

===== Open Issues =====
How to note behavior change?
... Is it enough to note it in the change-log or should we trigger a E_DEPRECATED/E_STRICT error in PHP5.next in cases two strings will be compared as numbers and tell in the massage what to do.

===== Unaffected PHP Functionality =====

Only non-strict string to string comparison will be affected.

===== Future Scope =====
This sections details areas where the feature might be improved in future, but that are not currently proposed in this RFC.

===== Proposed Voting Choices =====
Voting Choices: Yes or No

This RFC requires a 2/3 majority as it changes the language itself.

===== Patches and Tests =====
https://github.com/marc-mabe/php-src/tree/rfc/binary_string_comparison

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== References =====
http://php.net/manual/en/language.operators.comparison.php
http://php.net/manual/en/types.comparisons.php
http://php.net/manual/en/language.types.string.php#language.types.string.conversion
https://bugs.php.net/bug.php?id=54547

===== Rejected Features =====
None so far. 