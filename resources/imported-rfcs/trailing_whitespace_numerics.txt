====== PHP RFC: Permit trailing whitespace in numeric strings ======
  * Version: 1.0
  * Date: 2017-01-18
  * Author: Andrea Faulds, ajf@ajf.me
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/trailing_whitespace_numerics

This is a suggested template for PHP Request for Comments (RFCs). Change this template to suit your RFC.  Not all RFCs need to be tightly specified.  Not all RFCs need all the sections below.
Read https://wiki.php.net/rfc/howto carefully!

===== Introduction =====
PHP currently ignores whitespace at the start of a numeric string: <php>"  123"</php> and <php>"123"</php> are considered equivalent. However, it considers whitespace at the end of a numeric string to be “non-well-formed”: <php>+"123   "</php> produces an <php>E_NOTICE</php>-level error, and <php>\is_numeric("123   ")</php> returns <php>false</php>.

This can be unhelpful. One reason for this is because trailing whitespace occurs in similar situations to leading whitespace. For example, a user might copy and paste a number into a form field. The likelihood of unintentionally pasting trailing whitespace, in this case, is similar to pasting leading whitespace, and both are equally meaningless. PHP unhelpfully only complains about the latter: whether you want to reject unneeded whitespace, or ignore it, PHP's behaviour only does half the job.

Additionally, there are some scenarios specific to trailing whitespace. For instance, when reading a number out of multi-line text, a string may contain line-ending characters. Currently, PHP would complain when this number is used.

Moreover, accepting leading whitespace yet rejecting trailing whitespace is inconsistent and surprising.

===== Proposal =====
This RFC proposes to change PHP's behaviour, such that trailing whitespace is accepted in a numeric string, much like leading whitespace. This would make PHP's more consistent, less surprising, and save time by avoiding the need to trim trailing whitespace from numeric strings.

For the PHP interpreter, this would be accomplished by modifying the ''is_numeric_string'' C function (and its variants) in the Zend Engine. This would therefore affect PHP features which make use of this function, including:

* [[rfc:invalid_strings_in_arithmetic|Arithmetic operators]] will no longer produce an <php>E_NOTICE</php>-level error when used with a numeric string with trailing whitespace
* The <php>int</php> and <php>float</php> type declarations will, in weak typing mode, no longer produce an <php>E_NOTICE</php>-level error when passed a numeric string with trailing whitespace
* Type checks for built-in/extension (“internal”) PHP functions will, in weak typing mode, no longer produce an <php>E_NOTICE</php>-level error when passed a numeric string with trailing whitespace
* The comparison operators will now consider numeric strings with trailing whitespace to be numeric, therefore meaning that, for example, <php>"123  " == 123</php> produces <php>true</php>, much like <php>"  123" == 123</php> does at present
* The <php>\is_numeric</php> function will now accept numeric strings with trailing whitespace, and return <php>true</php>

The PHP language specification's [[https://github.com/php/php-langspec/blob/master/spec/05-types.md#the-string-type|definition of str-numeric]] would be modified to be as follows (additions shown in bold):

<blockquote>
''str-numeric::''
''   str-whitespace''<sub>''opt''</sub>''   sign''<sub>''opt''</sub>''   str-number    ''**''str-whitespace''**<sub>**''opt''**</sub>''
''
</blockquote>

===== Backward Incompatible Changes =====
<php>\is_numeric()</php> now returns <php>true</php> rather than <php>false</php> for numeric strings with trailing whitespace. The author does not expect this is likely to cause significant backwards-compatibility issues, because only trailing whitespace and not not leading whitespace being invalid is uncommon. Additionally, the new behaviour may be the one intended.

===== Proposed PHP Version(s) =====
This is proposed for the next PHP 7.x. At the time of writing, that would be PHP 7.2.

===== RFC Impact =====
==== To Existing Extensions ====
Any extension using ''is_numeric_string'', its variants, and other functions which themselves use it, on will be affected.

==== To Opcache ====
FIXME: I have not yet verified the RFC's compatibility with opcache.

===== Unaffected PHP Functionality =====
This does not affect the filter extension, which handles numeric strings itself in a different fashion.

===== Future Scope =====
None conceivable.

===== Proposed Voting Choices =====
This is a language change, and requires a 2/3 majority. The vote is a two-choice Yes/No vote on whether to accept the RFC and apply its changes to the next applicable version of PHP.

===== Patches and Tests =====
A pull request for a complete PHP interpreter patch, including a test file, can be found here: https://github.com/php/php-src/pull/2317

FIXME: There is not yet a language specification patch.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
  - a link to the language specification section (if any)