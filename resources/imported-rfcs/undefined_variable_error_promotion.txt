====== PHP RFC: Undefined Variable Error Promotion ======
  * Version: 0.9
  * Date: 2022-02-22
  * Author: Mark Randall marandall@php.net
  * Status: Draft
  * Target: PHP 9.0
  * First Published at: https://wiki.php.net/rfc/undefined_variable_error_promotion

===== Introduction =====
Undefined variables are those that have not yet been initialised with a value prior to being read. Accessing an undefined variable currently emits an E_WARNING and treats the variable as if it were a null, but does not otherwise interrupt execution of the code unless a custom error handler has been installed.

===== Proposal =====
This RFC proposes that accessing an undefined variable is rendered illegal behaviour in the next major version of PHP, and will result in an Error exception being thrown if it occurs.

Undefined variable access can come about in one of 3 main ways:

The variable only becomes defined when executing certain branching code paths, for example setting a value within an if statement, or within anything which might include an if statement under the hood, such as a loop.

<code php>
  if ($user->admin) { 
     $restricted = false;
  }
  
  if ($restricted) { 
     die('You do not have permission to be here');
  }
</code>

A typo in the variable name.

<code php>
  $name = 'Joe';
  echo 'Welcome, ' . $naame;
</code>

Accessing a variable for use with a post-increment operator $foo++ sometimes used with counters (as post-increment on null is special-cased).

<code php>
  while ($item = $itr->next()) { 
     /* do something */
     $counter++; /* potential undefined variable read #1 */
  }
  
  /* potential undefined variable read #2 which is the same as the 
   * first mechanism (variable undefined due to branching logic) */
  echo 'You scanned ' . $counter . ' items'; 
</code>

Of these 3 mechanisms, the first two are almost always unintentional bugs, and while the third can sometimes be a deliberate action, it too is often the result of a coding error.

Error conditions 1 and 3 both have fully backwards compatible solutions already available, which simply require initialising the variable to a sensible default prior to its use.  

<code php>
  $restricted = true;
  if ($user->admin) { 
     $restricted = false;
  }
  
  if ($restricted) { 
     die('You do not have permission to be here');
  }
</code>

<code php>
  $counter = 0;
  while ($item = $itr->next()) { 
     $counter++;
  }
  
  echo 'You scanned ' . $counter . ' items';
</code>


===== Benefits =====
The primary benefit for this change is to eliminate an entire class of userland bugs related to the consequences of accessing and using these undefined variables and their fallback to their engine-provided default. By doing so we offer another layer of protection against PHP applications continuing their execution after entering a likely unintended state.

While this alone should be enough, Nikita, author of the RFC that promoted access to an E_WARNING offered the following technical benefits to promoting to an error:

<blockquote>
The big problem with these (from a pure implementation perspective) is that we need to throw the warning and continue running. But the warning might call a custom error handler, which may modify state that the virtual machine does not expect to be modified. The PHP VM plays increasingly complex games to prevent this, but despite all that complexity, this problem cannot be fully solved while this remains a warning, rather than an exception.

Same goes for other warnings in the engine of course, undefined variables are just the biggest offender, because this particular warning can occur as part of nearly any operation.

Nikita Popov (https://news-web.php.net/php.internals/116953)
</blockquote>

===== Backward Incompatible Changes =====
Accessing an undefined variable will result in an Error exception being thrown.

Although accessing undefined variables has not been considered good practice for a long time, and has been an E_WARNING since  PHP 8 (which will be 5 years old by the time PHP 9 arrives) there will still be an amount of code out there that will experience additional errors being thrown as a result of this change.


===== Proposed PHP Version(s) =====
This change is targeted for PHP 9.0. 

Although the target version is mandated by our traditional breaking changes policy, it is also the intent of this RFC to give multiple years of notice that this change will be coming, affording the greatest opportunity for developers to modify their code in anticipation of this change.

A minor change may be included in the next minor version to change the existing warning message to indicate the warning will become an error in 9.0.

===== Proposed Voting Choices =====
Yes / No to promote to Error.

===== References =====
* https://wiki.php.net/rfc/engine_warnings

