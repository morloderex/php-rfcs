====== PHP RFC: Scalar Type Hints ======
  * Version: 0.1
  * Date: 2014-12-14
  * Author: Andrea Faulds, ajf@ajf.me
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/scalar_type_hints

===== Introduction =====

This RFC proposes the addition of four type hints for scalar types: ''int'', ''float'', ''string'' and ''bool''. These follow the same casting rules as used for internal functions (i.e. those defined by PHP extensions and written in native code).

===== Example =====

Let's say we have a PHP class that represents an [[http://php.net/elephpant.php|ElePHPant]]. We put scalar type hints on our constructor arguments.

<code php>
class ElePHPant {
    public $name, $age, $cuteness, $evil;
    public function __construct(string $name, int $age, float $cuteness, bool $evil) {
        $this->name = $name;
        $this->age = $age;
        $this->cuteness = $cuteness;
        $this->evil = $evil;
    }
}
</code>

We can then create a new instance like this, and it's valid since the parameter types exactly match:

<code php>
$sara = new ElePHPant("Sara", 7, 0.99, FALSE);
</code>

We could also pass values that are convertible, just like with extension functions, like so:

<code php>
$nelly = new ElePHPant(new Stringable("Nelly"), "7 years", "0.9", "1");
$evan = new ElePHPant(1234, "9", 0.3, 0);
</code>

([[https://gist.github.com/TazeTSchnitzel/613b8ec4c629b945f92f|Stringable]] definition)

Not all values are convertible, however, so the following would error:

<code php>
$foo = new ElePHPant([], new StdClass, fopen("data:text/plain,foobar"), NULL);
</code>

===== Background =====

PHP has had parameter type hints for class names since PHP 5.0, <php>array</php>s since PHP 5.1 and <php>callable</php>s since PHP 5.4. Unfortunately, PHP's scalar types haven't been hintable. This has meant that the signatures of functions which take scalar arguments lack type information, requiring workarounds such as docblocks to document the parameter types, and requiring programmers to validate or convert arguments manually.

Previous attempts at adding scalar type hints, such as the [[rfc:scalar_type_hinting_with_cast|Scalar Type Hints with Casts]] RFC, have failed. In particular, that specific proposal was inconsistent with the type conversion rules used in other parts of the language. However, this RFC follows exactly the same conversion rules as (and shares the implementation used by) function defined by native code extensions, with the exception of the handling of <php>NULL</php> (see the Details section). Thus, it avoids the problem of inconsistency.

To quote [[http://news.php.net/php.internals/71525|Rasmus]]:

> PHP is and should remain:
> 1) a pragmatic web-focused language
> 2) a loosely typed language
> 3) a language which caters to the skill-levels and platforms of a wide range of users

Input coming from the web, such as query string parameters or POST bodies, is likely to be in string form. By performing conversion from strings automatically, just as with existing extension functions, this RFC is in keeping with PHP being a web-focused language. By allowing conversion instead of requiring strict type matches, this RFC is in keeping with PHP being a loosely-typed language. Finally, by not forcing users to worry about type conversions, it keeps the language accessible to beginners, keeping PHP a language catering to all skill-levels. Therefore, I feel that this RFC keeps all three of these principles true. 

No type hint for resources was included, to avoid preventing the future updating of extensions that currently use resources to use classes.

===== Details ====

Four new reserved words are introduced: ''int'', ''float'', ''string'' and ''bool'', and they are allowed as type hints. When they are used., internally the validation and conversion functions used by the Fast Parameter Parsing API are called. Thus, they exactly match the behaviour of ''zend_parse_parameters''. The only exception to this is the handling of ''NULL'': in order to be consistent with our existing type hints for classes, callables and arrays, ''NULL'' is not accepted by default, unless the parameter is explicitly given a default value of ''NULL''. This would work well with the draft [[rfc:nullable_typehints|Declaring Nullable Types]] RFC.

===== Backward Incompatible Changes =====

''int'', ''float'', ''string'' and ''bool'' become reserved words. They previously weren't due to the lexer special-casing casts.

===== Proposed PHP Version(s) =====

This is proposed for the next PHP x, currently PHP 7.

===== RFC Impact =====

==== To Existing Extensions ====

''ext/reflection'' will need to be updated in order to support type hint reflection for parameters. This hasn't yet been done.

==== Unaffected PHP Functionality ====

This doesn't affect the cast operators, although the patch makes ''(int)'' be lexed as ''('', ''T_INT_TYPE'' and '')'' for nicer error messages, while it was previously lexed as ''T_INT_CAST''.

===== Open Issues =====

Currently, this only allows the syntax ''int'' for the integer type hints and ''float'' for the float type hint. Should we add ''integer'', ''long'' and ''double'' too, for consistency with casts?

===== Future Scope =====

If return types were added, such as with the [[rfc:returntypehinting|Return Type Hinting]] RFC, scalar type hints should be supported. A possible matter of debate would be whether or not to allow conversions in that case, given that some of the reasons cited for parameter type conversion may not be applicable.

===== Proposed Voting Choices =====

As this is a language change, this RFC requires a 2/3 majority to pass. It will be a Yes/No vote.

===== Patches and Tests =====

There is a working, but incomplete patch that has tests here: https://github.com/TazeTSchnitzel/php-src/compare/scalar_type_hints_2_electric_boogaloo

There is not yet a language specification patch.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== References =====

  * Previous discussions on the internals mailing list about scalar type hinting: [[http://marc.info/?l=php-internals&w=2&r=1&s=scalar+type+hinting&q=t|one]], [[http://marc.info/?w=2&r=1&s=scalar+type+hint&q=t|two]], [[http://marc.info/?t=133056746300001&r=1&w=2|three]], [[http://marc.info/?w=2&r=1&s=scalar+type&q=t|four]]

===== Changelog =====

  * v0.1 - Initial draft