====== PHP RFC: Deprecations for PHP 8.0 ======
  * Date: 2019-07-23
  * Author: Nikita Popov <nikic@php.net>, George Peter Banyard <girgias@php.net>
  * Status: Draft

===== Introduction =====

The RFC proposes to deprecate the listed functionality in PHP 8.0 and remove it in PHP 9.

The following list provides a short overview of the functionality targeted for deprecation, while more detailed explanation is provided in the Proposal section:

  * ''date_sunrise()'' and ''date_sunset()''
  * ''DateTimeInterface::ISO8601''/''DATE_ISO8601''
  * ''get_browser''
  * <php>get_class()</php> without argument

===== Proposal =====

Each feature proposed for deprecation is voted separately and requires a 2/3 majority. All votes refer to deprecation in PHP 8.0 and removal in PHP 9.0.

==== date_sunrise() and date_sunset() ====

These two functions have the signature:

<PHP>
function date_sunset(
    int $timestamp,
    int $format = SUNFUNCS_RET_STRING,
    float $latitude = ini_get("date.default_latitude"),
    float $longitude = ini_get("date.default_longitude"),
    float $zenith = ini_get("date.sunset_zenith"),
    float $gmt_offset = 0
): mixed;
</PHP>

This function depends on ini settings that specify the "default" latitude and longitude, a concept that makes very little sense. Additionally it requires familiarity with appropriate zenith values to use for different purposes.

''date_sunset()'' and ''date_sunrise()'' have since been superseded by ''date_sun_info()'':

<PHP>
function date_sun_info(int $time, float $latitude, float $longitude): array;
</PHP>

This function does not use "default" latitude and longitude, and returns an associative array of multiple different definitions of the sunrise/sunset concept.

The proposal is to deprecate ''date_sunset()'' and ''date_sunrise()'' in favor of ''date_sun_info()''. Once these functions are removed, the ini settings ''date.default_latitude'', ''date.default_longitude'' and ''date.sunset_zenith'' will also be removed.

This was initially discussed in: https://github.com/php/php-src/pull/4423.

====  DateTimeInterface::ISO8601/DATE_ISO8601 ====
This format is misleading as per the documentation it is actually not compatible with ISO-8601 and ''DateTime::ATOM''/''DATE_ATOM'' should be used instead.


==== get_browser() ====

This function is part of the standard library but requires an external dependency (browscap.ini) to work.
Moreover, userland implementations are faster than this function. (See user note 122181: http://docs.php.net/manual/en/function.get-browser.php#122181)

nikic: I disagree.

==== key(), current(), next(), prev(), reset() on objects ====

tbd

==== Accessing static members on traits ====

tbd

==== get_class() without argument ====

WIP

This is rather exotic and is equivalent to using <php>__CLASS__</php> or <php>self::class</php> which are more explicit as the behaviour could be unexpected within a child class (see example 2 from the documentation page) and the expected behaviour is probably <php>get_called_class()</php>/<php>static::class</php> with LSB.

==== mb_check_encoding() with no arguments ====

WIP
The behaviour documented is not implemented

==== FILE_BINARY and FILE_TEXT constants ====
They have no effect and were introduced for "forward compatibility" in 5.2.7, but have never been utilized.
See https://github.com/php/php-src/pull/5556 which pointed it out

==== Passing bool for $amountOrUpOrDown argument of IntlCalendar::roll() ====
The usage of a boolean value where true = 1 and false = -1 is rather surprising and using these values explicitly is clearer in the intended behaviour.

===== Backward Incompatible Changes =====

For PHP 8.0 additional deprecation notices will appear. For PHP 9.0 the previously deprecated functionality will no longer be available.