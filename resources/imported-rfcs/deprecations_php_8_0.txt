====== PHP RFC: Deprecations for PHP 8.0 ======
  * Date: 2019-07-23
  * Author: Nikita Popov <nikic@php.net>, George Peter Banyard <girgias@php.net>
  * Status: Draft

===== Introduction =====

The RFC proposes to deprecate the listed functionality in PHP 8.0 and remove it in PHP 9.

The following list provides a short overview of the functionality targeted for deprecation, while more detailed explanation is provided in the Proposal section:

  * ''date_sunrise()'' and ''date_sunset()''
  * ''key()'', ''current()'', ''next()'', ''prev()'', and ''reset()'' on objects
  * ''get_class()'' without argument
  * ''FILE_BINARY'' and ''FILE_TEXT'' constants
  * Passing bool for ''$amountOrUpOrDown'' argument of ''IntlCalendar::roll()''

===== Proposal =====

Each feature proposed for deprecation is voted separately and requires a 2/3 majority. All votes refer to deprecation in PHP 8.0 and removal in PHP 9.0.

==== date_sunrise() and date_sunset() ====

These two functions have the signature:

<PHP>
function date_sunset(
    int $timestamp,
    int $format = SUNFUNCS_RET_STRING,
    float $latitude = ini_get("date.default_latitude"),
    float $longitude = ini_get("date.default_longitude"),
    float $zenith = ini_get("date.sunset_zenith"),
    float $gmt_offset = 0
): mixed;
</PHP>

This function depends on ini settings that specify the "default" latitude and longitude, a concept that makes very little sense. Additionally it requires familiarity with appropriate zenith values to use for different purposes.

''date_sunset()'' and ''date_sunrise()'' have since been superseded by ''date_sun_info()'':

<PHP>
function date_sun_info(int $time, float $latitude, float $longitude): array;
</PHP>

This function does not use "default" latitude and longitude, and returns an associative array of multiple different definitions of the sunrise/sunset concept.

The proposal is to deprecate ''date_sunset()'' and ''date_sunrise()'' in favor of ''date_sun_info()''. The ini settings ''date.default_latitude'', ''date.default_longitude'' and ''date.sunset_zenith'' are marked as deprecated in the documentation. In the next major version, both the functions and the ini settings will be removed.
This was initially discussed in: https://github.com/php/php-src/pull/4423.

==== key(), current(), next(), prev(), reset() on objects ====

The ''key()'' family of functions, which are used to manipulate the internal array pointer, also accept objects. In this case they work on the mangled property table. That is, using ''key()'' and friends on an object is essentially the same as using them on ''get_mangled_object_vars($object)''.

This catches many people off guard, because they expect ''key()'' etc. to integrate with the iterator interface. That is, if the passed object implements ''Iterator'' then ''key($object)'' should perform an ''$object->key()'' call. The water here have been further muddied by ''ArrayObject'', which prior to PHP 7.4 was the only object where ''key()'' etc. //did// effectively integrate with the iterator interface.

There are principally two ways to resolve this: The first is to deprecate the use of ''key()'' etc on objects, and instead require people to perform an explicit ''(array)'' cast or ''get_mangled_object_vars()'' call beforehand. The other is to actually make these functions integrate with iterators. The issue I see with the latter is that we would only be able to support the ''Iterator'' interface proper, but general ''Traversable''s: For these ''IteratorAggregate::getIterator()'', or the internal ''get_iterator()'' handler need to be called once at the start, which is not possible through the array iteration interface, as it consists of multiple independent functions. Additionally, the ''prev()'' function cannot be implemented for iterators.

As such, the proposal is to deprecate key(), current(), next(), prev() and reset() on objects. The suggested replacement is to cast the object to array first, or call ''get_mangled_object_vars()'', depending on what the intention is.

==== get_class() without argument ====

In PHP 7.2, [[rfc:get_class_disallow_null_parameter|passing null to ''get_class()'']] was forbidden, because this behavior was very bug prone. TODO

This is rather exotic and is equivalent to using <php>__CLASS__</php> or <php>self::class</php> which are more explicit as the behaviour could be unexpected within a child class (see example 2 from the documentation page) and the expected behaviour is probably <php>get_called_class()</php>/<php>static::class</php> with LSB.

==== get_parent_class() without argument ====
Similar to the <php>get_class()</php> case from before, it is more explicit and less surprising to use <php>parent::class</php> or <php>get_parent_class($this)</php> within an object than relying on the variant without arguments.

See https://github.com/php/php-src/pull/5627#discussion_r434687257 for better rationale

https://github.com/briannesbitt/Carbon/blob/4b9bd835261ef23d36397a46a76b496a458305e5/src/Carbon/Traits/Serialization.php#L130-L132

==== Accessing static members on traits ====

tbd

==== mb_check_encoding() with no arguments ====

WIP
The behaviour documented is not implemented

==== FILE_BINARY and FILE_TEXT constants ====

These were introduced in PHP 5.2.7 for forward compatibility with PHP 6, but don't have any effect. These constants are especially confusing because ''fopen()'' supports ''b'' (binary) and ''t'' (text) modes, which //do// have an effect. Namely, they control handling of newlines on Windows.

The proposal is to deprecate the ''FILE_BINARY'' and ''FILE_TEXT'' constants.

This was pointed out in: https://github.com/php/php-src/pull/5556

==== Passing bool for $amountOrUpOrDown argument of IntlCalendar::roll() ====

<php>IntlCalendar::roll()</php> accepts an integer which specifies how much to add to a given field. The integer can be negative to subtract.

However, it also accepts a boolean argument, in which case ''true'' is interpreted as ''1'' and ''false'' is interpreted as ''-1''. This does not appear to be actually useful for anything, makes for a confusing function signature, and violates PHP's usual type coercion rules.

The proposal is to deprecate passing a boolean to this method argument.

===== Backward Incompatible Changes =====

For PHP 8.0 additional deprecation notices will appear. For PHP 9.0 the previously deprecated functionality will no longer be available.

===== Removed from this proposal =====

The following entries were originally added to this proposal and then dropped.

==== DateTimeInterface::ISOISO8601 ====

Explain why.

==== get_browser() function ====

Explain why.