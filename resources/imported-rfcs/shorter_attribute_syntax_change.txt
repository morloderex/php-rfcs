====== PHP RFC: Shorter Attribute Syntax Change ======
  * Version: 0.3
  * Date: 2020-08-04
  * Author: Derick Rethans, Benjamin Eberlei
  * Status: In Voting
  * First Published at: https://wiki.php.net/rfc/shorter_attribute_syntax_change

===== Introduction =====

Based on the expressions of concern over using ''@@'' for Shorter Attribute Syntax RFC https://wiki.php.net/rfc/shorter_attribute_syntax, I propose to use ''#[]'', ''@[]'', or the original ''<< … >>''  instead. Please keep in mind that we want the best syntax, and not necessarily the best **looking** syntax.

The main concern is that ''@@'' has **no ending symbol** and it's **inconsistent** with the language that it would be the only declaration or statement in the whole language that has no ending termination symbol.

===== Proposal =====

Pick the **best** syntax from the following options, taking into account the different pros and cons:

^ Syntax                                        ^ ''@@Attr'' ^ ''#[Attr]'' ^ ''@[Attr]'' ^ ''<<Attr>>'' ^
| Number of required Characters                 | 2     | 3       | 3       | 4        |
| Has End Delimiter                             | //No//     | //Yes//     | //Yes//     | //Yes//      |
| Allows Grouping (Accepted in previous [[rfc:attribute_amendments|RFC]]¹)    | //No//     | //Yes//     | //Yes//     | //Yes//      |
| Forward Compatibilty in PHP 7                 | //No//     | //Yes//     | //No//      | //No//       |
| Breaks BC of valid PHP 7 code                 | //Yes//    | //Yes//     | //Yes//     | //No//       |
| Used by other language                        | //No//     | //Yes//     | //No//      | //Yes//      |
| Familiar with Docblock Usage                  | //Yes//    | //No//      | //No//      | //No//       |
| Tokens used                                   | //New T_ATTRIBUTE// | //New T_ATTRIBUTE// | //New T_ATTRIBUTE// | Existing T_SL, T_SR |
| Changes the lexing of **remaining** tokens    | //No//     | //Yes//     | //No//      | //No//       |
| Target                                        | 8.0    | 8.0     | 8.0     | 8.0      |
| Patch                                         | -      |         | [[https://github.com/php/php-src/pull/5928|patch]] | |

¹ If the chosen syntax allows grouping, it will be reintroduced.

Explanations:

**Has End Delimiter** - An attribute syntax with ending delimiter means that the declaration of attributes is "always" enclosed in a start and an ending symbol, to more clearly seperate them from other parts of the code.

**Allows Grouping** - Grouping syntax means that you can declare multiple attributes using one syntax construct.

**Forward Compatibility in PHP 7** means that you can use at least a subset of the new syntax in PHP 7 without the code causing parsing errors. It does not mean that you can already use attributes in PHP 7 already.

**Breaks BC of valid PHP 7 code** means that the syntax chosen for attribute is alreay valid code with different meaning in PHP 7. As such existing code would need to change.

**Used by other language** means that this exact syntax is or was used by at least one other programming language for the same feature (Annotations, Attributes, Metadata).

**Familiar with Docblock Usage** means that it resembles syntax that is already used at the moment in annotations made using PHP docblock comments.

**Tokens used** explains if the syntax introduces a new token into the language or re-uses existing ones.

**Changes lexing of remaining tokens** indicates that a newly introduced token changes the behaviour of existing tokens. In the example of #[ the occurance of a # would have previously always signified a comment, but that now changes to become an attribute instead when followed by [.

===== Syntax Side by Side =====

All syntaxes side by side in order of the table above. Syntaxes that would allow the use of a group syntax demonstrate grouped use on the id property and ungrouped use on the email property.

<code php>
class User
{
    @@ORM\Id @@ORM\Column("integer") @@ORM\GeneratedValue
    private $id;
 
    @@ORM\Column("string", ORM\Column::UNIQUE)
    @@Assert\Email(["message" => "The email '{{ value }}' is not a valid email."])
    private $email;
}

class User
{
    #[ORM\Id, ORM\Column("integer"), ORM\GeneratedValue]
    private $id;
 
    #[ORM\Column("string", ORM\Column::UNIQUE)]
    #[Assert\Email(["message" => "The email '{{ value }}' is not a valid email."])]
    private $email;
}

class User
{
    @[ORM\Id, ORM\Column("integer"), ORM\GeneratedValue]
    private $id;
 
    @[ORM\Column("string", ORM\Column::UNIQUE)]
    @[Assert\Email(["message" => "The email '{{ value }}' is not a valid email."])]
    private $email;
}

class User
{
    <<ORM\Id, ORM\Column("integer"), ORM\GeneratedValue>>
    private $id;
 
    <<ORM\Column("string", ORM\Column::UNIQUE)>>
    <<Assert\Email(["message" => "The email '{{ value }}' is not a valid email."])>>
    private $email;
}
</code>

===== Proposed PHP Version(s) =====
PHP 8.0

===== Voting =====
A first vote (⅔rds) to allow the vote to change the syntax

<doodle title="Are you okay voting on a better attribute syntax for PHP 8.0?" auth="derick" voteType="single" closed="false">
   * Yes
   * No
</doodle>

An STV vote among all the qualifying syntaxes, running from August 10th, 08:00 UTC to August 23, 24:00 UTC.

With STV you SHOULD rank **all** the choices in order. Don't pick the same option more than once, as that invalidates your vote.

First choice:
<doodle title="New attribute syntax choice #1" auth="derick" voteType="single" closed="false">
   * @@Attr
   * #[Attr]
   * @[Attr]
   * <<>>
</doodle>

Second choice:
<doodle title="New attribute syntax choice #2" auth="derick" voteType="single" closed="false">
   * @@Attr
   * #[Attr]
   * @[Attr]
   * <<>>
</doodle>

Third choice:
<doodle title="New attribute syntax choice #3" auth="derick" voteType="single" closed="false">
   * @@Attr
   * #[Attr]
   * @[Attr]
   * <<>>
</doodle>

Fourth choice:
<doodle title="New attribute syntax choice #4" auth="derick" voteType="single" closed="false">
   * @@Attr
   * #[Attr]
   * @[Attr]
   * <<>>
</doodle>
===== Implementation =====
After the project is implemented, this section should contain
  * the version(s) it was merged into
  * a link to the git commit(s)
  * a link to the PHP manual entry for the feature
  * a link to the language specification section (if any)

===== References =====
Links to external references, discussions or RFCs
  * Original RFC: https://wiki.php.net/rfc/shorter_attribute_syntax
  * https://externals.io/message/111101
  * https://www.reddit.com/r/PHP/comments/hjpu79/it_is/
  * An RFC that by coincidence fixes the original parser conflict: https://wiki.php.net/rfc/namespaced_names_as_token

===== Updates ======

   * v0.3: Removed "Difficulties for Userland Parsers" as its a subjective opinion and boils down to the fact that a new token T_ATTRIBUTE is introduced in some syntaxes that would include tokens that were parsed differently in previous PHP versions. Added "Tokens used" and "Changes the lexing of remaining tokens".