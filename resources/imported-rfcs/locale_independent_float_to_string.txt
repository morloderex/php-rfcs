====== PHP RFC: Locale-independent float to string cast ======
  * Version: 0.1
  * Date: 2020-03-11
  * Author: George Peter Banyard <girgias@php.net>, Máté Kocsis <kocsismate@php.net>
  * Target Version: PHP 8.0
  * Status: Draft
  * Implementation: https://github.com/php/php-src/pull/5224

===== Introduction =====
PHP's float's string representation depends on the current locale as the decimal separator varies between locales. This can lead to subtle bugs in certain locales (notably the German, French, and Spanish ones) as the ''float'' to ''string'' cast won't yield the original value.

===== Proposal =====
Make PHP's float to string cast locale-independent, meaning it will always use the dot ''.'' decimal separator, in PHP 8.0. Apart from casting, the change would also extend to some functions in ext/standard that convert ''float''s to ''string''s:

<code php>

setlocale(LC_ALL, "de_DE");
$f = 3.14;

(string) $f;			// 3,14 => 3.14
strval($f);			// 3,14 => 3.14
var_dump($f);			// string(4) "3,14" => string(4) "3.14"
printf("%.2f\n", $f);		// 3,14 => 3.14
debug_zval_dump($f);		// float(3,14) => float(3.14)

echo var_export($f, true);	// remains 3.14
echo serialize($f);		// remains d:3.14
echo json_encode($f);		// remains 3.14

</code>

The issue has been raised multiple times over the years on the PHP Internals mailing list [1] [2] and as bug reports [3] [4] [5], but no action has been taken yet, however there are many reasons why the problem has to be addressed:

Having a consistent string representation for floats is very important. Such values may be stored in database columns of string type, or sent to an external API using a protocol where everything is represented as strings, such as HTTP. Therefore, the external API might refuse these values as not well formed, or even worse, they might try to interpret them as numerical values by dropping everything past the decimal separator. Apart from this, the behaviour is not always easy to notice, and highly surprising, therefore does not follow the Principle of Least Astonishment. [6]

To make things even worse, locale-sensitive casting causes some weird inconsistencies and inexplicable bugs. For example, the ''float'' to ''string'' and ''string'' to ''float'' casts won't have the same result:

<code php>

setlocale(LC_ALL, "de_DE");

$f = 3.14;		// float(3,14)
$s = (string) $f;	// string(4) "3,14"
$f = (float) $s;	// float(3)

</code>

A special case of the previous example is when the float is directly concatenated with a string, in which case a compile-time optimization will produce the string before any locale could be set:

<code php>

setlocale(LC_ALL, "de_DE");

$s = 3.14 . "";		// string(4) "3.14"

</code>

===== Alternative Approaches =====
An alternative approach would be to deprecate <php>setlocale()</php> all together as this would, as a by-product, fix this issue.

===== Backward Incompatible Changes =====
Outputting floats as strings in locales which change the decimal separator will have a slightly different output. As this is only a cosmetic change, the benefits of having a consistent float to string conversion out-way the impact which may be caused by this change.

To retain the old behaviour users should use the <php>number_format()</php> function or Intl's <php>NumberFormatter</php> class to format the number in the desired way.

===== Future Scope =====
None.

===== Proposed Voting Choices =====
The primary vote ("Make ''float'' to ''string'' casts always locale-independent?") requires 2/3 majority.

===== References =====
[1] https://externals.io/message/69458 \\
[2] https://externals.io/message/103638 \\
[3] https://bugs.php.net/bug.php?id=39305 \\
[4] https://bugs.php.net/bug.php?id=55160 \\
[4] https://bugs.php.net/bug.php?id=79317 \\
[6] https://en.wikipedia.org/wiki/Principle_of_least_astonishment \\
