====== PHP RFC: __toArray() ======
  * Version: 0.1
  * Date: 2019-08-28
  * Author: Steven Wade, stevenwadejr@gmail.com
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/to-array

===== Introduction =====
PHP contains many [[https://www.php.net/manual/en/language.oop5.magic.php|magic methods]] that give a class greater control over its interaction with the language. The methods [[https://wiki.php.net/rfc/custom_object_serialization|__serialize() and __unserialize()]] give a class control over how it is serialized, <nowiki>__clone()</nowiki> allows control over how self copies are made, and <nowiki>__toString()</nowiki> allows a class to control how it is represented when converted to a string. 

This RFC proposes to add a new magic method called <nowiki>__toArray()</nowiki> to allow a class to control how it is represented when converted to an array.

===== Proposal =====
Example:
<code php>

class Person
{
    protected $name;
    protected $email;
    
    public $foo = 'bar';

    public function __construct(string $name, string $email)
    {
        $this->name = $name;
        $this->email  = $email;
    }

    public function __toArray()
    {
        return [
            'name' => $this->name,
            'email'  => $this->email,
        ];
    }
}

$person = new Person('John Doe', 'j.doe@example.com');
</code>

Example usage:

<code php>
print_r($person); // calls __toArray()

// Output
/*
Array
(
    [name] => John Doe
    [email] => j.doe@example.com
)
*/

$personArray = (array) $person; // casting triggers __toArray()
</code>

==== What this is ====
The example above shows the method <nowiki>__toArray()</nowiki> used in a type-casting context.  This proposal would have objects implementing the <nowiki>__toArray()</nowiki> magic method called within //any// array context including type hinting and return types.

Similar to PHP's current implementation of <nowiki>__toString()</nowiki>, a copy of the given object's value as an array is made upon conversion.

**Type Hinting**

<code php>
function foo(array $person) {
    var_dump($person);
}

// Output
/*
array(2) {
  ["name"]=>
  string(8) "John Doe"
  ["email"]=>
  string(17) "j.doe@example.com"
}
*/
</code>

**Return Type**

<code php>
function bar(Person $person): array {
    return $person;
}

var_dump(bar($person));

// Output
/*
array(2) {
  ["name"]=>
  string(8) "John Doe"
  ["email"]=>
  string(17) "j.doe@example.com"
}
*/
</code>

**array_*  and built-in functions**

The array operating functions listed on the [[https://www.php.net/manual/en/ref.array.php|Array Functions]] would first convert an object implementing the <nowiki>__toArray()</nowiki> method before continuing operations.

<code php>
print_r(array_keys($person));

// Output
/*
Array
(
    [0] => first
    [1] => email
)
*/
</code>

==== What this is not ====
This proposal does not allow accessing and setting values as you would in a normal array, that functionality remains with classes implementing the [[https://www.php.net/manual/en/class.arrayaccess.php|ArrayAccess]] interface.

Array functions that operate on an array by reference such as <nowiki>sort</nowiki> or <nowiki>shuffle</nowiki> will not work on an object implementing <nowiki>__toArray()</nowiki> under this proposal.

===== Backward Incompatible Changes =====
:?: Help needed

===== Proposed PHP Version(s) =====
Next PHP version (target 8.0)

===== RFC Impact =====
==== To SAPIs ====
:?: Help needed

==== To Existing Extensions ====
:?: Help needed

==== To Opcache ====
:?: Help needed

===== Proposed Voting Choices =====
Vote will require 2/3 majority

===== Patches and Tests =====
No patch exists yet. A [[https://github.com/sgolemon/php-src/tree/experimental.toarray|proof of concept]] for type casting was created by Sara Golemon, but no official patch has been created.  Will need help with this.

===== References =====
*PHP Manual: [[https://www.php.net/manual/en/language.oop5.magic.php|magic methods]], [[https://www.php.net/manual/en/ref.array.php|Array Functions]], [[https://www.php.net/manual/en/class.arrayaccess.php|ArrayAccess]] . 
*PHP RFC: [[https://wiki.php.net/rfc/custom_object_serialization|New custom object serialization mechanism]] . 
*Initial idea and discussion: [[https://externals.io/message/105589]] . 

===== Rejected Features =====
