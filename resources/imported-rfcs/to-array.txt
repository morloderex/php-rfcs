====== PHP RFC: __toArray() ======
  * Version: 0.1
  * Date: 2019-08-28
  * Author: Steven Wade, stevenwadejr@gmail.com
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/to-array

===== Introduction =====
PHP contains many [[https://www.php.net/manual/en/language.oop5.magic.php|magic methods]] that give a class greater control over its interaction with the language. The methods [[https://wiki.php.net/rfc/custom_object_serialization|__serialize() and __unserialize()]] give a class control over how it is serialized, <nowiki>__clone()</nowiki> allows control over how self copies are made, and <nowiki>__toString()</nowiki> allows a class to control how it is represented when converted to a string. 

This RFC proposes to add a new magic method called <nowiki>__toArray()</nowiki> to allow a class to control how it is represented when converted to an array.

===== Proposal =====
Example:
<code php>

class Person
{
    protected $name;
    protected $email;
    
    public $foo = 'bar';

    public function __construct(string $name, string $email)
    {
        $this->name = $name;
        $this->email  = $email;
    }

    public function __toArray()
    {
        return [
            'name' => $this->name,
            'email'  => $this->email,
        ];
    }
}

$person = new Person('John Doe', 'j.doe@example.com');
</code>

Example usage:

<code php>
print_r($person); // calls __toArray()

// Output
/*
Array
(
    [name] => John Doe
    [email] => j.doe@example.com
)
*/

$personArray = (array) $person; // casting triggers __toArray()
</code>

==== What this is ====
The example above shows the method <nowiki>__toArray()</nowiki> used in a type-casting context.  This proposal would have objects implementing the <nowiki>__toArray()</nowiki> magic method called within //any// array context including type hinting and return types.

Similar to PHP's current implementation of <nowiki>__toString()</nowiki>, a copy of the given object's value as an array is made upon conversion.

**Type Hinting**

<code php>
function foo(array $person) {
    var_dump($person);
}

// Output
/*
array(2) {
  ["name"]=>
  string(8) "John Doe"
  ["email"]=>
  string(17) "j.doe@example.com"
}
*/
</code>

**Return Type**

<code php>
function bar(Person $person): array {
    return $person;
}

var_dump(bar($person));

// Output
/*
array(2) {
  ["name"]=>
  string(8) "John Doe"
  ["email"]=>
  string(17) "j.doe@example.com"
}
*/
</code>

**array_*  and built-in functions**

The array operating functions listed on the [[ref.array.php|Array Functions]] would first convert an object implementing the <nowiki>__toArray()</nowiki> method before continuing operations.

<code php>
print_r(array_keys($person));

// Output
/*
Array
(
    [0] => first
    [1] => email
)
*/
</code>

==== What this is not ====
This proposal does not allow accessing and setting values as you would in a normal array, that functionality remains with classes implementing the [[class.arrayaccess.php|ArrayAccess]] interface.
Discuss what the RFC does not cover (accessing and setting values as  you would in a normal array.

===== Backward Incompatible Changes =====
What breaks, and what is the justification for it?

===== Proposed PHP Version(s) =====
Next PHP version (target 8.0)

===== RFC Impact =====
==== To SAPIs ====
Describe the impact to CLI, Development web server, embedded PHP etc.

==== To Existing Extensions ====
Will existing extensions be affected?

==== To Opcache ====
It is necessary to develop RFC's with opcache in mind, since opcache is a core extension distributed with PHP.

Please explain how you have verified your RFC's compatibility with opcache.

===== Open Issues =====
Make sure there are no open issues when the vote starts!

===== Unaffected PHP Functionality =====
List existing areas/features of PHP that will not be changed by the RFC.

This helps avoid any ambiguity, shows that you have thought deeply about the RFC's impact, and helps reduces mail list noise.

===== Future Scope =====
This section details areas where the feature might be improved in future, but that are not currently proposed in this RFC.

===== Proposed Voting Choices =====
Include these so readers know where you are heading and can discuss the proposed voting options.

===== Patches and Tests =====
Links to any external patches and tests go here.

If there is no patch, make it clear who will create a patch, or whether a volunteer to help with implementation is needed.

Make it clear if the patch is intended to be the final patch, or is just a prototype.

For changes affecting the core language, you should also provide a patch for the language specification.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged into
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
  - a link to the language specification section (if any)

===== References =====
Links to external references, discussions or RFCs

===== Rejected Features =====
Keep this updated with features that were discussed on the mail lists.