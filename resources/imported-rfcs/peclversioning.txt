===== Request for Comments: PECL Versioning =====

  * **Version:** 0.1
  * **Date:** 2008-03-21
  * **Author:** Steph Fox
  * **Status:** Under Discussion

=== The Problem ===
Currently, PECL versioning is fairly anarchic. Looking into the problem of distributing PECL binaries, this is one of the first areas that could and should be addressed.

=== A Solution? ===
I would like to formally propose that all PECL modules:

  * **Declare** PHP_EXTNAME_VERSION in php_extname.h
  * **Use** PHP_EXTNAME_VERSION in both the zend_module_entry declaration and PHP_MINFO() (the phpinfo() source)
  * **Tag** the version with -dev at all times except during a package release
  * **Use** a recognized versioning structure (so that version_compare() can be useful and users can easily see which version they have). That is, x.x.x(-dev|-alpha|-beta|RC)
  * **Utilize** $Revision or $Id as well as the version number in PHP_MINFO()

=== Some Facts and Figures ===
There are currently 214 modules in PECL. Of these:

  * 1 is written in PHP
  * 3 are SAPIs
  * 2 are no longer hosted in PECL (and should be deleted)
  * 1 doesn't declare a zend_module_entry
  * 1 doesn't have versioning capability (pre-PHP 4.1?)
  * 1 was a CVS error (and should be deleted)
  * 1 is the timezone library for ext/date, and probably has non-standard versioning requirements

Of the remaining 204:

  * 13 already use PHP_EXTNAME_VERSION declared in php_extname.h, but don't use -dev
  * 25 already declare and use a versioning macro in php_extname.h, but the name could be anything
  * 27 already declare and use a versioning macro somewhere in the source
  * 3 do the whole thing in reverse and use the release version from package.xml
  * 136 either hard-code the version, use $Id alone, use $Revision alone or ignore the whole thing

=== Final Comment ===
I can easily make a patch for the 'low-hanging fruit' so long as there's consensus on this. The rest of PECL may be a slower process.

=== Please add your comments below! ===
Comments from the pecl-dev mailing list + private mail:

Christopher Jones (privmail):

>>> The RFC doesn't really state what the problem is.  Are users losing track
>>> of what versions they have enabled?  Do they need a programmatic way 
>>> to check versions for compatibility?
>> 
>> WE need a programmatic way to check versions for compatibility! There's 
>> no sane way to distribute PECL modules without it. But I also had one heck
>> of a positive response from users at the London conference when I mentioned
>> 'sorting out PECL versioning'... so I guess they do too :)

> Yeah, but what did they mean?  Did they want a way to sort out stable from
> unstable packages?  Did they want a way to find out what packages were 
> compatible with what versions of PHP?

Both. But if we don't get plain versioning sorted out we can't even start
to talk about QA.

(Chris seemed happy with that.)

Derick (responding to Pierre on-list):

> - Add <tasks:replace from="@package_version@" to="version"
> type="package-info" /> for the php__[extensionname].h file

Sorry, but I don't think this is needed. Developers can just update this 
constant themselves when then package. I've been doing that with Xdebug 
for years without any problems. I don't like automagic changes of files 
on packaging, even more because with this idea the version would show up 
like @package_version@ during development. Instead of trying to handle 
devs like children and forcing this crap, just teach them to fill in the 
correct details.

Elizabeth (responding to Pierre on-list):

> Can you move it to the PECL namespace please?
> (http://wiki.php.net/pecl/rfc/start to list the RFCs and
> http://wiki.php.net/pecl/rfc/versioning)

But won't this RFC also affect extensions in core, Pierre?  If PECL has
a nice standard but the extensions in core ignore it...what's the point?

I think this sounds like a good idea - some solid versioning would  be a
very good thing.  Being able to use version_compare on all pecl
extensions, also a very good thing.  This is also a fairly simple
request - define your version, use it in php info.  I would also ask if
it would make sense to have the version exported to userland as a
PHP_EXTNAME_VERSION as PHP_VERSION is - not all extensions are kind
enough to give you a method of retrieving the version.

PHP_{extname}_VERSION gets my +1, I'll help with getting stuff updated...

Stas (on-list, responding to the RFC above):

I think it looks fine, except for one point:

Utilize $Revision or $Id as well as the version number in PHP_MINFO()

That doesn't seem very useful for me, since the $id would be the one for 
one file, and since CVS has individual versions for each file, that 
wouldn't tell us much about the rest of the extension, so for any 
practical purpose it's not better than version constant. I think having 
version in phpinfo() is good, but having CVS IDs doesn't make a lot of 
sense for extensions having more than one file.

my response: OK so that needs to be more of a 'you may also use...' than
an out and out rule. I put that because a high percentage of PECL devs are
already using it, presumably so that they can keep track of *exactly* when
something broke (in bug reports). It's more useful to the developer than
to the user.

=== Any more comments, please add them below ===



=== Update 22/3/08 ===
I have just committed a change to the Windows build script to enable independent versioning for PECL modules there, so long as those modules stick with defining PHP_EXTNAME_VERSION x.x.x[-dev|-alpha|-beta][RCx] in php_extname.h. Since the vast majority of PECL modules don't define that macro yet, this won't affect too many people - but please, do start using '-dev' if yours is one of the few that does!

