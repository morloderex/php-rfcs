====== PHP RFC: Declaring Nullable Types ======
  * Version: 0.1
  * Date: 2014-04-10 
  * Author: Levi Morrison <levim@php.net>
  * Status: Draft
  * First Published at: https://wiki.php.net/rfc/nullable_typehints

===== Introduction =====

It is common in many programming languages including PHP to allow a variable to be of some type or null. This null often indicates an error or lack of something to return. This can already be done using PHP's dynamic type system by omitting type declarations. It can also be done for parameters in PHP by using a default parameter of null. However, this does not work for return types which do not have a concept of a default value.

===== Proposal =====
This proposal adds a leading question mark symbol (''?'') to indicate that a type can also be <php>null</php>. This is allowed for any declared type including <php>array</php> and <php>callable</php>. Nullable types are permitted anywhere type declarations are allowed.

==== Position of ? ====
The ''?'' marker goes before the type, as in ''?Foo''. If the ''?'' came after the type, as in ''Foo?'', then we'd have an issue if we ever supported generics; ''<Foo?>'' would conflict with a closing ''?>''. Putting it before the type does not have a conflict (''<?Foo'') because at that moment we are already inside of a ''<?php'' declaration.

==== Inheritance in Parameters ====
The ''?'' marker cannot be removed in a sub-class; it can be added if not present in a super-class. This behavior is consistent with the Liskov substitution principle.

<PHP>
// Valid use: loosening the nullable marker in a parameter:
interface Fooable {
    function foo(Fooable $f);
}
interface LooseFoo extends Fooable {
    function foo(?Fooable $f);
}
</PHP>

<PHP>
// Invalid use: tightening the nullable marker in a parameter:
interface Fooable {
    function foo(?Fooable $f);
}
interface StrictFoo extends Fooable {
    function foo(Fooable $f);
}
</PHP>

==== Default Values ====

=== Differences from default values ===
Parameter with a nullable type do not have a default value. If omitted the value does not default to <php>null</php> and will result in an error:
<PHP>
function f(?callable $p) {}
f(); // invalid; function f does not have a default
</PHP>

=== Relationship with default values ==
PHP's existing semantics allow giving a <php>null</php> default value for a parameter to make it nullable and optional:

<PHP>
function foo_default(Bar $bar = null) {}

foo_default(new Bar); // valid
foo_default(null); // valid
foo_default(); // valid
</PHP>

This existing behaviour is not changed by this RFC. The new nullable type feature offers a subset of the functionality of <php>= null</php> with both making a parameter nullable but only <php>= null</php> making a parameter optional and have a default value:

<PHP>
function foo_nullable(?Bar $bar) {}

foo_nullable(new Bar); // valid
foo_nullable(null); // valid
foo_nullable(); // INVALID!
</PHP>

As <php>= null</php> offers a superset of ''?'''s functionality, it could be said that <php>= null</php> implies ''?''. Note, however, that it is perfectly legal to use both to make a parameter's nullability explicit:

<PHP>
function foo_both(?Bar $bar = null) {}

foo_both(new Bar); // valid
foo_both(null); // valid
foo_both(); // valid
</PHP>

Because a parameter with <php>= null</php> is a superset of ''?'', you can use a parameter with a default value of null where a nullable type existed in the parent. The reverse is not true, however: you cannot use only a nullable type where a default value existed in the parent, because the parameter is no longer optional.

==== Return Types ====

Nullable types behave differently during inheritance than a parameter type does. In a return type, the null marker can be removed by a subclass, but it cannot be added:
<PHP>
interface Fooable {
    function foo(): ?Fooable;
}
interface StrictFooable extends Fooable {
    function foo(): Fooable; // valid
}
</PHP>
<PHP>
interface Fooable {
    function foo(): Fooable;
}
interface LooseFooable extends Fooable {
    function foo(): ?Fooable; // invalid
}
</PHP>


===== Proposed PHP Version(s) =====
This RFC targets PHP 7.1.

===== RFC Impact =====

==== To Backward Incompatibility ====
This RFC maintains backwards compatibility. This RFC does not deprecate the default value syntax.

==== To SAPIs ====
This RFC has no impact to SAPIs.

==== To Existing Extensions ====
TODO 

==== New Constants ====
This RFC does not propose any new constants or ini defaults.

===== Open Issues =====
Make sure there are no open issues when the vote starts!

===== Unaffected PHP Functionality =====
This RFC does not deprecate the default value syntax. While there is some overlap of features between it and this RFC, they serve different purposes. As such, the default value syntax will remain.

===== Future Scope =====

* [[rfc:union_types|Full union types]]

===== Proposed Voting Choices =====
This RFC modifies the PHP language syntax and therefore requires a two-third majority of votes.

===== Patches and Tests =====
[[https://github.com/php/php-src/pull/1045]]

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== References =====
TODO
