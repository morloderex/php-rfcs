====== PHP RFC: Nullable Types ======
  * Version: 1.0
  * Date: 2014-04-10 
  * Author: Levi Morrison <levim@php.net>
  * Author: Dmitry Stogov <dmitry@zend.com>
  * Status: Implemented (in PHP 7.1)
  * First Published at: https://wiki.php.net/rfc/nullable_typehints

===== Introduction =====

It is common in many programming languages including PHP to allow a variable to be of some type or null. This null often indicates an error or lack of something to return. This can already be done using PHP's dynamic type system by omitting type declarations. It can also be done for parameters in PHP by using a default parameter of null. However, this does not work for return types which do not have a concept of a default value. This RFC proposes a unified way to add nullable types to both parameters and returns.

===== Proposal =====
This proposal adds a leading question mark symbol (''?'') to indicate that a type can also be ''null''. Nullable types can be formed from any currently permitted type. Nullable types are permitted anywhere type declarations are allowed but are subject to some inheritance rules which are outlined later in the RFC.

Here are a few examples to demonstrate basic functionality:
<PHP>
function answer(): ?int  {
    return null; //ok
}

function answer(): ?int  {
    return 42; // ok
}

function answer(): ?int {
    return new stdclass(); // error
}
</PHP>
<PHP>
function say(?string $msg) {
    if ($msg) {
        echo $msg;
    }
}

say('hello'); // ok -- prints hello
say(null); // ok -- does not print
say(); // error -- missing parameter
say(new stdclass); //error -- bad type
</PHP>

==== Return Types ====
When subtyping a return type the nullability can be removed by a subclass, but it cannot be added:
<PHP>
interface Fooable {
    function foo(): ?Fooable;
}
interface StrictFooable extends Fooable {
    function foo(): Fooable; // valid
}
</PHP>
<PHP>
interface Fooable {
    function foo(): Fooable;
}
interface LooseFooable extends Fooable {
    function foo(): ?Fooable; // invalid
}
</PHP>

==== Parameter Types ====
The nullable type cannot be removed in a sub-class; it can be added if not present in a super-class. This behavior is consistent with the Liskov substitution principle.

<PHP>
// Valid use: loosening the nullable marker in a parameter:
interface Fooable {
    function foo(Fooable $f);
}
interface LooseFoo extends Fooable {
    function foo(?Fooable $f);
}
</PHP>

<PHP>
// Invalid use: tightening the nullable marker in a parameter:
interface Fooable {
    function foo(?Fooable $f);
}
interface StrictFoo extends Fooable {
    function foo(Fooable $f);
}
</PHP>

==== Default Values ====

=== Differences from default values ===
Parameters with a nullable type do not have a default value. If omitted the value does not default to <php>null</php> and will result in an error:
<PHP>
function f(?callable $p) {}
f(); // invalid; function f does not have a default
</PHP>

=== Relationship with default values ==
PHP's existing semantics allow giving a <php>null</php> default value for a parameter to make it nullable and optional:

<PHP>
function foo_default(Bar $bar = null) {}

foo_default(new Bar); // valid
foo_default(null); // valid
foo_default(); // valid
</PHP>

This existing behaviour is not changed by this RFC. The new nullable type feature offers a subset of the functionality of <php>= null</php> with both making a parameter nullable but only <php>= null</php> making a parameter optional and have a default value:

<PHP>
function foo_nullable(?Bar $bar) {}

foo_nullable(new Bar); // valid
foo_nullable(null); // valid
foo_nullable(); // INVALID!
</PHP>

As <php>= null</php> offers a superset of ''?'''s functionality, it could be said that <php>= null</php> implies ''?''. However, it is perfectly legal to use both to make a parameter's nullability explicit:

<PHP>
function foo_both(?Bar $bar = null) {}

foo_both(new Bar); // valid
foo_both(null); // valid
foo_both(); // valid
</PHP>

Because a parameter with <php>= null</php> is a superset of ''?'', you can use a parameter with a default value of null where a nullable type existed in the parent.

<PHP>interface Contract {
    function method(?Foo $foo): bool;
}

class Implementation implements Contract {
    function method(?Foo $foo = null): bool {
        return is_null($foo);
    }
}</PHP>

 The reverse is not true, however: you cannot use only a nullable type where a default value existed in the parent, because the parameter is no longer optional.

==== PHP Version ====
This RFC targets PHP 7.1.

==== Voting Choices ====
The vote for this RFC is split into two votes. One vote will be for accepting the idea of explicitly nullable types with the short-hand syntax. The second vote determines whether to merge only nullable return types or to also merge nullable parameter types as well.

Voting began Tuesday, May 10th, 2016 and will close on Friday, May 20th, 2016.
----

<doodle title="Accept explicitly nullable types? (2/3 affirmative required)" auth="dmitry" voteType="single" closed="true">
   * Yes
   * No
</doodle>

----

<doodle title="Merge which features? (majority wins)" auth="dmitry" voteType="single" closed="true">
   * Both nullable parameter and return types
   * Only nullable return types
</doodle>

==== Patches and Tests ====
The pull request for this RFC is here: https://github.com/php/php-src/pull/1893.

===== RFC Impact =====

==== To Backward Compatibility ====
There is a backwards compatibility break in certain cases. This was previously fixed as a bug but it was decided that because of the BC break that it would be pushed to this RFC. See [[https://bugs.php.net/bug.php?id=72119|bug 72119]] for more info on the BC break.

This BC break is to reject parameter covariance for nullable types:

<PHP>
interface Fooable {
    function foo(?Fooable $f);
}
interface StrictFoo extends Fooable {
    // Invalid; parent type allows null so subtype must also allow it
    function foo(Fooable $f);
}
</PHP>

However, it breaks this code:

<PHP>
interface Fooable {
    function foo(array $f = null);
}
interface LooseFoo extends Fooable {
    function foo(array $f = []);
}
</PHP>

Such code should be modified to also allow null:

<PHP>
interface LooseFoo extends Fooable {
    function foo(?array $f = []);
}
</PHP>

Note that more handling is probably necessary to make the code robust, but this small change is sufficient for any previously working code to continue to work.

==== To Existing Extensions ====
Only extensions that deal with the AST need to be updated. They should be aware of the ''ZEND_TYPE_NULLABLE'' attribute that gets set when a ''?'' is present.

==== To Union Types ====
Nullable types are a special case of union types where there only two types in the union, one of which is always ''null''. If the [[rfc:union_types]] RFC is accepted then ''?Foo'' will be exactly equivalent to ''Foo | Null''. The union types RFC will be responsible for intersecting decisions, such as whether ''?'' can be used in conjunction with other union types.

==== Unaffected PHP Functionality ====
This RFC does not deprecate the default value syntax. While there is some overlap of features between it and this RFC, they serve different purposes. As such, the default value syntax will remain.

===== Future Scope =====

  - [[rfc:union_types|Full union types]]

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the [[http://git.php.net/?p=php-src.git;a=commitdiff;h=9662259cb93ff04be80766bdade39d2e827e0e16|git commit]]
  - a link to the PHP manual entry for the feature

===== References =====

  - Discussion on [[http://news.php.net/php.internals/92273|mailing list]]
  - Background for multiple type enhancements: http://news.php.net/php.internals/92252