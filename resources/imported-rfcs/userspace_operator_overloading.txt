====== PHP RFC: Userspace operator overloading ======
  * Version: 0.1
  * Date: 2020-02-01 (use today's date here)
  * Author: Jan BÃ¶hmer, jan.h.boehmer@gmx.de
  * Status: Draft (or Under Discussion or Accepted or Declined)
  * First Published at: http://wiki.php.net/rfc/userspace_operator_overloading
===== Introduction =====
At the moment expressions like ''$a + $b'' or ''$a*2'' are only valid if ''$a'' and ''$b'' are scalar types like int or float. However, in many other programming languages like Python, C# or C++ it is possible to overload these operators to use them on classes, to implement custom math (and other) objects. This RFC proposes userspace operator overloading for PHP.

Using objects to represent money values and arbitrary precision numbers or create mathematical objects like complex numbers and vectors is quite common. With this proposal operations with these objects could be written in the more natural and intuitive way of
<PHP>
$result = $a * ($b + $c * $d);
</PHP>
instead of the currently function based method
<PHP>
$a->multiply($b->add($c->multiply($d));
</PHP>

PHP has already an internal mechanism for operator overloading using the ''do_operation'' object handler, which is used for example by GMP and FFI data objects. However, this mechanism is only available for internal PHP objects and currently can not be used for classes created inside PHP.

This RFC only proposes overloading for arithmetic and concatenation operators. Comparison and equality operators are handled differently internally and logic is more complex, so these should be handled in a different RFC.

===== Proposal =====
==== Syntax ====
Operator overloading is done by static magic functions per operator in a class. These functions receive both operands and must return a non null value:
<PHP>
public class Vector3()
{
    public static function __add($lhs, $rhs) {
        // Do something with the values and return an error. If operands types are not supported throw an exception
        // ...
    }
    
    public static function __mul($lhs, $rhs) {
        // ...
    }
}

$a = new Vector3();
$b = new Vector3();

// Equivalent to $x = Vector3::__add($a, $b)
$x = $a + $b;
//Equivalent to $y = Vecotr3::__mul(2, $b)
$y = 3 * $b;
</PHP>

By passing both operands to the handler, it can decide between the cases on non-commutative operators (''$a / 2'' vs. ''2 / $a''), which would be more difficult when only the "other" operand (besides ''$this'') is passed.

==== Overloadable Operators ====
Like mentioned above only basic arithmetic operators should be overloadable, not compare or equality operators. The operators which are allowed to be overloaded and their associated magic functions are:

|                 ^ Operator      ^ Magic function     ^
^ Addition        | ''+''         | %%__add%%          |
^ Subtraction     | ''-''         | %%__sub%%          |
^ Multiplication  | ''*''         | %%__mul%%          |
^ Division        | ''/''         | %%__div%%          |
^ Power           | ''**''        | %%__pow%%          |
^ Modulo          | ''.''         | %%__mod%%          |
^ Concatenation   | ''.''         | %%__concat%%       |
^ Bitwise shift left   | ''<<''         | %%__sl%%       |
^ Bitwise shift right   | ''>>''         | %%__sr%%       |
^ Bitwise OR   | ''%%|%%''         | %%__or%%       |
^ Bitwise AND   | ''&''         | %%__and%%       |
^ Bitwise XOR   | ''^''         | %%__xor%%       |
^ Bitwise NOT   | ''~''         | %%__not%%       |

===== Backward Incompatible Changes =====
What breaks, and what is the justification for it?

===== Proposed PHP Version(s) =====
List the proposed PHP versions that the feature will be included in.  Use relative versions such as "next PHP 7.x" or "next PHP 7.x.y".

===== RFC Impact =====
==== To SAPIs ====
Describe the impact to CLI, Development web server, embedded PHP etc.

==== To Existing Extensions ====
Will existing extensions be affected?

==== To Opcache ====
It is necessary to develop RFC's with opcache in mind, since opcache is a core extension distributed with PHP.

Please explain how you have verified your RFC's compatibility with opcache.

==== New Constants ====
Describe any new constants so they can be accurately and comprehensively explained in the PHP documentation.

==== php.ini Defaults ====
If there are any php.ini settings then list:
  * hardcoded default values
  * php.ini-development values
  * php.ini-production values

===== Open Issues =====
Make sure there are no open issues when the vote starts!

===== Unaffected PHP Functionality =====
List existing areas/features of PHP that will not be changed by the RFC.

This helps avoid any ambiguity, shows that you have thought deeply about the RFC's impact, and helps reduces mail list noise.

===== Future Scope =====
This section details areas where the feature might be improved in future, but that are not currently proposed in this RFC.

===== Proposed Voting Choices =====
Include these so readers know where you are heading and can discuss the proposed voting options.

===== Patches and Tests =====
Links to any external patches and tests go here.

If there is no patch, make it clear who will create a patch, or whether a volunteer to help with implementation is needed.

Make it clear if the patch is intended to be the final patch, or is just a prototype.

For changes affecting the core language, you should also provide a patch for the language specification.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged into
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
  - a link to the language specification section (if any)

===== References =====
Links to external references, discussions or RFCs

===== Rejected Features =====
Keep this updated with features that were discussed on the mail lists.