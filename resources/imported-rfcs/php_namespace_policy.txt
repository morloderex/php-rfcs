====== PHP RFC: PHP Namespace Policy ======
  * Version: 0.1
  * Date: 2020-03-12 
  * Author: Mark Randall, marandall@php.net
  * Status: Draft
  * First Published at: https://wiki.php.net/rfc/php_namespace_policy

===== Proposal =====
Context: https://i.imgur.com/LnNIJSw.jpg

In light of the ever-increasing number of userland-accessible classes being provided by the PHP-SRC, and the ever-increasing amount of symbols within the root namespace, this RFC proposes that internals withdraws its policy of placing everything within the root namespace, and instead adopts the policy of taking ownership of the \php namespace and everything beneath it, for the purposes of offering a way for current and future RFC authors to properly namespace any new classes which they add.

By design this RFC does NOT propose moving anything existing into the \PHP namespace at this time, only that the policy is set that it is the preferred mechanism for future development.

===== Namespace Claims =====

This RFC would establish the protocol for a registry, upon which internals and core extension authors can, as part of their RFC, petition voters for a child namespace with which to place their additions, subject to the vote being passed. Laying claim to a child namespace of \PHP would be part of the main feature vote. 

Requests to add additional namespaces for purposes such as aliasing existing classes as a means of migration, would be performed by a standard 2/3rds vote, multiple such classes may be included in a single vote if the community feels it appropriate. 

Once approved, a namespace that is a child of \PHP will remain exclusively for the originally assigned purpose, even if the associated code is moved out of core, unless a 2/3rds vote is held to withdraw that namespace. 

===== Namespace Structure =====

The top-level \PHP namespace itself would be exclusively used as a container for other namespaces, and itself would not contain any classes.

The \PHP\Engine namespace would be reserved for namespaces and classes which directly interface with the operation of the engine, e.g. future annotations relating to the operation of JIT.

There should be no restriction upon depth, although common sense should be used. For example, it may be entirely appropriate to create the following structure:

Root:
  * \PHP (must be empty except for other namespaces)
  * \PHP\Engine (reserved for things effecting the engine itself such as annotations or ErrorLevel::WARNING) 

Databases:
  * \PHP\Databases\PDO
  * \PHP\Databases\PDO\MySql\  
  * \PHP\Databases\PDO\Postgres\  
  * \PHP\Databases\PDO\Firebird\  

Data:
  * \PHP\Data\JSON
  * \PHP\Data\XML\DOM  
  * \PHP\Data\XML\SimpleXML  
  * \PHP\Data\XML\Reader  
  * \PHP\Data\XML\Writer  

===== Mandatory Implementation Details =====

This RFC proposes that the contents of the \PHP namespace **are exclusively class-like (class, interface, trait) or namespaces** and that constants, standalone functions and any other data is strictly prohibited. This would be because support for function type autoloading seems unlikely to emerge and using classes provides better opportunity for autoloaded polyfills. 

Constants MUST be declared as class constants (or enums) as is currently demonstrated by ZipArchive. Functions MUST be declared as static member functions.  

===== Proposed PHP Version(s) =====
PHP 8.0
