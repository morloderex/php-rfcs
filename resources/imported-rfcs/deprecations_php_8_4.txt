====== PHP RFC: Deprecations for PHP 8.4 ======
  * Date: 2023-07-25
  * Authors: Niels Dossche <nielsdos@php.net>, Gina Peter Banyard <girgias@php.net>, Máté Kocsis <kocsismate@php.net>
  * Status: Draft
  * Implementation: TBD

===== Introduction =====

The RFC proposes to deprecate the listed functionality in PHP 8.4 and remove it in PHP 9.

The following list provides a short overview of the functionality targeted for deprecation, while more detailed explanation is provided in the Proposal section:

  * Soft-deprecated <php>DOMDocument</php> and <php>DOMEntity</php> properties
  * <php>DOMImplementation::getFeature($feature, $version)</php>
  * Constant <php>DOM_PHP_ERR</php>
  * <php>mysqli_ping()</php> and <php>mysqli::ping()</php>
  * <php>unserialize()</php>'s 'S' tag
  * ''session.sid_length'' and ''session.sid_bits_per_character''
  * <php>SplFixedArray::__wakeup()</php>
  * <php>xml_set_object()</php> and <php>xml_set_*_handler()</php> with string method names
  * Passing <php>null</php> and <php>false</php> to <php>dba_key_split()</php>
  * Non-numeric seed strings in xxh3
  * Constants SUNFUNCS_RET_STRING, SUNFUNCS_RET_DOUBLE, SUNFUNCS_RET_TIMESTAMP
  * Deprecate proprietary CSV escaping mechanism
  * Constant E_STRICT
  * Deprecate return invalid types for user output handler callables

===== Proposal =====

Each feature proposed for deprecation is voted separately and requires a 2/3 majority. All votes refer to deprecation in PHP 8.4 and removal in PHP 9.

==== Soft-deprecated DOMDocument and DOMEntity properties ====

Author: Máté Kocsis <kocsismate@php.net>

The following properties have already been soft-deprecated for a long time:
  * ''DOMDocument::$actualEncoding'': it is just an alias to ''DOMDocument::$encoding''
  * ''DOMDocument::$config'': it has always returned null
  * ''DOMEntity::$actualEncoding'': it has always returned null
  * ''DOMEntity::$encoding'': it has always returned null
  * ''DOMEntity::$version'': it has always returned null

<doodle title="Deprecate and remove the aforementioned DOMDocument and DOMEntity properties?" auth="kocsismate" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== DOMImplementation::getFeature($feature, $version) ====

Author: Niels Dossche <nielsdos@php.net>

<php>DOMImplementation::getFeature($feature, $version)</php> used to be a feature of DOM Core Level 3 https://www.w3.org/TR/2003/WD-DOM-Level-3-Core-20030226/DOM3-Core.html#core-DOMImplementation3-getFeature, but it was never implemented in PHP, i.e. it always threw a "not implemented" exception. It was also never documented because of this. Furthermore, the feature has been removed from the current living DOM spec. It doesn't make sense to keep a feature alive that has never been implemented and is removed by the reference specification.

<doodle title="Deprecate DOMImplementation::getFeature($feature, $version)" auth="nielsdos" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== Constant DOM_PHP_ERR ====

Author: Niels Dossche <nielsdos@php.net>

PR https://github.com/php/php-src/pull/11927 got rid of the last use of DOM_PHP_ERR in PHP.
It is a non-standard and non-well-defined error code. The last use was for an out-of-memory situation but that's inconsistent as we normally use INVALID_STATE_ERR for that.

GitHub search reveals [[https://github.com/search?q=DOM_PHP_ERR+language%3APHP&type=code&l=PHP|174 matches]] (as of Jan 20 2024) for DOM_PHP_ERR. There are occurrences in string-form, i.e. <php>"DOM_PHP_ERR"</php> that normally doesn't get affected, some in code quality/compatibility tools, and some in php-src fork's stub files.

The remaining actual use is in Symfony's DOMCaster in an array that maps a constant back to its actual name. They can fix the deprecation by replacing the constant with its value until versions older than PHP 8.4 no longer need to be supported by the library.
There don't seem to be any other actual users of this.

<doodle title="Deprecate DOM_PHP_ERR?" auth="nielsdos" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== mysqli_ping() and mysqli::ping() ====

TODO: See reasoning: https://github.com/php/php-src/pull/11912#issuecomment-1671762583

==== unserialize()'s 'S' tag ====

Author: Tim Düsterhus <timwolla@php.net>

Strings serialized with PHP's native serialization mechanism are represented with the (lowercase) ''s'' tag, followed by the length of the string and the raw binary representation of the string contents. During the development of the never-released PHP 6, the serialization format of binary strings [[https://github.com/php/php-src/commit/1f2d5e3b00d19bd6d0db40d7fc2badaa2d65082e|was changed]] to use an escaped representation for non-ASCII characters, likely to make the serialization output compatible with PHP 6's Unicode strings where not all byte sequences are valid. This escaped format was then represented with the uppercase ''S'' tag [[https://github.com/php/php-src/commit/7ccba6624df074051f24efabd5d88d9c0d2a8ec0|in a follow-up commit]] and support for that uppercase ''S'' tag [[https://github.com/php/php-src/commit/8f5310afad0eeef6f2e45a03f6ff7d4a2a7653ce|added to PHP 5]] in an attempt to provide interoperability with serialized binary strings between PHP 5 and PHP 6. This support for the uppercase ''S'' tag remains in PHP until today.

PHP's native serializer is a security-sensitive part of the standard library, the simpler the logic the smaller the chance for security issues and the easier it is to verify the code for correctness. There are no tests verifying the functionality of the uppercase ''S'' tag and no released version emitted the uppercase ''S'' tag, thus deprecating and ultimately removing the support for the ''S'' tag is exceedingly unlikely to affect anyone.

Implementation: https://github.com/php/php-src/pull/12309

<doodle title="Deprecate unserialize()’s ‘S’ tag?" auth="timwolla" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== session.sid_length and session.sid_bits_per_character ====

TODO: https://github.com/php/php-src/issues/12418#issuecomment-1763034403

==== Deprecate SplFixedArray::__wakeup() ====

TODO: https://github.com/php/php-src/pull/9704

==== xml_set_object() and xml_set_*_handler() with string method names ====

Author: Gina Peter Banyard <girgias@php.net>

The XML extension allows registering callbacks that are invoked when encountering certain XML triggers, such as the start of a new element or a processing instruction, via the relevant <php>xml_set_*_handler()</php> function.

However, these functions also allow setting a method name, as a string, that should be called on the object provided via <php>xml_set_object()</php>. This behaviour is very strange and seems to date prior to the introduction of proper callables for object methods via the <php>[$objInstance, 'methodName']</php> syntax.

The proposal is to deprecate the <php>xml_set_object()</php> function and passing non-callable strings to the <php>xml_set_*_handler()</php> functions. This would also mean to unset a handler the value of <php>null</php> must be used instead of an empty string witch is also currently allowed.

<doodle title="Deprecate xml_set_object() and xml_set_*_handler() with string method names" auth="girgias" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== Deprecate passing null and false to dba_key_split() ====

Author: Gina Peter Banyard <girgias@php.net>

The signature of <php>dba_key_split()</php> is currently <php>function dba_key_split(string|false|null $key): array|false {}</php>.

However, passing <php>null</php> or <php>false</php> to this function will make it immediately return <php>false</php>,
this is the case since at least PHP 5.3, probably earlier.

Moreover, since PHP 8.0, this is the only way for this function to return <php>false</php>.

The proposal is to deprecate passing <php>null</php> and <php>false</php> to the <php>$key</php> parameter, which will allow to clean up the return type of this function in the next major version to just <php>array</php>.

<doodle title="Deprecate passing null and false to dba_key_split()" auth="girgias" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== Non-numeric seed strings in xxh3 ====

TODO: https://github.com/php/php-src/issues/10305


==== Constants SUNFUNCS_RET_STRING, SUNFUNCS_RET_DOUBLE, SUNFUNCS_RET_TIMESTAMP ====

Author: Jorg Sowa <jorg.sowa@gmail.com>

The functions <php>date_sunrise()</php>/<php>date_sunset()</php> are [[https://wiki.php.net/rfc/deprecations_php_8_1|already deprecated since PHP 8.1]] and will be removed in the next major version.

The proposal is to deprecate constants SUNFUNCS_RET_STRING, SUNFUNCS_RET_DOUBLE, SUNFUNCS_RET_TIMESTAMP which are used exclusively with those functions.

<doodle title="Deprecate constants SUNFUNCS_RET_STRING, SUNFUNCS_RET_DOUBLE, SUNFUNCS_RET_TIMESTAMP" auth="jorg_sowa" voteType="single" closed="true">
   * Yes
   * No
</doodle>

Implementation: https://github.com/php/php-src/pull/12978

==== Deprecate proprietary CSV escaping mechanism ====

Author: Gina Peter Banyard <girgias@php.net>

TODO:
Follow-up on https://wiki.php.net/rfc/kill-csv-escaping

See: https://github.com/php/doc-en/issues/3086

==== Constant E_STRICT ====

Author of implementation: mvorisek

RFC author: Jorg Sowa <jorg.sowa@gmail.com>

The error level E_STRICT has no meaning [[https://wiki.php.net/rfc/reclassify_e_strict|since PHP 7.0]] after changing it to other error levels. It was left for better compatibility.

Implementation: https://github.com/php/php-src/pull/13053

[NOTE FROM GINA: This is incorrect, there were still some usages in PHP 7.4 that I removed, also in theory extensions could still emit it]

==== Deprecate return invalid types for user output handler callables ====

Author: Gina Peter Banyard <girgias@php.net>

It doesn't enforce the return type of string|false (false has special meaning here which is unfortunate) converts <php>true</php> to an empty string. Other implementation bug is suppressing the Array conversion warning due to how the outputs are being buffered/written

See https://github.com/php/doc-en/pull/3126#discussion_r1460917389

===== Backward Incompatible Changes =====

For PHP 8.4 additional deprecation notices will be emitted. The actual removal of the affected functionality will happen no earlier than PHP 9.
