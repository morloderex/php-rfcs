====== PHP RFC: Deprecations for PHP 8.4 ======
  * Date: 2023-07-25
  * Authors: Niels Dossche <nielsdos@php.net>, Gina Peter Banyard <girgias@php.net>
  * Status: Draft
  * Implementation: TBD

===== Introduction =====

The RFC proposes to deprecate the listed functionality in PHP 8.4 and remove it in PHP 9.

The following list provides a short overview of the functionality targeted for deprecation, while more detailed explanation is provided in the Proposal section:

  * <php>DOMAttr::$schemaTypeInfo</php> and <php>DOMElement::$schemaTypeInfo</php>
  * <php>DOMImplementation::getFeature($feature, $version)</php>
  * Constant <php>DOM_PHP_ERR</php>
  * <php>mysqli_ping()</php> and <php>mysqli::ping()</php>
  * <php>unserialize()</php>'s 'S' tag
  * ''session.sid_length'' and ''session.sid_bits_per_character''
  * <php>SplFixedArray::__wakeup()</php>
  * <php>xml_set_object()</php> and <php>xml_set_*_handler()</php> with string method names
  * Passing <php>null</php> and <php>false</php> to <php>dba_key_split()</php>

===== Proposal =====

Each feature proposed for deprecation is voted separately and requires a 2/3 majority. All votes refer to deprecation in PHP 8.4 and removal in PHP 9.

==== DOMAttr::$schemaTypeInfo and DOMElement::$schemaTypeInfo ====

Author: Niels Dossche <nielsdos@php.net>

schemaTypeInfo used to be a feature of DOM Core Level 3 https://www.w3.org/TR/2003/WD-DOM-Level-3-Core-20030226/DOM3-Core.html#core-Attr-schemaTypeInfo, but it was never implemented in PHP, i.e. it always returns NULL. That return value is not even correct, as schemaTypeInfo is not supposed to be nullable. Furthermore, the feature has been removed from the current living DOM spec. It doesn't make sense to keep a feature alive that has never been implemented and is removed by the reference specification.

TODO: check impact

<doodle title="Deprecate DOMAttr::$schemaTypeInfo and DOMElement::$schemaTypeInfo" auth="nielsdos" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== DOMImplementation::getFeature($feature, $version) ====

Author: Niels Dossche <nielsdos@php.net>

<php>DOMImplementation::getFeature($feature, $version)</php> used to be a feature of DOM Core Level 3 https://www.w3.org/TR/2003/WD-DOM-Level-3-Core-20030226/DOM3-Core.html#core-DOMImplementation3-getFeature, but it was never implemented in PHP, i.e. it always threw a "not implemented" exception. It was also never documented because of this. Furthermore, the feature has been removed from the current living DOM spec. It doesn't make sense to keep a feature alive that has never been implemented and is removed by the reference specification.

<doodle title="Deprecate DOMImplementation::getFeature($feature, $version)" auth="nielsdos" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== Constant DOM_PHP_ERR ====

TODO: See reasoning: https://github.com/php/php-src/pull/11927#issuecomment-1672129591

==== mysqli_ping() and mysqli::ping() ====

TODO: See reasoning: https://github.com/php/php-src/pull/11912#issuecomment-1671762583

==== unserialize()'s 'S' tag ====

Author: Tim DÃ¼sterhus timwolla@php.net

TODO: https://github.com/php/php-src/pull/12309

==== session.sid_length and session.sid_bits_per_character ====

TODO: https://github.com/php/php-src/issues/12418#issuecomment-1763034403

==== Deprecate SplFixedArray::__wakeup() ====

TODO: https://github.com/php/php-src/pull/9704

==== xml_set_object() and xml_set_*_handler() with string method names ====

Author: Gina Peter Banyard <girgias@php.net>

The XML extension allows registering callbacks that are invoked when encountering certain XML triggers, such as the start of a new element or a processing instruction, via the relevant <php>xml_set_*_handler()</php> function.

However, these functions also allow setting a method name, as a string, that should be called on the object provided via <php>xml_set_object()</php>. This behaviour is very strange and seems to date prior to the introduction of proper callables for object methods via the <php>[$objInstance, 'methodName']</php> syntax.

The proposal is to deprecate the <php>xml_set_object()</php> function and passing non-callable strings to the <php>xml_set_*_handler()</php> functions. This would also mean to unset a handler the value of <php>null</php> must be used instead of an empty string witch is also currently allowed.

<doodle title="Deprecate xml_set_object() and xml_set_*_handler() with string method names" auth="girgias" voteType="single" closed="true">
   * Yes
   * No
</doodle>

==== Deprecate passing null and false to dba_key_split() ====

Author: Gina Peter Banyard <girgias@php.net>

The signature of <php>dba_key_split()</php> is currently <php>function dba_key_split(string|false|null $key): array|false {}</php>.

However, passing <php>null</php> or <php>false</php> to this function will make it immediately return <php>false</php>,
this is the case since at least PHP 5.3, probably earlier.

Moreover, since PHP 8.0, this is the only way for this function to return <php>false</php>.

The proposal is to deprecate passing <php>null</php> and <php>false</php> to the <php>$key</php> parameter, which will allow to clean up the return type of this function in the next major version to just <php>array</php>.

<doodle title="Deprecate passing null and false to dba_key_split()" auth="girgias" voteType="single" closed="true">
   * Yes
   * No
</doodle>

===== Backward Incompatible Changes =====

For PHP 8.4 additional deprecation notices will be emitted. The actual removal of the affected functionality will happen no earlier than PHP 9.
