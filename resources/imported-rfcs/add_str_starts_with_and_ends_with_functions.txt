====== PHP RFC: Add str_starts_with() and str_ends_with() functions ======
  * Version: 0.4
  * Date: 2020-03-25 (**Updated**: 2020-04-03)
  * Author: Will Hudgins, will@wkhudgins.info
  * Status: Under Discussion
  * First Published at: https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions
  * Related Prior RFC: https://wiki.php.net/rfc/add_str_begin_and_end_functions

===== Introduction =====
Recently a str_contains function was added to PHP; however, PHP still does not feature built-in functions to test if a string begins or ends with a certain substring. As noted in the RFC template (which itself is quoting [[http://news.php.net/php.internals/71525|Rasmus]]), PHP should be a "pragmatic web-focused language" and should cater to "the skill-levels and platforms of a wide range of users." Checking the start and end of strings is a very common task which should be easy. It should not be a task which requires pulling in a PHP framework or developing a function in userland. A pragmatic language makes it easy to accomplish common tasks. Experienced developers benefit because they are be saved from writing or pasting one more piece of boilerplate code into nearly every project and beginners are spared from having to implement the function in userland (or search StackOverflow for someone else's implementation). 

Further, the RFC template quotes [[http://news.php.net/php.internals/66065|Zeev Suraski]], reminding us to "consider only features which have a significant traction to a large chunk of our userbase, and not something that could be useful in some extremely specialized edge cases." Checking the start and end of a string is a task which has an appeal to a large amount of developers. It has such appeal that it is included by default in languages as diverse as JavaScript, Java, Haskell, and Matlab. This feature has been requested multiple times and would be of use to many PHP developers with varying levels of experience. 

Previously I raised an RFC, [[https://wiki.php.net/rfc/add_str_begin_and_end_functions|here]], proposing the addition of str_starts_with and str_ends_with as well as several other functions. On the vote for whether to add str_starts_with, str_starts_with_ci, str_ends_with, and str_ends_with_ci to PHP 7.4", 27 people voted "Yes" and 20 voted "No." 57% percent of the vote was in favor of those functions. However that is short of the required 2/3 majority. Several voters indicated that the reason they voted against the RFC was the inclusion of the case-insensitive versions. This was a reasonable criticism of that RFC: a simple call to strtolower before using str_starts_with is sufficient to easily deliver the case-insensitive functionality. After that RFC was closed, a code freeze was in place for PHP 7.4's release. PHP 7.4 has now been released and several individuals have requested the str_starts_with and str_ends_with functionality again. This is a simple but highly desired functionality for PHP.

Yes, this functionality is currently possible using several other functions in tandem, but adding pre-built functions to do this will improve the readability and clarity of PHP code using the function. Further the cost of adding this functional is minimal.


===== Proposal =====
Add two new basic functions: ''str_starts_with'' and ''str_ends_with'':

<PHP>
str_starts_with ( string $haystack , string $needle ) : bool
str_ends_with ( string $haystack , string $needle ) : bool
</PHP>
  
''str_starts_with()'' checks if ''$haystack'' begins with ''$needle''. If ''$needle'' is longer than ''$haystack'', it returns ''false''; else, it compares each character in ''$needle'' with the corresponding character in ''$haystack'' (aligning both strings at their start), returning ''false'' if it encounters a mismatch, and ''true'' otherwise.\\
''str_ends_with()'' does the same thing but aligning both strings at their end.

Examples below:

<PHP>
$str = "beginningMiddleEnd";
if (str_starts_with($str, "beg")) echo "printed\n";
if (str_starts_with($str, "Beg")) echo "not printed\n";
if (str_ends_with($str, "End")) echo "printed\n";
if (str_ends_with($str, "end")) echo "not printed\n";

// empty strings:
if (str_starts_with("a", "")) echo "printed\n";
if (str_starts_with("", "")) echo "printed\n";
if (str_starts_with("", "a")) echo "not printed\n";
if (str_ends_with("a", "")) echo "printed\n";
if (str_ends_with("", "")) echo "printed\n";
if (str_ends_with("", "a")) echo "not printed\n";
 </PHP>

===== Backward Incompatible Changes =====
This could break functions existing in userland with the same names. But see [[rfc:str_contains#backward_incompatible_changes|the corresponding section in the str_contains RFC]].

===== Proposed PHP Version(s) =====
Next eligible PHP release (PHP 8.0 at the time of writing).

===== RFC Impact =====
  * **To SAPIs:** Will add the aforementioned functions to all PHP environments.
  * **To Existing Extensions:** None.
  * **To Opcache:** No effect.
  * **New Constants:** No new constants.
  * **php.ini Defaults:** No changed php.ini settings.

===== Patches and Tests =====
  * https://github.com/php/php-src/pull/5300

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== References =====

  * Implementation of similar methods/functions in other languages:
    * JavaScript: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith|String#startsWith()]] and [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith|String#endsWith()]]
    * Python: [[https://docs.python.org/3/library/stdtypes.html#str.startswith|str#startswith()]] and [[https://docs.python.org/3/library/stdtypes.html#str.endswith|str#endswith()]]
    * Java: [[https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#startsWith(java.lang.String)|String#startsWith()]] and [[https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#endsWith(java.lang.String)|String#endsWith()]] (and Apache Commons Lang [[https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html#startsWith-java.lang.CharSequence-java.lang.CharSequence-|StringUtils.startsWith()]] and [[https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html#endsWith-java.lang.CharSequence-java.lang.CharSequence-|StringUtils.endsWith()]])
    * Ruby: [[http://ruby-doc.org/core-2.1.1/String.html#method-i-start_with-3F|String#start_with?()]] and [[http://ruby-doc.org/core-2.1.1/String.html#method-i-end_with-3F|String#end_with?()]]
    * Go: [[https://golang.org/pkg/strings/#HasPrefix|strings.HasPrefix()]] and [[https://golang.org/pkg/strings/#HasSuffix|strings.HasSuffix()]]
    * Haskell: [[https://hackage.haskell.org/package/MissingH-1.4.0.1/docs/Data-String-Utils.html#v:startswith|Data.String.Utils.startswith]] and [[https://hackage.haskell.org/package/MissingH-1.4.0.1/docs/Data-String-Utils.html#v:endswith|Data.String.Utils.endswith]] (aliases of [[https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-List.html#v:isPrefixOf|Data.List.isPrefixOf]] and [[https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-List.html#v:isSuffixOf|Data.List.isSuffixOf]])
    * MATLAB: [[https://www.mathworks.com/help/matlab/ref/startswith.html|startsWith()]] and [[https://www.mathworks.com/help/matlab/ref/endswith.html|endsWith()]]
  * PHP feature request: [[bugid@50434]] (and duplicates: [[bugid@60630]], [[bugid@67035]], [[bugid@74449]])
  * Related [[rfc:str_contains|PHP RFC: str_contains]]
  * Discussion on the php.internals mailing list: [[https://externals.io/message/109318]]

===== Rejected Features =====
  * Case-insensitive and multibyte variants were included in the previous version of this RFC, which was declined. See also [[rfc:str_contains#case-insensitivity_and_multibyte_strings|the related section in the str_contains RFC]].