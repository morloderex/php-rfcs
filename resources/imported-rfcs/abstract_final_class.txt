====== PHP RFC: Static classes ======
  * Version: 1.1
  * Date: 2014-11-26
  * Author: Guilherme Blanco, guilhermeblanco@php.net
  * Status: Withdrawn
  * First Published at: http://wiki.php.net/rfc/abstract_final_class

===== Introduction =====

Please understand only one of the following proposals can be accepted, not both.
They're explained together because the address the same issue.

==== As Static classes ====


Static classes are helpful in the case you are wrapping common functions that are static, but the common class itself cannot be instantiated.
Currently, PHP developers' only resource is to create a final class with a private constructor, leading to untestable and error prone code.

When untestable/error prone code is mentioned is that there's no signaling of broken definition by creating a regular class with private constructor and other members are not declared as static. Everything will just compile smoothly (file inclusion/autoloading).

By the acceptance of this patch, every method declaration would automatically be enforced to behave as static without any further keyword needed. This reduces the human error of methods being forgotten to be declared as static.

For such, here is motivation:

  * As "static", it purely behaves at class level, not at instance level
  * Could also be used with combination of "final", meaning it cannot be extended (such as more permissive visibility, behavior change, etc)
  * There's no way of adding static variables to a namespace. This would address this issue too.

==== As abstract final ====



Abstract final classes are helpful in the case you are wrapping common functions that are static, but the common class itself cannot be instantiated. Currently, PHP developers' only resource is to create a final class with a private constructor, leading to untestable and error prone code.

For such, here is motivation:

    As “abstract”, it cannot be instantiated
    As “final”, it cannot be extended (such as visibility increase, behavior change, etc)
    There's no way of adding variables to a namespace. This would address this issue too

===== Proposal =====

Change language scanner to accept static class or abstract final construction, and subsequently enforcing the existence of only static members.

===== Proposed PHP Version(s) =====

PHP 7

===== Example =====

==== As static class ====

  static class Environment
  {
      private static $rootDirectory = '/var/www/project';
      public static function getRootDirectory()
      {
          return self::$rootDirectory;
      }
  }

  echo Environment::getRootDirectory();

==== As abstract final ====

  abstract final class StringUtil
  {
      public static function isNotNullOrSpace($str)
      {
          return !($str === null || strlen($str) < 1 || strlen(trim($str)) < 1);
      }
  }

  echo StringUtil::isNotNullOrSpace('')
    ? 'Empty string'
    : 'Non-empty string';


===== Vote =====
<doodle title="Static classes" auth="guilhermeblanco" voteType="single" closed="true">
   * Yes, as "static class"
   * Yes, as "abstract final class"
   * No
</doodle>
\\
The vote starts on 12/12/2014 and ends on 12/19/2014. 2/3 majority required.

===== Implementation =====

  * Most recent suggested implementation available at https://github.com/php/php-src/pull/929
  * Originally suggested as abstract class at https://github.com/php/php-src/pull/923