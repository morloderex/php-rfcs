====== PHP RFC: Class Friendship ======
  * Version: 0.1
  * Date: 2015-12-10
  * Author: Dustin Wheeler, mdwheele@ncsu.edu
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/friend-classes



===== Introduction =====
There are currently several discussions around the topic of private collaborators amongst the PHP community. Among these, the topic of "package private" or otherwise vendor-namespaced private collaborators has been suggested as a natural solution to the pragmatic convention of forcing implementation details public and marking it as "@internal". This is sometimes a necessary evil in frameworks and other foundational components. These are not the only use-case for enabling per-class access to an object's internal state. Enabling a collaborate access to protected properties has application in testing as well as better expressing a tight coupling between classes for the purposes of better encapsulation of behaviour while affording presentation concerns to be separated.

Class Friendship allows a class to be better encapsulated by granting per-class access to private and protected properties that would otherwise have to be marked public. This affords developers an opportunity to better model objects as behavioural units while making explicit presentation concerns through friendship. Admittedly, class friendship has a narrow use-case, but is nonetheless a valuable expression for object modeling when used properly.

===== Proposal =====
Support for class friendship is added through a new keyword, ''friend''. It allows per-class access to private and protected properties as follows:

  * Basic Mechanics
  * Other Characteristics
    * Friendships are not symmetric – If class A is a friend of class B, class B is not automatically a friend of class A.
    * Friendships are not transitive – If class A is a friend of class B, and class B is a friend of class C, class A is not automatically a friend of class C.
    * Friendships are not inherited – A friend of class Base is not automatically a friend of class Derived and vice versa; equally if Base is a friend of another class, Derived is not automatically a friend and vice versa.
    * Access due to friendship is inherited – A friend of Derived can access the restricted members of Derived that were inherited from Base. Note though that a friend of Derived only has access to members inherited from Base to which Derived has access itself, e.g. if Derived inherits publicly from Base, Derived only has access to the protected (and public) members inherited from Base, not the private members, so neither does a friend.
  * Application in "Modeling Presentation Concerns Separate From Behaviour"
  * Application to "Testing Techniques"

===== Proposed PHP Version(s) =====
This proposal targets the next minor version of PHP, which at the time of this writing is PHP 7.1.

===== RFC Impact =====
==== To Opcache ====
This is an open issue pending code review. 

===== Open Issues =====
==== Policy ====
  * Implementation requires code review to advise on improvements as well as inform that opcache was appropriately considered.
  * Verify current PHP functionality around class property visibility is undisturbed

===== Future Scope =====
While this RFC specifies friendship between classes, there is opportunity to extend this implementation and syntax:

  * Implement class friendship to a global function 
  * Implement class friendship to a collaborating class method
  * Implement class friendship to a name space

===== Proposed Voting Choices =====
As this is a language change, a 2/3 majority is required. (see [[voting]])

===== Patches and Tests =====
I have implemented the RFC as described with tests to verify all usage examples above. I will link this as soon as I am able and will open a pull request against ''master'' to monitor TravisCI build status as I make changes.

As this is my first contribution to PHP, it is my opinion that my request should be placed under higher scrutiny and I am completely ready and willing to accept all feedback to improve implementation.

===== References =====
  - https://bugs.php.net/bug.php?id=34044
  - http://stackoverflow.com/questions/317835/php-equivalent-of-friend-or-internal
  - https://marc.info/?l=php-internals&m=144639394529142
  - http://ocramius.github.io/blog/accessing-private-php-class-members-without-reflection/
  - http://www.stroustrup.com/hopl2.pdf
  - http://tekwire.net/joomla/projects/ideas/php-friend

===== Changelog =====
  * v0.1 - Created