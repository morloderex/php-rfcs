====== PHP RFC: Unary null coalescing operator ======
  * Version: 1.0
  * Date: 2017-06-21
  * Author: Andrea Faulds, ajf@ajf.me
  * Status: Under Discussion
  * First Published at: http://wiki.php.net/rfc/unary_null_coalescing_operator


===== Introduction =====
[[rfc:isset_ternary|PHP 7.0 introduced the Null Coalescing Operator]] (<php>??</php>), which provides a convenient, more concise alternative to <php>isset()</php> or an explicit <php>NULL</php> check when retrieving the values of variables, properties and object members. Specifically, it provides the short syntax <php>$foo ?? $bar</php> which returns <php>$foo</php> if it exists and is not <php>NULL</php>, or otherwise <php>$bar</php>. This is useful when, for example, retrieving data from query parameters or a configuration file.

One use of the <php>??</php> operator is not to retrieve a value per se, but to check its value without worrying about whether it exists, for instance <php>$_GET["action"] ?? NULL === "submit"</php> lets you check if there is a query parameter named ''action'' that is set to ''submit'', which is considerably shorter and less redundant than typing out <php>isset($_GET["action"]) && $_GET["action"] === "submit"</php>.

It is this latter use-case that this RFC concerns. While <php>?? NULL</php> is significantly better than the full expression using <php>isset()</php>, it is still redundant, since we have to provide some arbitrary default value. A shorter alternative would be to use the error-suppression operator (<php>@</php>), but it is slow and considered bad practice.

Thus, this RFC proposes a small tweak to <php>??</php>.

===== Proposal =====
This RFC proposes a unary version of <php>??</php>, which would be equivalent to the normal binary version where the second argument is <php>NULL</php>. That is, <php>$foo??</php> would now be valid, and behave identically to <php>$foo ?? NULL</php> in every respect.

The unary form of <php>??</php> would provide a faster, non-proscribed alternative to <php>@</php> for retrieving possibly-unset variables. It would also provide a concise, non-redundant way to check the value of a possibly-unset variable.

One practical use is optional request parameters:

<code php>
if ($_POST["action"]?? === "submit") {
    // Form submission logic
} else {
    // Form display logic
}
</code>

Another is optional options in, say, a configuration object, or an “options bag” parameter:

<code php>
if ($optionsBag->safeMode === TRUE) {
    // Safe mode
} else {
    // Not safe
}
</code>

===== Backward Incompatible Changes =====
None.

===== Proposed PHP Version(s) =====
Next PHP 7.x, which would be PHP 7.2 at the time of writing.

===== RFC Impact =====
==== To SAPIs, Existing Extensions and Opcache ====
There is no effect on any of these, with the exception of extensions inspecting the AST, for which the unary <php>??</php> is indistinguishable from <php>?? NULL</php>.

===== Unaffected PHP Functionality =====
The behaviour of binary <php>??</php> is unchanged, as is <php>isset()</php>.

===== Future Scope =====
None.

===== Proposed Voting Choices =====
This is a simple language change which should only require a 2/3 majority vote on whether or not to approve it.

===== Patches and Tests =====
A php-src patch, including a test, can be found here: https://github.com/php/php-src/pull/2589

Language specification patch forthcoming.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
  - a link to the language specification section (if any)

===== References =====
  * [[rfc:isset_ternary|PHP RFC: Null Coalesce Operator]]