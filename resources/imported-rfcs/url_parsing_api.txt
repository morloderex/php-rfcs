====== PHP RFC: Add WHATWG compliant URL parsing API ======
  * Version: 1.0
  * Date: 2024-06-11
  * Author: Máté Kocsis, kocsismate@php.net
  * Status: Draft
  * First Published at: https://wiki.php.net/rfc/url_parsing_api
  * Implementation: https://github.com/php/php-src/pull/14461

===== Introduction =====

URLs are one of the most fundamental concepts of the web because they make it possible to reference specific resources on a network. URLs were invented by Tim Berners-Lee himself, and his work was accepted as [[https://datatracker.ietf.org/doc/html/rfc1738|RFC 1738]]. Since then other specifications have also emerged, out of which [[https://url.spec.whatwg.org/#title|WHATWG URL]] is the most notable one, because it's implemented by most browsers nowadays.

Despite the ubiquitous nature of URLs, they are not so unequivocal as people may think, because different clients treat and parse them differently by either following one of the standards, or even worse, not following any at all. Unfortunately, PHP falls into the latter category: the ''parse_url()'' function is offered for parsing URLs, however, it isn't compliant with any standards. Even the PHP manual contains the following warning:

<blockquote>This function may not give correct results for relative or invalid URLs, and the results may not even match common behavior of HTTP clients. ...</blockquote>

Incompatibility with current standards is a serious issue, as it hinders interoperability with different tools (i.e. HTTP clients), or it can result in bugs which are difficult to notice.

===== Proposal =====

In order to address the above mentioned problems, a new, always available ''URL'' extension is to be added to the PHP core.  Initially, it would only support the WHATWG URL specification, with the explicit intention of adding support for other standards when the need arises.

The extension would support parsing, as well as manipulating URLs. For this purpose, the following internal classes and methods are added:

<code php>
namespace Url;

enum UrlComponent: int
{
    case Scheme = 0;
    case Host = 1;
    case Port = 2;
    case User = 3;
    case Password = 4;
    case Path = 5;
    case Query = 6;
    case Fragment = 7;
}

/** @strict-properties */
final readonly class Url implements \Stringable
{
    public function __construct(
        public ?string $scheme,
        public ?string $host,
        public ?int $port,
        public ?string $user,
        public ?string $password,
        public ?string $path,
        public ?string $query,
        public ?string $fragment
    ) {}

    public function getScheme(): ?string {}

    public function withScheme(?string $scheme): static {}

    public function getAuthority(): ?string {}

    public function getUserInfo(): ?string {}

    public function withUserInfo(?string $user, ?string $password): static {}

    public function getHost(): ?string {}

    public function withHost(?string $host): static {}

    public function getPort(): ?int {}

    public function withPort(?int $port): static {}

    public function getPath(): ?string {}

    public function withPath(?string $path): static {}

    public function getQuery(): ?string {}

    public function withQuery(?string $query): static {}

    public function getFragment(): ?string {}

    public function withFragment(?string $fragment): static {}

    public function __toString(): string {}
}

/**
 * @strict-properties
 * @not-serializable
 */
final readonly class UrlParser
{
    public static function parseUrl(string $url): ?Url {}

    /** @return array<string, int|string> */
    public static function parseUrlToArray(string $url): ?array {}

    public static function parseUrlComponent(string $url, UrlComponent $component): string|int|null {}
}

</code>

===== Backward Incompatible Changes =====

None.

===== Proposed PHP Version(s) =====

Next minor version (either 8.5 or 9.0).

===== Future Scope =====
Support for other parser backends may be added so that other libraries (like [[https://www.ada-url.com/|Ada URL]]) could be used instead of Lexbor.

===== References =====
Discussion thread: 

===== Vote =====

The vote requires 2/3 majority in order to be accepted.

<doodle title="Add the WHATWG compliant URL API described above?" auth="kocsismate" voteType="single" closed="yes" closeon="2024-05-30T10:00:00Z">
   * yes
   * no
</doodle>
