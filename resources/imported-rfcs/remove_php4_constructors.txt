====== PHP RFC: Remove PHP 4 Constructors ======
  * Version: 1.0
  * Date: 2014-11-17
  * Author: Levi Morrison <levim@php.net>
  * Status: Under Discussion
  * First Published at: http://wiki.php.net/rfc/remove_php4_constructors

===== Introduction =====
PHP 4 constructors are methods that have the same name as the class they are defined in. PHP 5 preserved the ability to use PHP 4 style constructors in some cases. The strangeness of when the constructor is and isn't used increases the mental model for programmers.

<PHP>
class Filter {

    // A constructor in PHP 4 and 5
    function filter($a) {}
}
</PHP>

<PHP>
// Namespaced classes do not recognize PHP 4 constructors
namespace NS;
class Filter {

    // Not a constructor
    function filter($a) {}
}
</PHP>

<PHP>
// Defining __construct before filter makes filter a normal method
class Filter {
    function __construct() {}

    // Not a constructor
    function filter($a) {}
}

//… but the other way raises an E_STRICT

class Filter {

    // A constructor…
    function filter($a) {}

    //…until this overrides it and raises E_STRICT
    function __construct() {}
}
</PHP>


===== Proposal =====
This RFC proposes changes for two PHP versions:

  - **PHP 5.7**: an ''E_DEPRECATED'' notice will be raised whenever a PHP 4 style constructor is defined. Note that this means it will not raise an error in a context where a method shares the same name as the class but is not recognized as a constructor, such as in namespaced classes or in traits. Emitting this ''E_DEPRECATED'' warning will help migration from PHP 5 to PHP 7. Note that the RFC to [[/rfc/switch.default.multiple#proposal|remove multiple default statements from switch blocks]] proposed this same technique.
  - **PHP 7.0**: methods with the same name as the class they are defined will not be recognized as constructors in any context. 

Some code samples in the [[#examples|Examples]] section show how code is impacted.

==== Examples ====
Under this proposal, <php>function filter</php> would no longer be recognized as a constructor:

<PHP>
class Filter {

    // A constructor in PHP 4 and 5; not in PHP 7
    function filter($a) {}
}
</PHP>

==== Backward Incompatible Changes ====
This will break code that relies on PHP 4 constructors. The solution is to rename the constructors to ''__construct''. This will allow the class to be compatible with PHP 5, but breaks compatibility with PHP 4 completely.

===== Proposed PHP Version(s) =====
This RFC targets PHP 7 and PHP 5.NEXT:

PHP 5.7: Raise ''E_DEPRECATED'' whenever a PHP 4 style constructor is defined, noting that it will be a normal method in PHP 7 \\
PHP 7.0: Stop recognizing methods with the same name as the class they are defined in as constructors.

===== RFC Impact =====
This RFC has no impact to SAPI's or extensions.

==== To Opcache ====
Opcache is likely to be unaffected by this proposal, but this has not yet been verified.

===== Open Issues =====
There are some tests that rely on behavior that this RFC would remove to trigger error conditions((See [[https://github.com/php/php-src/blob/f0c926564c5f7de9462d9ca7bd75014b14a63f56/Zend/tests/errmsg_045.phpt|Zend/tests/errmsg_045.phpt]])). These tests would need to find a different error trigger.

===== Proposed Voting Choices =====
This RFC requires 2/3 vote in favor of removing PHP 4 style constructors to pass.

===== Patches and Tests =====
A partial implementation based on the master branch can be found here: https://github.com/php/php-src/pull/901

The tests for this behavior have not yet been fixed. As mentioned in [[#open_issues|Open Issues]], there are some tests that rely on an E_STRICT being generated to test other behavior; these will need to find a new trigger.

===== References =====
TODO: dig up pains caused by PHP 4 constructors in PHP 5 \\
Links to external references, discussions or RFCs