===== Request for Comments: Property Accessors Syntax =====
  * Version: 1.2
  * Created: 2012-12-29
  * Author: Clint Priest <phpdev at zerocue dot com>
  * Contributors: Nikita Popov
  * Status: Ready for Review & Discussion or Vote

==== Fork ====
  * The changes for this RFC are available here: https://github.com/cpriest/php-src/tree/accessors

==== Introduction ====
This document describes the property accessor syntax.  The RFC which this was crafted from is located here: https://wiki.php.net/rfc/propertygetsetsyntax

Previous Revision: https://wiki.php.net/rfc/propertygetsetsyntax-v1.1

==== What Are Property Accessors? ====

Property accessors provide a clean, easy to understand and unified syntax for get/set accessors.  They allow read and write requests (gets and sets) from a class property to be run through a method first.  This method can perform validation or a transformation, or update other areas of the class.  Properties do not even have to be associated with a class member, and can generate their own data on-the-fly.

===== Terminology / Glossary =====

To provide clarity of documentation, the following glossary and example are provided:
  * Traditional Property - A property which has no accessors, a class "variable," the only type of property presently available
  * Guarded Property - A property with accessors which guard read, write, isset and unset access through code
  * Accessor - A method defined for a property which implements code that is executed when a property is accessed
    * getter - A type of accessor which is used to retrieve the value of the property
    * setter - A type of accessor which is used to change the value of a property
    * issetter - A type of accessor which is used to determine whether the property isset()
    * unsetter - A type of accessor which is used to unset() the property

<code php>
// Code sample indicating the terminology
class TimePeriod {
    private $Seconds;  // <-- Traditional Property

    public $Hours {    // <-- Guarded Property
        get() { return $this->Seconds / 3600; }      // <-- Accessor, more specifically a getter
        set($x) { $this->Seconds = $x* 3600; }       // <-- Accessor, more specifically a setter
        isset() { return isset($this->Seconds); }    // <-- Accessor, more specifically an issetter
        unset() { unset($this->Seconds); }           // <-- Accessor, more specifically an unsetter
    }
}
</code>

**A fully implemented, symmetrically defined property with accessors should be functionally identical to a traditional property**

===== Syntax =====

==== Basic Syntax ====

This is the basic property accessor syntax as implemented.

<code php>
class TimePeriod {
    private $Seconds;

    // Properties accessors are implemented just like you would define an actual property
    public $Hours {
        get() { return $this->Seconds / 3600; }
        
        // In the set accessor, the variable $x holds the incoming value to be "set" 
        set($x) { $this->Seconds = $x * 3600; } 
    }
}
</code>

<code php>
// Accessing the property is the same as accessing a class member
$time = new TimePeriod();
$time->Hours = 12;  // Stored as 43200
echo $time->Hours;  // Outputs 12
</code>

**Typehints**
The setter also allows for optional type hinting, such as
<code php>
    set(callable $x) { ... }
</code>

Version 1.1 did not have parenthesized syntax, v1.2 adds optional parenthesis format.  If no parenthesis are provided, then $value is automatically provided in the case of a setter, the following is equivalent to the previous block:

<code php>
class TimePeriod {
    private $Seconds;

    // Property accessors are implemented just like you would define an actual property
    public $Hours {
        get { return $this->Seconds / 3600; }
        
        // In the set accessor, the variable $value holds the incoming value to be "set" 
        set { $this->Seconds = $value * 3600; } 
    }
}
</code>
==== Overloading Properties ====

Properties can be overloaded in extending classes.  An overloaded property can replace an existing accessor declaration without touching the other, replace both the get and set declarations, or add an omitted accessor declaration turning the property into a read/write property.  Additionally, a property may have its visibility increased through overloading.  Get or set declarations cannot be removed or hidden by the child class in any way.

<code php>
class TimePeriod {
    protected $Seconds = 3600;

    public $Hours {
        get { return $this->Seconds / 3600; }
        set { $this->Seconds = $value * 3600; }
    }

    // This property is read only as there is no setter
    public $Minutes {
        get { return $this->Seconds / 60; }
    }

    /* public getter, protected setter */
    public $Milliseconds {
        get { return $this->Seconds * 1000; }
        protected set { $this->Seconds = $value / 1000; }
    }
}

class HalfTimePeriod extends TimePeriod {
    /* Overload getter, inherit setter */
    public $Hours {
        get { return ($this->Seconds / 3600) / 2; }

        /* The base setter will be inherited */
    }

    public $Minutes {
        // A setter is added, turning this property into a read/write property instead of read only
        set { $this->Seconds = $value * 60; }
    }

    public $Milliseconds {
        // An accessor can have its visibility increased in a child class, just like regular PHP methods
        // This accessor is now public instead of protected
        public set {
            // You can access a base class accessor explicitly, just like accessing a base class method
            parent->Milliseconds = $value;
        }
    }
}
</code>

=== Removal of Accessor ===
Subclasses may also eliminate the accessor aspect of a property by re-declaring the property without the accessor syntax.  This prunes the accessor functions from the sub-class that would ordinarily be inherited by the sub-class.  Take this example:

<code php>
class A {
     public $Foo {
         get { return 1; }
     }
}

class B extends A {
     public $Foo = 5;
}
$o1 = new A()
echo $o1->Foo;   // Echos 1 via A::get:$Foo

$o2 = new B();
echo $o2->Foo;   // Echos 5 from direct property access (no accessors present in class B)
</code>

Note that the re-defined property must still be public (may not be redefined as private or protected).
==== Asymmetric Accessor Accessibility ====
Property accessors can have different levels of visibility for the getter and setter.  This is achieved by setting either the get or set accessor to a lower visibility than the property is set to.

<code php>
class TimePeriod {
    private $Seconds = 3600;

    public $Hours {
        get { return $this->Seconds / 3600; }
        protected set { $this->Seconds = $value * 3600; }
    }
}
</code>

<code php>
$o = new TimePeriod();
echo $o->Hours;    // Prints 1
$o->Hours = 12;    // Fatal error: Cannot set protected property TimePeriod::$Hours from context '' 
</code>

In the above example the getter inherits the public access level of the property definition while the setter becomes protected.

==== isset / unset ====
To facilitate complete functionality with properties it is necessary to provide accessor functions to act on isset() and unset() calls.  These operate just like their magic %%__isset() and __unset()%% functions but are definable within the property block.

<code php>

class TimePeriod {
    private $Seconds = 3600;

    public $Hours {
        get { return $this->Seconds / 3600; }
        set { $this->Seconds = $value; }
        isset { return isset($this->Seconds); }
        unset { unset($this->Seconds); }
    }
}
</code>

==== Guarding ====

Accessors guard properties access such that if a property has accessors defined for it, the accessors will be called whenever the property is accessed.  Only the appropriate accessors themselves may directly access the underlying property, even from within the same class.

<code php>
class TimePeriod {
    public $Hours {
        get { return $this->Hours ?: "not specified"; }
        set { $this->Hours = $value; }
    }
}

$o = new TimePeriod();

echo $o->Hours;   // echos not specified

$o->Hours = 1;
echo $o->Hours;   // echos 1
</code>

=== For Additional Clarity ===

All interaction with a guarded property is proxied through the appropriate accessor, there are only two exceptions:
  * Within a getter's scope, reads are not proxied; the property is read directly.
  * Within a setter's scope, writes are not proxied; the property is written to directly.

Accessors are free to interact with other properties which are visible to them, but access to other guarded properties is always proxied.

Accessors are not required to use the property value, but it always exists.

=== Interaction Between Accessors ===

Accessors are independent, in the below example the get accessor Foo::$b attempting to access $this->a goes through the getter for a.
<code php>
class Foo {
    public $a {
        get { $this->a = 1; return 2; }
        set;
    }
    public $b {
        get { return $this->a; }
    }
}

$foo = new Foo();
echo $foo->a; // Echos 2 but underlying property is set to 1
echo $foo->b; // Echos 2 via getter for $a which again sets its underlying property $a to 1

/* Note, that without the set; a warning would be produced by an attempt to set $this->a from the 
   getter for $a, this is because a setter is required to write to the property, even the getter 
   cannot write to it's own property without the setter, only the setter may do that. */

</code>

==== Automatic Implementations ====
You may also use automatic implementations of accessors by not defining a body to the accessor.  Doing so causes an automatic implementation to occur.  

Because property accessors shadow traditional properties, the property data storage is accessible only from within the accessor.

The isset automatic implementation tests for the property to be non-null.  (See php equivalent below)
The unset automatic implementation sets the property to be null.  (See php equivalent below)

<code php>
class TimePeriod {
    // Accessors are implemented just like you would define an actual accessor, but without a body
    public $Hours {
        get;
        set;
        isset;
        unset;
    }
}
</code>

Translates to this:
<code php>
class TimePeriod {
    public $Hours {
        get { return $this->Hours; }
        set { $this->Hours = $value; } 
        isset { return $this->Hours !== NULL; }
        unset { $this->Hours = NULL; }
    }
}
</code>

>  **Note:** isset & unset implementations are always provided with default implementations unless the author explicitly defines their own.

=== Invalid Usage of isset()/unset() ===

There are two cases where isset and unset do not logically make sense, in both of these cases the actual calls to isset/unset will silently disregard the invalid state and continue, as detailed below:

  * If there is no getter defined, then an isset() call is technically invalid since the value cannot be obtained to see if it was set.  In this case, isset() will silently ignore the invalid state, return false and continue execution.
  * If there is no setter defined, then an unset() call is technically invalid since the value cannot be changed as there is no setter.  In this case, unset() will silently ignore the invalid state, return false and continue execution.

==== Recursion ====
Recursion with property accessors works identically to their %%__get()%% and %%__set()%% cousins in that recursion is guarded, the first call to a getter will call the accessor, a second attempt to get that property will access the underlying property directly.

<code php>
1  class A {
2      public $Foo {
3         get {
4             if($this->Foo)
5                 return $this->Foo;
6             return $this->Foo = 5;
7         }
8         set;
9     }
10 }

11 $o = new A();
12 echo $o->Foo;
13 echo $o->Foo;

Line 12: Calls A::get:$Foo;
Line  4: Directly reads the underlying property (getter is guarded from a 2nd call)
Line  6: Calls A::set:$Foo(5) and finally returns the value 5
Line 13: Calls A::get:$Foo;
Line  4: Directly reads the underlying property (getter is guarded from a 2nd call)
Line  5: Directly reads the underlying property (getter is guarded from a 2nd call) and returns the value
</code>

==== Final Properties ====
Properties declared final are not allowed to be overloaded in a child class, just like final methods.

<code php>
class TimePeriod {
    private $Seconds;

    public final $Hours {
        get { return $this->Seconds / 3600; }
        set { $this->Seconds = $value * 3600; }
    }
}

class HalfTimePeriod extends TimePeriod {
    private $Seconds;

    // This attempt to overload the property "Hours" will throw an error because it was declared final in the base class
    public $Hours {
        get { return ($this->Seconds / 3600) / 2; }
    }
}
</code>

**Final Accessors**

The get or set accessor of a property can be declared "final" independently of each other.  This would allow for one of them to be overloaded, but not the other.

<code php>
class TimePeriod {
    private $Seconds;

    // Notice there is no "final" keyword on the property declaration
    public $Hours {
        final get { return $this->Seconds / 3600; } // Only the get accessor is declared final
        set { $this->Seconds = $value * 3600; }
    }
}

class HalfTimePeriod extends TimePeriod {
    private $Seconds;

    public $Hours {
        // This attempt to overload the getter of the "Hours" property will throw an
        // error because it was declared final in the base class
        get { return ($this->Seconds / 3600) / 2; }
                                                   
        // This would be accepted
        set ( $this->Seconds = ($value * 3600) * 2; )
    }
}
</code>

==== Static Property Accessors ====
Static property accessors will not be in the first release of accessors, there are too many engine changes needed to enable this functionality.

==== References ====
Functions such as sort() require a reference to the underlying data storage value in order to modify them, in these cases you can place the & before the get to indicate the returning of a reference variable.

<code php>

class SampleClass {
    private $_dataArray = array(1,2,5,3);
    
    public $dataArray {
        &get { return $this->_dataArray; }
    }
}

$o = new SampleClass();
sort($o->dataArray);
/* $o->dataArray == array(1,2,3,5); */
</code>

=== All of the following work and have test cases written for them ===

  * $foo->bar[] = 1
  * $foo->bar[123] = 4
  * $foobar = &$foo->bar
  * $foobar->baz = $x with $bar being object or empty or non-object value
  * $foo->bar{$x} = “foo” (string offsets)
  * $foo->bar = &bar->baz; (setting either side affects the other)


==== Operators ====
The following operators have tests written for them and work as though it were any other variable.  If the operator attempts to make a change to a property for which no setter is defined, it will produce an error such as "Cannot set property xxx, no setter defined."  If a setter is defined, then the assignment operator works as expected.  

The following operators have code tests written already:  Pre/Post Increment/Decrement, Negation, String Concatenation (.), +=, -=, *=, /=, &=, |=, +, -, *, /, %, &, |, &&, ||, xor, ~, ==, ===, !=, !==, >, <, >=, <=, .=, <<, >>, Array Union (array + array), instanceof

==== Read Only And Write Only Properties ====

Defining properties with only a getter or only a setter will make them read only and write only respectively but this does not enforce anything with subclasses.  

Developers wishing to prevent a setter from being defined by sub-classes will need to use the final keyword with something along these lines:

<code php>
class TimePeriod {
    private $Seconds;

    public $Hours {
        get() { return $this->Hours; }
        private final set($value) { throw new Exception("Setting of TimePeriod::$Hours is not allowed."); }
    }
}
</code>

==== Interface Property Accessors ====

Interfaces may define property accessor declarations without a body.  The purpose of this is to define property accessors that must exist in an implementing class.

When a class implements an interface that defines a getter, it can add in a setter to turn the property into a read/write property.  The inverse is also true for implementing an interface with a setter only.  This is because interfaces are designed to enforce what //should be// in a class, and not what //should not be// in a class.

<code php>
interface iSampleInterface {
    public $MyProperty {
        get;
        set;
        isset;
        unset;
    }
}
</code>

Furthermore, a traditional property satisfies any requirements that an property accessor declaration within an interface declares, therefore, the following is a valid implementation of the above interface:

<code php>
class A implements iSampleInterface {
    public $MyProperty;
}
</code>

==== Traits ====
Property accessors work as expected with traits including automatic accessor properties.  You can use any feature with traits that you could with classes including asymmetrical access levels, isset, unset, etc.

<code php>
trait SampleTrait {
    private $Seconds = 3600;
    
    public $Hours {
        get { return $this->Seconds * 3600; }
        set { $this->Seconds = $value / 3600; }
    }
}
</code>

==== Miscellaneous Q/A ====
%%__FUNCTION__ and __METHOD__%% return what you would expect from within an accessor:
<code>
__FUNCTION__ = __getFoo
 __METHOD__  = A::__getFoo

For a class A with a $Foo getter from within the getter.
</code>

===== Error Messages =====
Error messages related to property access are clear that they are related to properties and not the internal implementations as functions.  

For example, instead of seeing this error:
  Fatal error: Cannot call protected function TimePeriod::__setHours() from context '' in ...

The error is instead shown to be:
  Fatal error: Cannot set protected property TimePeriod::$Hours from context '' in ...
  
This is done to provide the easiest to consume error messages for userland programmers.

===== Reflection =====

==== Changes ====

  * ReflectionClass::getProperties() will now return an array of ReflectionProperty and ReflectionPropertyAccessor classes.
  * ReflectionClass::getMethods() will not return accessor functions (hides implementation detail).  
  * ReflectionClass::getProperty() will also return an appropriate class based on being a property or a property with accessors.

==== Additions ====

=== ReflectionPropertyAccessor  ===

The new class has all of the same functions as the ReflectionProperty as well as:

  * getGetter(): Returns a ReflectionMethod object for the getter or false if no getter is defined.
  * getSetter(): Returns a ReflectionMethod object for the setter or false if no setter is defined.
  * getIssetter(): Returns a ReflectionMethod object for the isset accessor.
  * getUnsetter(): Returns a ReflectionMethod object for the unset accessor.

All other functions have been updated to return appropriate values and/or provide appropriate actions for an accessor.

=== ReflectionMethod class ===

  * isAccessor(): Returns true if the method is an accessor
  * isAutoImplemented(): Returns true if the method is an accessor and was automatically implemented

A fairly extensive test-suite has been created to test the functionality as well.

===== Backward Compatibility =====
There are no known backward compatibility issues.

===== Internal Implementation =====

Implementation Details Document: https://wiki.php.net/rfc/propertygetsetsyntax-implementation-details

===== Tests =====
  * 2012-12-30 : 67 tests at this time

