====== PHP RFC: Your Title Here ======
  * Version: 0.9
  * Date: 2022-06-16
  * Author: Pierrick Charron <pierrick@php.net>
  * Status: Draft
  * First Published at: https://wiki.php.net/rfc/curl-url-api

===== Introduction =====

Since its version 6.62.0 [1], libcurl features a brand new URL API [2] that can be used to parse and generate URLs, using libcurlâ€™s own parser. One of the goal of this API is to tighten a problematic vulnerable area for applications where the URL parser library would believe one thing and libcurl another. This could and has sometimes lead to security problems [3].

===== Proposal =====

The current RFC propose the addition of 2 new classes :

==== CurlUrl ====

<PHP>
final class CurlUrl implements Stringable
{
    public const APPEND_QUERY = UNKNOWN;
    public const DEFAULT_PORT = UNKNOWN;
    public const DEFAULT_SCHEME = UNKNOWN;
    public const DISALLOW_USER = UNKNOWN;
    public const GUESS_SCHEME = UNKNOWN;
    public const NO_DEFAULT_PORT = UNKNOWN;
    public const ALLOW_UNSUPPORTED_SCHEME = UNKNOWN;
    public const PATH_AS_IS = UNKNOWN;
    public const URL_DECODE = UNKNOWN;
    public const URL_ENCODE = UNKNOWN;
    public const NO_AUTHORITY = UNKNOWN;
    public const ALLOW_SPACE = UNKNOWN;

    public function __construct(?string $url = null, int $flags = 0) {}

    public function get(int $flags = 0): string {}
    public function set(?string $url, int $flags = 0): CurlUrl {}

    public function getHost(): ?string {}
    public function setHost(?string $host): CurlUrl {}

    public function getScheme(): ?string {}
    public function setScheme(?string $scheme, int $flags = 0): CurlUrl {}

    public function getPort(int $flags = 0): ?int {}
    public function setPort(?int $port): CurlUrl {}

    public function getPath(int $flags = 0): string {}
    public function setPath(?string $scheme, int $flags = 0): CurlUrl {}

    public function getQuery(int $flags = 0): ?string {}
    public function setQuery(?string $query, int $flags = 0): CurlUrl {}

    public function getFragment(int $flags = 0): ?string {}
    public function setFragment(?string $fragment, int $flags = 0): CurlUrl {}

    public function getUser(int $flags = 0): ?string {}
    public function setUser(?string $user, int $flags = 0): CurlUrl {}

    public function getPassword(int $flags = 0): ?string {}
    public function setPassword(?string $password, int $flags = 0): CurlUrl {}

    public function getOptions(int $flags = 0): ?string {}
    public function setOptions(?string $options, int $flags = 0): CurlUrl {}

    public function getZoneId(int $flags = 0): ?string {}
    public function setZoneId(?string $zoneid, int $flags = 0): CurlUrl {}

    public function __toString(): string {}
}
</PHP>

==== CurlUrlException ====

The <php>CurlUrlException</php> class represents an error raised by libcurl. The constants exposed in this function are all the <code>CURLUE_*</code> error codes that libcurl may raise. Those constants may vary depending on the version of libcurl ext/curl was compiled with.

<PHP>
final class CurlUrlException extends Exception
{
    /* libcurl >= 7.62.0 */
    public const BAD_PORT_NUMBER = UNKNOWN;
    public const MALFORMED_INPUT = UNKNOWN;
    public const OUT_OF_MEMORY = UNKNOWN;
    public const UNSUPPORTED_SCHEME = UNKNOWN;
    public const URL_DECODING_FAILED = UNKNOWN;
    public const USER_NOT_ALLOWED = UNKNOWN;
    
    /* libcurl >= 7.81.0 */
    public const BAD_FILE_URL = UNKNOWN;
    public const BAD_FRAGMENT = UNKNOWN;
    public const BAD_HOSTNAME = UNKNOWN;
    public const BAD_IPV6 = UNKNOWN;
    public const BAD_LOGIN = UNKNOWN;
    public const BAD_PASSWORD = UNKNOWN;
    public const BAD_PATH = UNKNOWN;
    public const BAD_QUERY = UNKNOWN;
    public const BAD_SCHEME = UNKNOWN;
    public const BAD_SLASHES = UNKNOWN;
    public const BAD_USER = UNKNOWN;
}
</PHP>


===== Backward Incompatible Changes =====

None, except that the class names <php>CurlUrl</php>, <php>CurlException</php> will be declared by PHP and conflict with applications declaring one of the same class name in the global namespace.

===== Proposed PHP Version(s) =====

8.2

===== Future Scope =====

The current implementation of the <php>CurlUrl</php> class is mutable. We might want to add a new <php>ImmutableCurlUrl</php> class.

===== Proposed Voting Choices =====

As per the voting RFC a yes/no vote with a 2/3 majority is needed for this proposal to be accepted.

===== Patches and Tests =====

https://github.com/php/php-src/pull/8770

===== Implementation =====

N/A

===== References =====

  - https://daniel.haxx.se/blog/2018/10/31/curl-7-62-0-moar-stuff/
  - https://daniel.haxx.se/blog/2018/09/09/libcurl-gets-a-url-api/
  - https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf
