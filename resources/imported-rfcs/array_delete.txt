====== Request for Comments: array_delete() for elements deletion ======
  * Version: 0.1
  * Date: 2012-08-21
  * Author:  Rasmus Schultz <rasmus@mindplay.dk>
  * Status: Under Discussion
  * First Published at: http://wiki.php.net/rfc/array_delete
===== Introduction =====

This RFC proposes the addition of a set of two new functions that simplify working with arrays containing a set of unique values or objects that do not have any natural (or distinct) scalar keys that can be used as indices.

While the array-type in PHP does not support set-semantics, these functions simplify working with a set of unique values or objects stored in an array.

===== array_delete =====

The first function simplifies removal of a value from an array, when the index is not known:

<code php>bool array_delete(&$array, $value, $strict = TRUE)</code>
The function is "destructive", in the sense that it modifies the array in-place - for non-destructive removal, use array_filter().

The boolean return-value indicates whether or not the specified value was present and was removed.

To clarify how this function works, here is the PHP equivalent function:

<code php>function array_delete(&$array, $value, $strict = TRUE) {
  while (FALSE !== ($index = array_search($value, $array, $strict))) {
    unset($array[$index]);
  }
}</code>
If the same value occurs more than once in the given array, all occurrences of the given value will be deleted.

To prevent accidental deletion, $strict defaults to true - note that this differs from array_search() where the most likely objective is to "find something".

===== array_add =====

To complement the array_delete() function, in terms of working with a set of unique values, a second function is proposed:

<code php>bool array_add(&$array, $value, $strict = TRUE)</code>
This function is "destructive", like it's counterpart - for non-destructive addition, use array_merge().

The boolean return-value indicates whether or not the specified value was not already present and was added.

To clarify how this function works, here is the PHP equivalent function:

<code php>function array_add(&$array, $value, $strict = TRUE) {
  if (false === array_search($value, $array, $strict)) {
    $array[] = $value;
    return true;
  }
  return false;
}</code>
To prevent accidentally adding duplicates, $strict defaults to true - this is consistent with array_delete().
===== Proposal and Patch =====

No patch yet.

===== Reference =====

  * PHP Internals discussion - http://www.serverphorums.com/read.php?7,546905
  * Stack Overflow answers - http://stackoverflow.com/questions/7225070/php-array-delete-by-value-not-key

===== Changelog =====

  * 0.1 Initial version 2012/08/21
  * 0.2 Changed to Rasmus' gist version (https://gist.github.com/321ad9b4b8c4e1713488) 2012/08/21