====== PHP RFC: new MyClass()->method() without parentheses ======

  * Date: 2023-12-29
  * Author: Valentin Udaltsov <vudaltsov@php.net>
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/new_without_parentheses
  * Implementation: https://github.com/php/php-src/pull/13029

===== Introduction =====

"Class member access on instantiation" feature
[[https://php-legacy-docs.zend.com/manual/php5/en/migration54.new-features#:~:text=Class%20member%20access%20on%20instantiation%20has%20been%20added%2C%20e.g.%20(new%20Foo)%2D%3Ebar().|was introduced in PHP 5.4.0]].
Since then methods, properties and constants can be accessed on a newly created instance without an intermediate variable,
but **only** if the new expression is wrapped in parenetheses:

<code php>
class MyClass
{
    public function method(): void
    {
        echo 'Hello, World!';
    }
}

(new MyClass())->method(); // Hello, World!

new MyClass()->method(); // PHP Parse error: syntax error, unexpected token "->"
</code>

At first glance ''new MyClass()->method()'' expression might seem ambiguous, but according to the same logic
''new MyClass()'' by itself is also ambiguous: is it ''new (MyClass())'' or ''new MyClass''? However, such ambiguity
does not exist: ''new MyClass()'' is an expression that is interpreted as an instantiation of class ''MyClass'' with zero
constructor arguments, not as instantiation of ''MyClass()'' function call result. This means that it's safe to further use ''new MyClass()''
without introducing additional parentheses. It's like replacing ''(MyClass::new())->method()'' with simply
''MyClass::new()->method()''.

In fact, the necessity to put parenetheses increases the language learning curve and complicates transition from
other C-like languages that allow to use new instance immediately without parenetheses (
[[https://onecompiler.com/java/3zxuee3bm|Java]],
[[https://onecompiler.com/csharp/3zxudhw4s|C#]],
[[https://onecompiler.com/typescript/3zxudfpyy|TypeScript]]).

The goal of this RFC is to make parentheses around the new expression optional.

===== Proposal =====

TODO

===== Backward Incompatible Changes =====

None.

===== Proposed PHP Version(s) =====

PHP 8.4
