====== PHP RFC: Object typehint ======
  * Version: 0.1
  * Date: 2016-08-12
  * Author: Micha≈Ç Brzuchalski <michal.brzuchalski@gmail.com>
  * Status: Draft
  * First Published at: https://wiki.php.net/rfc/object-typehint
  
Following the raging success of PHP 7.0 additions [[https://wiki.php.net/rfc/scalar_type_hints_v5|scalar type hints]] and [[https://wiki.php.net/rfc/return_types|return types]],
there is also place for object typehint and return type.

===== Introduction =====
Function and method typehints allow to declare expected sort of scalar type or class/interface but there is no way to declare any object type.
Function and method return type allow to declare expected sort of scalar type or class/interface but there is same situation imposiible to declare any object type.
Those two (typehint and return type) should exists both for consistency, allowing typehint should able to declare same return type.

===== Proposal =====
The ''object'' typehint and return type should be added to the engine, working the same way like in case of scalar does.
This would also mean to make ''object'' a reserved classname.

==== Return type ''object'' ====

=== Function ===
Function return-type set to ''object'' acts exactly as it is for scalar return-type right now. It means there is return-type validation at runtime based on ''zval'' type.

<code php>
function shouldReturnObject() : object {
    $obj = json_decode('{}');
    return $obj;
}
</code>

=== Methods ===
Method return-type set to ''object'' behaves the same as for function return-type in both class/interface contexts.

<code php>
class One {
    public function a() : object {}
}
interface Two {
    public function a() : object;
}
</code>

There is possibility to add type hint at inheritance in both class/interface contexts.

<code php>
class One {
    public function a() {}
}
class SubOne extends One {
    public function a() : object {}
}
interface Two {
    public function a();
}
interface SubTwo extends Two {
    public function a() : object;
}
</code>

At inheritance there must be same declaration type so it works like for scalar/class return-type. Missing return type at inheritance returns ''Fatal error: Declaration of Inherited::a() must be compatible with Original::a(): object''.

==== Parameter type-hint ====

=== Function ===
Function parameter type-hint set to ''object'' acts exactly as it is for scalar type-hint right now. It means there is validation of given params type at runtime.

<code php>
function acceptsObject(object $obj) {
    // there is no need to check `is_object($obj)` yo can simply check for eg. `instanceof`
    if ($obj instanceOf \stdClass) {
    
    } elseif ($obj instanceof \MyObject) {
    
    }
}
acceptsObject(json_decode('{}'));
acceptsObject(new \MyObject());
</code>

=== Methods ===

====== Reflection ======
''ext/reflection'' will need to be updated in order to support ''object'' type declaration reflection for parameters and return type reflection for methods and functions. This is left to a follow-up RFC to unify type-declaration and return-type information into a uniform reflection API.

===== Backward Incompatible Changes =====
This RFC adds ''object'' as reserved classname. This may collide with existing classes which are neither namespaced nor prefixed.

===== Proposed PHP Version(s) =====
This is proposed for the next minor version of PHP, currently PHP 7.2.

===== RFC Impact =====

==== To SAPIs ====
None.

==== To Existing Extensions ====
None.

==== Unaffected PHP Functionality ====

This doesn't affect the behaviour of cast operators.

===== Proposed Voting Choices =====
As this is a language change, a 2/3 majority is required. The vote is a straight Yes/No vote for accepting the RFC and merging the patch.

===== Patches and Tests =====
A proof of concept implementation is on the way. Will be updated in next version of this RFC.