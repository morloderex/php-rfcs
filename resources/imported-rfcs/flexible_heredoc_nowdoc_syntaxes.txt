====== PHP RFC: Flexible Heredoc and Nowdoc Syntaxes ======
  * Version: 0.9
  * Date: 2017-09-16
  * Author: Thomas Punt, tpunt@php.net
  * Status: Draft
  * First Published at: https://wiki.php.net/rfc/flexible_heredoc_nowdoc_syntaxes

===== Introduction =====
The heredoc and nowdoc syntaxes have very rigid requirements. This has caused them to be, in-part, eschewed by developers because their usage in code can look ugly and harm readability. This proposal therefore puts forth two changes to the current heredoc and nowdoc syntaxes:
  - To enable for the closing marker to be indented, and
  - To remove the new line requirement after the closing marker

===== Proposal =====

==== Closing Marker Indentation ====

The indentation of the closing marker will change code from:
<code php>
<?php
class foo {
    public $bar = <<<EOT
bar
EOT;
}
</code>

To:
<code php>
<?php
class foo {
    public $bar = <<<EOT
    bar
    EOT;
}
</code>

The indentation of the closing marker dictates the amount of whitespace to strip from each line within the heredoc/nowdoc. So let's demonstrate these semantics with a few examples:
<code php>
// no indentation
echo <<<END
      a
     b
    c
END;
/*
      a
     b
    c
*/

// 4 spaces of indentation
echo <<<END
      a
     b
    c
    END;
/*
  a
 b
c
*/
</code>

If the closing marker is indented further than any lines of the body, then a ''ParseError'' will be thrown:
<code php>
try {
    echo <<<END
      a
     b
    c
     END;
} catch (ParseError $pe) {
    // Parse error: Invalid body indentation level (expecting an indentation at least 5) in %s on line %d
    var_dump($e->getMessage());
}
</code>

Tabs are supported as well, however, tabs and spaces **must not** be intermixed regarding the indentation of the closing marker and the indentation of the body (up to the closing marker). In any of these cases, a ''ParseError'' will be thrown:
<code php>
// different indentation for body (spaces) ending marker (tabs)
{
	echo <<<END
	 a
		END;
}

// mixing spaces and tabs in body
{
    echo <<<END
    	a
     END;
}

// mixing spaces and tabs in ending marker
{
	echo <<<END
		 a
		 END;
}
</code>

These whitespace constraints have been included because mixing tabs and spaces for indentation is harmful to legibility.

==== Closing Marker New Line ====

Removing the closing marker requirement will change code from:
<code php>
stringManipulator(<<<END
   a
  b
 c
END
);

$values = [<<<END
a
b
c
END
, 'd e f'];
</code>

To:
<code php>
stringManipulator(<<<END
   a
  b
 c
END);

$values = [<<<END
a
b
c
END, 'd e f'];
</code>

This change was actually brought up in a previous RFC ([[rfc:heredoc-scanner-loosening|PHP RFC: Loosening heredoc/nowdoc scanner]]). One of the big gotchas that it mentioned, however, was that if the ending marker was found at the start of a line, then regardless of whether it was apart of another word, it would still be considered as the ending marker. For example, the following would not work:
<code php>
$values = [<<<END
a
b
ENDING
END, 'd e f'];
/*
Parse error: syntax error, unexpected 'ING' (T_STRING), expecting ']' in %s on line %d
*/
</code>

The implementation I am proposing avoids this problem by checking to see if a continuation of the found marker exists, and if so, then if it forms a valid identifier. This means that the terminating marker string will only be considered as such if it is matched exactly as a standalone, valid symbol (that is also found at the start of the line). This enables for the above snippet to now work.

Something such as the following will still not work, however:
<code php>
$values = [<<<END
a
b
END ING
END, 'd e f'];
/*
Parse error: syntax error, unexpected 'ING' (T_STRING), expecting ']' in %s on line %d
*/
</code>

(Notice the space after the first ''END''.) There is not a great deal that can be done about this. So the simple rule is: **do not choose a marker that appears in the body of the text** (though it would specifically have to occur at the start of a line in the text to cause problems).

===== Backward Incompatible Changes =====

The rigidity of the syntaxes are solely to minimise the chance of collisions between the enclosing marker and the text within the heredoc/nowdoc. But this has come at a cost of usability and readability of the feature. By making the syntaxes for heredoc and nowdoc more flexible, collisions that do occur will now cause errors if (and only if) the following conditions are met:

  * the colliding marker begins at the start of a line in the text
  * the colliding marker can be seen as standalone

The changes proposed in this RFC therefore comes down to whether you believe developers are responsible enough to choose non-colliding markers. I firmly believe that since we give developers the power to choose their own markers, then they should be responsible enough to choose markers that do not collide with the inner multiline text.

Therefore, I believe the tradeoff of making the heredoc and nowdoc syntaxes more flexible in return for requiring developers to actually choose good marker names is a tradeoff worth making.

So to quickly reiterate, the changes proposed by this RFC will enable for code such as the following:
<code php>
function something()
{
    stringManipulator(<<<END
   a
  b
 c
END
);
}
</code>

To look like the following instead:
<code php>
function something()
{
    stringManipulator(<<<END
       a
      b
     c
    END);
}
</code>

===== Proposed PHP Version(s) =====

The next PHP 7.x version (or 8.0, whichever comes next)

===== RFC Impact =====
No impact on SAPIs or extensions (that I know of).

===== Proposed Voting Choices =====

There will be two votes, both requiring a 2/3 majority. The first will be regarding whether the closing marker should be able to be indented. The second will be whether the closing marker should remove the new line requirement. These votes are orthogonal to one-another (it doesn't matter if one fails).

===== Patches and Tests =====

Initial implementation: https://github.com/php/php-src/compare/master...tpunt:heredoc-nowdoc-indentation

Language specification: will be updated if the RFC is accepted.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
  - a link to the language specification section (if any)

===== References =====
Links to external references, discussions or RFCs

===== Rejected Features =====
Keep this updated with features that were discussed on the mail lists.