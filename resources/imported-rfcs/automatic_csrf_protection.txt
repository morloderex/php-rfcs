====== PHP RFC: Automatic CSRF Protection ======
  * Version: 0.1
  * Date: 2016-05-10
  * Author: Yasuo Ohgaki <yohgaki@php.net>
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/automatic_csrf_protection


===== Introduction =====
CSRF ([[https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)|Cross Site Request Forgery]]) has been major vulnerability for PHP applications. CSRF protection is not difficult to implement especially with good web application frameworks. However, CSRF protection requires many lines of code if users have to implement by themselves. This proposal extends session module to provide optional automatic CSRF protection for any PHP web applications.

Session module has URL rewriter. It is used only for Trans SID (Transparent Session ID) for session management without cookie. URL rewriter can be extended to add CSRF protection token.


===== Proposal =====

====TL;DR;====

Session module is extended to manage CSRF status. When CSRF protection is enabled, CSRF attack is prevented by terminating execution by default. Developers may suppress error and detect CSRF protection(attack) status by themselves via new session function - session_csrf_status(). 

CSRF protection token is managed by session module and TTL value. Stolen CSRF protection token is valid upto defined TTL. Therefore, stolen CSRF protection token will not allow indefinite period of attacks. 

====Added/Extended settings/features====

  - Add hidden internal data structure to session data that stores CSRF token generation key. "__PHP_SESSION__" array is stored in session data, but user cannot see the key from their application.
  - Add session.csrf_protection(int) INI. Enable CSRF protection when session.csrf_protection=1. (This INI value may be specified as session_start() parameter) Default: session.csrf_protection=1. 0: disable, 1: post, 2:get, 3:post and get
  - Add session.csrf_ttl(int - seconds) INI. Controls expiration of CSRF protection token when value is greater than 0. 0 for disabling TTL control. Default: 3600
  - Add session.csrf_domains(string) INI. Controls trusted domains default to "". When empty, HTTP_HOST is used. Default: empty
  - Add session.csrf_error(int - error level) INI. Controls which error is raised for CSRF token validation error. Default: E_RECOVERABLE_ERROR
  - Extend session_start() to support csrf_protection, csrf_ttl, csrf_domains, csrf_error options.
  - Add int session_csrf_status(void) function that returns CSRF token validation status. 
    - SESSION_CSRF_DISABLED : CSRF protection is not enabled
    - SESSION_CSRF_INVALID : Invalid request
    - SESSION_CSRF_VALID : Valid request 
  - Add int session_csrf_validate(int $input_type) function that validate CSRF token manually.
    - SESSION_CSRF_GET : Check $_GET
    - SESSION_CSRF_POST : Check $_POST. Option may be session_csrf_validate(SESSION_CSRF_GET|SESSION_CSRF_POST).

===Behaviors===

==Page Generation==
  - Generate random CSRF token key (csrf_token_key) if it does not exist in __PHP_SESSION__ array.
  - Compute CSRF protection token. \\ SESSCSRF (CSRF protection token value) for GET = time()+session.csrf_ttl ."-". sha1("get". time()+session.csrf_ttl . csrf_token_key). \\ SESSCSRF for POST = = time()+session.csrf_ttl ."-". sha1("post". time()+session.csrf_ttl . csrf_token_key).
  - Set SESSCSRF as URL rewrite var. (This results all URLs/forms have SESSCSRF=token_value in the page)

==Automatic Token Validation ==
  - 
  - Split SESSCSRF token value by "-"
    - check TTL value part > time(). If expired, raise error.
    - check CSRF token part for POST === sha1("post". ttl_value . csrf_token_key). If not, raise error.
    - check CSRF token part for GET  === sha1("get". ttl_value . csrf_token_key). If not, raise error.
  - If error is not raised, CSRF protection status can be verified by session_csrf_status().


====Limitations====

  * Since users may enable/disable CSRF protection, pages that accept requests must enable CSRF protection. Otherwise, protection will not work. i.e. This feature is not fool proof.
  * Since CSRF protections adds CSRF protection token to all applicable URLs, pages that have both private URL and public URL cannot use automatic CSRF protection.

===== Backward Incompatible Changes =====

  * SESSCSRF may be used by users already

===== Proposed PHP Version(s) =====

  * PHP 7.1

===== RFC Impact =====
==== New Constants ====

  * Session module may define constant for CSRF protection token for manual protection. i.e. For pages have both private/public URLs. (There is SID constant for session ID. Any good name for this?)

  * session_csrf_status() function return value constants.


==== php.ini Defaults ====

TBD

If there are any php.ini settings then list:
  * hardcoded default values
  * php.ini-development values
  * php.ini-production values

===== Open Issues =====

  - sha1 is used because it is available always. It is possible to store which hash function is used in CSRF protection token.
  - How it works is subject to be changed. Please comment.
  - URL rewriter must be fixed before this RFC. (It has a issue. Patch exists, not applied yet)

===== Unaffected PHP Functionality =====

  * This RFC does not affect how session ID is managed.
  * If there is CSRF protection module, this proposal works as long as SESSCSRF is not used in GET/POST.

===== Future Scope =====



===== Proposed Voting Choices =====
Include these so readers know where you are heading and can discuss the proposed voting options.

State whether this project requires a 2/3 or 50%+1 majority (see [[voting]])

===== Patches and Tests =====

TBD

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== References =====
Links to external references, discussions or RFCs

===== Rejected Features =====
Keep this updated with features that were discussed on the mail lists.