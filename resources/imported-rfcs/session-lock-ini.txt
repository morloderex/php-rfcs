
====== PHP RFC: Introduce session.lock, session.lazy_write and session.lazy_destory ======
  * Version: 1.0
  * Date: 2014-01-01 
  * Author: Yasuo Ohgaki, yohgaki@ohgaki.net
  * Status: Under Discussion
  * First Published at: http://wiki.php.net/rfc/session-lock-ini

===== Introduction =====

**First proposal:**

Session module locks session data while executing script by default. This makes sure session data integrity by serializing script execution. i.e. Only a script may have control of session data at a time.

Current behavior makes sure session data integrity, but it serializes script execution and slows down application performance.

Memcache/Memcached session save handlers have lock ini option for better performance by sacrificing integrity a little. Second proposal mitigates broken integrity by unlocked session data access.

**Second proposal:**

Session data does not have to write back to session data storage if session data has not changed. By omitting write, overall system performance may improve. It also helps keep session integrity for unlocked session access.


**Third proposal:**

When session ID is renewed, race condition may occur. 

  * Script A renewed session ID
  * Script B accessed to server with old session ID

Current session module simply deletes session data with $delete_old_session=true. When $delete_old_session=false(default), it simply creates new session ID and leave old session ID.

Even when old session ID is destroyed, script B can access server with old session ID. Without session.strict_mode=On, session module may reinitialize session data with old ID which may be known to attackers.

Lazy session data deletion solves this issue.

**Summury:**
For concurrent session access, current session module saves "the last one write to session data". New session modules with new INI parameters enabled, module saves "the one changed session data".

Currently, programmer has no control which session data is saved. New behavior allows programmer to control save changed session data when there are concurrent access. 

===== Proposal 1 - session.lock =====

Introduce session.lock that enable/disable session data lock.

  session.lock - On by default.

When session.lock=On, save handler works exactly as it is now.

When session.lock=Off, save handler lock session data only when locking is strictly needed. For files save handler, it locks only when reading/writing data.

Current behavior:

  Open session data   -----------------
   ↓                         ↑
  Read session data           ｜
   ↓
  （Script execution）      Locked
   ↓
  Write session data          ｜
   ↓　                       ↓
  Close session data  ------------------

New behavior with session.lock=Off:
        
  Open session data 
   ↓               
  Read session data   ←   Locked
   ↓
  （Script execution）      
   ↓
  Write session data  ←   Locked
   ↓　               
  Close session data


===== Proposal 2 - session.lazy_wirte =====

Introduce session.lazy_write that enable/disable lazy session data writing.

  session.lazy_write - Off by default

When session.lazy_write=Off, session module works exactly as it is now.

WHen session.lazy_write=On, session module save session data only when session data has been changed.

When reading session data, session module takes MD5 hash for read data. When writing session data, session module compares old MD5 and new MD5 of session data and save session data only when MD5 differs.

Since write is omitted, save handler may not change "last updated time". This may result deleting session data by timeout. To prevent unwanted expiration of session, introduce new save handler API that update "last updated time" of session data.

  PS_UPDATE()

Session module calls PS_UPDATE() instead of PS_WRITE() when session.lazy_write=On.

==== files save handler implementation ====

For files save handler, PS_UPDATE() is not needed as it can update mtime at PS_OPEN(). Files save handler's PS_UPDATE() will be empty function that simply return true.


===== Proposal 3 - session.lazy_destroy =====

Introduce session.lazy_destroy that enable/disable lazy session data deletion.

  session.lazy_destroy - Off by default


In order to session module to know if the session data is already deleted and accessible, there must be flag/time stamp for deletion/access control.

**First option:**

<nowiki>
Save time stamp in $_SESSION['__PHP_SESSION_DESTROYED__']. 
</nowiki>

  * Pros - simple and fast.
  * Cons - exposed internal data.

**Alternative option:**

Introduce new save handler API that saves flag/time stamp else where.

  * Pros - clean. no exposed data.
  * Cons - complex and slow.

Since alternative option could impact performance a lot. This RFC choose first option.

===== Backward Incompatible Changes =====

None.

===== Proposed PHP Version(s) =====

PHP 5.6 and later.


===== Impact to Existing Extensions =====

None. Old save handler works without new php.ini support.

Save handler module needs to be recompiled, but recompile is required for new release anyway.


===== php.ini Defaults =====

  * session.lock=On
  * session.lazy_write=Off
  * session.lazy_destroy=Off

for hardcoded/development/production.

===== Open Issues =====

  * Proposal 3 implementation option - Implement these in files or introduce file_ext

Made this as voting option.

===== Proposed Voting Choices =====

  * Proposal1,2,3: Yes/No 

1) session.lock that minimize locked time. 2) session.lazy_write that write only session data has changed. 3) session.lazy_destroy that allows delayed session data deletion for concurrent accesses.

  * Where to implement: files or new files_ext

It is safe to add these changes to "files" save handler. However, we may implement this only to new save handler "files_ext". (Note: "files" and "files_ext" will be identical code except if conditions for new INI handling. i.e. we will have duplicate of codes.)


===== Vote =====


===== Patches and Tests =====

Patch will be reviewed before commit.

===== Implementation =====

After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== References =====

None.

===== Rejected Features =====
