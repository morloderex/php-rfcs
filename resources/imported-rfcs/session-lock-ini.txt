
====== PHP RFC: Introduce session options - lock, lazy_write and lazy_destory ======
  * Version: 1.3
  * Date: 2014-01-20 
  * Author: Yasuo Ohgaki, yohgaki@ohgaki.net
  * Status: Under Discussion
  * First Published at: http://wiki.php.net/rfc/session-lock-ini

===== Introduction =====

**proposal 1: options by session_start()**

session_start() does not have parameter currently. INI and other options may be passed as parameter. Add array parameter to session_start() to specify options.

Following options are new options for session and these options are not INI option and could only be specified via session_start() option parameter.

**proposal 2: lock**

Add lock option for concurrent script execution. Currently, script execution is serialized when session is used.

**proposal 3: lazy_wirte**

Session data does not have to write back to session data storage if session data has not changed. By omitting write, overall system performance may improve. It also helps keep session integrity for unlocked session access.


**proposal 4: lazy_destroy**

When session ID is renewed, race condition may occur. 

  * Script A renewed session ID
  * Script B accessed to server with old session ID

Current session module simply deletes session data with $delete_old_session=true. When $delete_old_session=false(default), it simply creates new session ID and leave old session ID.

Even when old session ID is destroyed, script B can access server with old session ID. Without session.strict_mode=On, session module may reinitialize session data with old ID which may be known to attackers.

Lazy session data deletion solves this issue. It also solves reliability issue of session_regenerate_id() on unreliable networks.

**proposal 5: session_info()**

Add

  array session_info(void)

that returns current session related setting, compiled default, including save handler capability. 

**Summary**
There is no new INI option and new options could be specified via session_start(). Users cannot change session behavior by mistake. [1]

Session lock control could be API. e.g. session_lock() However, changing lock status after session started is complex. session_start() option is simpler. [2]

Currently, programmer has no control which session data is saved. New behavior allows programmer to control save changed session data when there are concurrent access. [3] 

When client access to server concurrently, the order of requests cannot be guaranteed especially under mobile applications. This results in unreliable session_regenerate_id() operation that is closely related to we security. New behavior mitigate race condition. [4]

Programmer may verify current session settings including options not exposed as INI option. [5]

===== Proposal 1 session_start() option =====

Add option array parameter to session_start(). New option of this RFC are not INI option, but only a option for session_start(). All session INI options may be specified, otherwise INI options are used.

Example:

  session_start(array('lazy_write'=>true, 'lazy_destroy'=>false, 'lock'=>false, 'expires'=>300));


===== Proposal 2 lock option=====

NOTE: **This is NOT a INI option**

NOTE: Default files save handler will not support this, but PECL files_ext. For files save handler, this option does not do anything.

Session module locks session data while executing script by default. This make sure session data integrity by serializing script execution. i.e. Only a script may have access to session data at the same time.

Current behavior ensure session data integrity, but it serializes script execution and slows down application performance.

MM save handler does not have lock capability at all. For user defined save handlers, locking is up to users. Memcached session save handler has lock ini option for better performance by sacrificing integrity a little. Second proposal mitigates broken integrity by unlocked session data access. 

Introduce lock option to session_start() that enable/disable session data lock.

  lock - TRUE by default.

When lock=TRUE, save handler works exactly as it is now.

When lock=FALSE, save handler lock session data only when locking is strictly needed. For files save handler, it locks only when reading/writing data.

Current behavior:

  Open session data   -----------------
   ↓                         ↑
  Read session data           ｜
   ↓
  （Script execution）      Locked
   ↓
  Write session data          ｜
   ↓　                       ↓
  Close session data  ------------------

New behavior with lock=Off:

  
  Open session data 
   ↓               
  Read session data   ←   Locked
   ↓
  （Script execution）      
   ↓
  Write session data  ←   Locked
   ↓　               
  Close session data

===== Proposal 3 - lazy_wirte =====

NOTE: **This is NOT a INI option**

Introduce lazy_write option to session_start() that enable/disable lazy session data writing.

  lazy_write - FALSE by default

When lazy_write=FALSE, session module works exactly as it is now.

WHen lazy_write=TRUE, session module save session data only when session data has been changed.

When reading session data, session module takes MD5 hash for read data. When writing session data, session module compares old MD5 and new MD5 of session data and save session data only when MD5 differs.

Since write is omitted, save handler may not change "last updated time". This may result deleting session data by timeout. To prevent unwanted expiration of session, introduce new save handler API that update "last updated time" of session data.

  PS_UPDATE()

Session module calls PS_UPDATE() instead of PS_WRITE() when lazy_write=On.


**NOTE: save handler implementation**

For files save handler, PS_UPDATE() is not needed as it can update mtime at PS_OPEN(). Files save handler's PS_UPDATE() will be empty function that simply return true.

For memcache/memcached/redis/etc save handlers, PS_UPDATE() is not needed since read access(PS_READ()) updates last access time stamp. PS_UPDATE() may return true simply.

Other save handlers should support PS_UPDATE() API to update last access time. Otherwise, garbage correction may remove active sessions. Alternatively, save handler may update last access time when PS_OPEN()/PS_READ() is called, then PS_UPDATE() may return true simply.


===== Proposal 4 - lazy_destroy =====

NOTE: **This is NOT a INI option**

Introduce lazy_destroy option to session_start() that enable/disable lazy session data deletion. Delayed deletion is required for reliable session_regenerate_id() operation.

  lazy_destroy - 90 (sec) by default. Seconds that app may access session marked to be deleted.

In order to session module to know if the session data is already deleted and accessible, there must be flag/time stamp for deletion/access control.

**First option:**

<nowiki>
Save time stamp in $_SESSION['__PHP_SESSION_DESTROYED__']. 
</nowiki>

  * Pros - simple and fast.
  * Cons - exposed internal data.

**Alternative option:**

Introduce new save handler API that saves flag/time stamp else where.

  * Pros - clean. no exposed data.
  * Cons - complex and slow.

Since alternative option could impact performance a lot. This RFC chooses first option.

By introducing this feature, session_regenerate_id(true) (delete old session) could be a default.


===== Proposal 5: Add session_info() =====

  array session_info(void)

Returns current session related INI setting, compiled default, including save handler capability. 

  * All INI settings.
  * lock_control - TRUE/FALSE/NULL (e.g. mm save handler does not have lock at all)
  * lock - TRUE/FALSE
  * lazy_write - TRUE/FALSE
  * lazy_destroy - LONG
  * PS_FUNCS that save handler is supporting.
  * API version that save handler is supporting.
  * API version that serialize handler is supporting.


===== Backward Incompatible Changes =====

None.

As long as user uses default settings.

===== Proposed PHP Version(s) =====

PHP 5.6 and later.


===== Impact to Existing Extensions =====

None. 

Old save handler works without new INI or API support.

Save handler module needs to be recompiled, but recompile is required for new release anyway.


===== php.ini Defaults =====

No INI option is exposed.

===== Open Issues =====

None.

===== Related Features ====

  - session_commit()/session_write_close() - Implemented (PHP 4.0 and up). End session and write session data.
  - session_abort() - Implemented (5.6 and up). End session without saving session data.
  - session_unlock() - Will be implemented (5.6 and up). Unlock session data. Session data is saved at close. i.e. session_commit() or module shutdown.

  - session_regenerate_id() - It cannot be delete old session reliably without session.lazy_destroy. "delete old session" option default changed to TRUE by default.


===== Proposed Voting Choices =====

  * Proposal 1,2,3,4,5: Yes / No for each feature. 

**1) Add session_start() option parameter.**

If this feature denied, INI is used.

**2) lock** that control session data locking.

**Pros**
  - Simpler and faster than session_lock() API. e.g. This API requires additional access to data storage which make data handling more complex and slower.
  - Allow concurrency without explicit calls of session_commit(), session_write_close(), session_abort().

**Cons**
  - Misuse of this feature could be a cause of bugs.

**3) lazy_write** that writes only session data has changed. 

**Pros.**
  - lazy_write=TRUE could improved 2 times or better performance by removing write() calls.
  - lazy_write=TRUE provides better data consistency since only modified session data is written when session.lock=FALSE, 

**Cons.**
  - Session behavior is changed. When lazy_write=Off, "last session written" wins. When lazy_write=TRUE, "last session modified" wins. 
  - Programmers are responsible for ensuring data consistency when lock=FALSE.


**4) lazy_destroy** that allows delayed session data deletion for concurrent accesses and reliable session_regenerate_id() operation.

**Pros**
  - session_regenerate_id() becomes more reliable for reasons described below.
  - Mitigate race condition that creates unneeded sessions. NOTE: Unneeded session created by race condition could be known session to attacker. Unneeded session increase system load.
  - Ensure proper application behavior even when network connection is unreliable. This is important for mobile applications especially.

**Cons**
  - Deleted session is accessible by specified time. NOTE: Access to deleted session is required for reliable session_regenerate_id() operation.
  - Deleted session contains time stamp variable in $_SESSION. NOTE: Time stamp is mandatory and storing it in $_SESSION is the fastest and simplest way. 


Please note that **lazy_destroy is mandatory for reliable session_regenerate_id()** operation even if this RFC is proposing to disable it by default. Please refer to referenced discussion for details. 

Please propose alternative solution if you vote no to this proposal. This is security related change so there must be alternative solution. session_regenerate_id() cannot delete old session without delayed deletion or alternative solution if there is.

**5) session_info()**

Developers need to know what session modules does.

===== Vote =====

Please vote feature by feature.

The voting period is 2014/01/20 until 2014/01/30.

1) Introduce session_start() options.
<doodle title="RFC/session_start_options" auth="user" voteType="single" closed="true">
   * Yes
   * No
</doodle>

2) Introduce lock as session_start() option.
<doodle title="RFC/session_lock" auth="user" voteType="single" closed="true">
   * Yes
   * No
</doodle>

3) Introduce lazy_write as session_start() option.
<doodle title="RFC/session_lazy_write" auth="user" voteType="single" closed="true">
   * Yes
   * No
</doodle>

4) Introduce lazy_destroy as session_start() option.
<doodle title="RFC/session_lazy_destroy" auth="user" voteType="single" closed="true">
   * Yes
   * No
</doodle>

5) Introduce session_info().
<doodle title="RFC/session_lazy_destroy" auth="user" voteType="single" closed="true">
   * Yes
   * No
</doodle>


Thank you for voting!


===== Patches and Tests =====

Patch will be reviewed before commit.

Note: Partial patch that omits write in files save handler is already committed. It may change session module behavior and will be replaced with new patch.

===== Implementation =====

After the project is implemented, this section should contain 
  - the version(s) it was merged to
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature

===== References =====

  - session_regenerated_id() discussion - http://marc.info/?l=php-internals&m=138242492914526&w=2
  - session.lock discussion - http://marc.info/?l=php-internals&m=138445826032002&w=2

===== Rejected Features =====