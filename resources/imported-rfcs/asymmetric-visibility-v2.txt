====== PHP RFC: Asymmetric Visibility v2 ======
  * Version: 2.0
  * Date: 2024-05-09
  * Author: Ilija Tovilo (tovilo.ilija@gmail.com), Larry Garfield (larry@garfieldtech.com)
  * Status: In Draft
  * First Published at: http://wiki.php.net/rfc/asymmetric-visibility-v2
  * Implementation: https://github.com/php/php-src/pull/9257


===== Introduction =====

PHP has long had the ability to control the visibility of object properties -- ''public'', ''private'', or ''protected''.  However, that control is always the same for both ''get'' and ''set'' operations.  That is, they are "symmetric."  This RFC proposes to allow properties to have separate ("asymmetric") visibility, with separate visibility for read and write operations.  The syntax is mostly borrowed from Swift.

===== Proposal =====

This RFC provides a new syntax for declaring the "set" operation visibility of an object property.  Specifically:

<code php>
class Foo
{
    public private(set) string $bar;
}
</code>

This code declares a property ''$bar'' that may be read from ''public'' scope but may only be modified from ''private'' scope.  It may also be declared ''protected(set)'' to allow the property to be set from any ''protected'' scope (that is, child classes).

The behavior of the property is otherwise unchanged, aside from the restricted visibility.

Asymmetric visibility properties may also be used with constructor property promotion:

<code php>
class Foo
{
    public function __construct(
        public private(set) string $bar,
    ) {}
}
</code>

[I am strongly considering changing this for this version and allowing just set, as that would allow "private(set) string $foo" for the super-common case of public-read, private-write.  I really think it's a common enough case that we should do that.]

In the interest of explicitness, if a ''set'' visibility is specified, a normal/''get'' visibility must also be specified.  Doing otherwise results in a compile error.  That is, the following are legal:

<PHP>
public protected(set) string $foo;
protected private(set) string $bar;
</PHP>

but the following is NOT legal:

<PHP>
// Compile error
protected(set) string $foo;
</PHP>

==== References ====

While a reference to a property with restricted ''set'' visibility may still be obtained, it may only be obtained from a scope that would allow writing.  Put another way, obtaining a reference to a property follows the ''set'' visibility, not the ''get'' visibility.  Trying to obtain a reference to a property with a more restrictive scope will result in an error.

For example:

<code php>
class Foo
{
    public protected(set) int $bar = 0;

    public function test() {
        // This is allowed, because it's private scope.
        $bar = &$this->bar;
        $bar++;
    }
}

class Baz extends Foo
{
    public function stuff() {
        // This is allowed, because it's protected scope.
        $bar = &$this->bar;
        $bar++;
    }
}

$foo = new Foo();

// This is fine, because the update via reference is 
// inside the method, thus private scope.
$foo->test();

// This is also fine.
$baz = new Baz();
$baz->stuff();

// Getting this reference is not allowed here, because this is public
// scope but the property is only settable from protected scope.
$bar = &$foo->bar;
</code>

==== Object properties ===

If the property is an object, the restricted visibility applies only to changing the object referenced by the property.  It does not impact the object itself.  That is consistent with the behavior of the ''readonly'' property.

Example:

<code php>
class Bar
{
    public string $name = 'beep';
}

class Foo
{
    public private(set) Bar $bar;
}

$f = new Foo();

// This is allowed
$f->bar->name = 'boop';

// This is NOT allowed
$f->bar = new Bar();
</code>

==== Permitted visibility ====

The ''set'' visibility, if specified explicitly, MUST be strictly lesser than the main (''get'') visibility.  That is, the ''set'' visibility may only be ''protected'' or ''private''.  If the main visibility is ''protected'', ''set'' visibility may only be ''private''.  Any violation of this rule will result in a compile time error.

==== Inheritance ====

PHP already allows child classes to redeclare parent class properties, if and only if they have the same type and their visibility is the same or wider.  That is, a ''protected string $foo'' can be overridden with ''public string $foo'' but not ''private string $foo''.  This RFC continues that rule, but independently for ''get'' and ''set'' operations.

That means, for instance, the following is legal:

<code php>
class A {
    private string $foo;
}
class B extends A {
    protected private(set) string $foo;
}

class C extends B {
    public protected(set) string $foo;
}

class D extends C {
   public string $foo;
}
</code>

As in each child class, the ''get'' visibility is the same or wider than the parent, and the ''set'' visibility is the same or wider than the parent.  Narrowing the visibility is not allowed, however.

<code php>
class A {
    public string $foo;
}

class B extends A {
    // This is an error.
    public protected(set) string $foo;
}
</code>

==== Interaction with property hooks ====

The [[rfc:property-hooks|Property Hooks]] RFC introduced the ability to insert arbitrary behavior into the ''get'' or ''set'' behavior of a property.  Hooks have no impact on who may access a property, just on what happens when they do.

In contrast, asymmetric visibility allows varying who may read and who may write a property independently, but has no impact on what happens when they are accessed legally.

In short, the behavior of asymmetric visibility and property hooks do not interact at all, and both are fully independent of each other.

There is one caveat regarding virtual properties that have no ''set'' operation.  If there is no ''set'' operation defined on a property, then it is nonsensical to specify a visibility for it.  That case will trigger a compile error.  For example:

<code php>
// This will generate a compile error, as there is 
// no set operation on which to specify visibility.
class Universe
{
    public private(set) $answer { get => 42; }
}
</code>

==== Interaction with interface properties ====

The [[rfc:property-hooks|Property Hooks]] RFC also introduced the ability for interfaces and abstract classes to declare a requirement for a public or protected (for abstract classes only) property, with ''get'' and ''set'' operations separate.  It is a deliberately "lightweight" requirement.  As noted in that RFC, it may be satisfied by either a hook or a traditional property, as long as the operation is available in the relevant scope.  One reason for the separation of ''get'' and ''set'' requirements was to enable asymmetric visibility to satisfy the requirement as well.

For example, the following is fully legal:

<code php>
interface Named
{
    public string $name { get; }
}

class ExampleA
{
    public protected(set) string $name;
}

class ExampleB
{
    public string $name { get => 'Larry'; }
}

class ExampleC
{
    public string $name;
}

class ExampleD
{
    public readonly string $name;
}
</code>

In each case, ''ExampleX::$name'' can be read from public scope, so the interface is satisfied.

If a property on an interface requires public ''set'', however, then specifying asymmetric visibility is not permitted.  (Hooks, of course, are.)

==== Interaction with __set and __unset ====

In PHP 8.3, when a property is read or written and it is not defined and visible from the calling scope, the <php>__get</php> and <php>__set</php> magic methods are called instead, if defined.

Asymmetric visibility does not change that logic; it only allows the read and write sides to behave separately.  That is, if a property is publicly readable but only private or protected writeable, and <php>__set</php> is defined, then <php>__set</php> will be called for that but <php>__get</php> will never be called for that property.  For example:

<code php>
class Example
{
    public private(set) bool $open = true;

    public private(set) string $name;
    
    public function setOpen(bool $open): void
    {
        $this->open = $open;
    }
    
    public function __set($var, $val): void
    {
        if ($var === 'name') {
            if ($this->open) {
                $this->name = $val;
            } else {
                throw new LockedException('I cannot do that, Dave.');
            }
        }
    }
    
    public forceName(string $name): void
    {
      $this-name = $name . ' (forced)';
    }
}

$e = new Example();

// This triggers __set, and since the object
// is $open, writes the property from private scope.
$e->name = 'Larry';

$e->setOpen(false);

// This triggers __set, and since the object is not $open
// __set throws an exception.
$e->name = 'Ilija';

// This calls a normal method, which has private write
// to the property, so runs fine and sets "Ilija (forced)"
$e->forceName('Ilija');
</code>

If <php>__set()</php> is not defined, the write will fail with an error regardless.

The logic for calling ''unset()'' externally (and thus triggering <php>__unset()</php>) is the same.

==== Relationship with readonly ====

The ''readonly'' flag, introduced in PHP 8.1, has an implicit ''private(set)'' behavior.  While there are ways to recast the meaning of ''readonly'' such that it will combine with asymmetric visibility cleanly, there's no clear consensus on which of those ways is best, nor some of the edge cases they introduce.  Therefore, for the time being, mixing ''readonly'' with explicit asymmetric visibility is not allowed.

This restriction can and should be relaxed in a later, dedicated RFC where those details can be hashed out more explicitly.

==== Typed properties ====

Asymmetric visibility is only compatible with properties that have an explicit type specified.  This is mainly due to implementation complexity.  However, as any property may now be typed ''mixed'' and defaulted to ''null'', that is not a significant limitation.

==== Static properties ====

This functionality applies only to object properties.  It does not apply to static properties.  For various implementation reasons that is far harder, and also far less useful.  It has therefore been omitted from this RFC.

==== Reflection ====

The ''ReflectionProperty'' object is given two new methods: ''isProtectedSet(): bool'' and ''isPrivateSet(): bool''.  Their meaning should be self-evident.

<code php>
class Test
{
    public string $open;
    public protected(set) string $restricted;
}

$rClass = new ReflectionClass(Test::class);

$rOpen = $rClass->getProperty('open');
print $rOpen->isProtectedSet() ? 'Yep' : 'Nope'; // prints Nope

$rRestricted = $rClass->getProperty('open');
print $rRestricted->isProtectedSet() ? 'Yep' : 'Nope'; // prints Yep
</code>

Additionally, the two constants <php>ReflectionProperty::IS_PROTECTED_SET</php> and <php>ReflectionProperty::IS_PRIVATE_SET</php> are added. They are returned from <php>ReflectionProperty::getModifiers()</php>, analogous to the other visibility modifiers.

Modifying asymmetric properties via <php>ReflectionProperty::setValue()</php> is allowed, just as it is for <php>protected</php> or <php>private</php> properties, even outside of the classes scope.

===== Use cases and examples =====

Between ''readonly'' and property hooks, PHP already has a number of ways to do "advanced things" with properties.  However, there are still gaps in capability, which this RFC aims to fill.

==== Readonly is incompatible with inheritance ====

The ''readonly'' flag is, on its own, two flags in one: write-once and ''private(set)''.  While both have their use cases, there are ample times where only one or the other is desired.  For instance, the following code from Crell/Serde (slightly simplified for this example) wants to use ''readonly'', but because of the implied ''private(set)'' it causes issues:

<code php>
abstract class Serde
{
    // ...
    protected readonly TypeMapper $typeMapper;

    protected readonly ClassAnalyzer $analyzer;
}

class SerdeCommon extends Serde
{
    // This must be redefined here so that it 
    // can be set from the constructor.
    protected readonly TypeMapper $typeMapper;

    public function __construct(
        // Normally repeating a property as a promoted
        // argument is an error, BUT because the property
        // is in the parent, this overrides it with a
        // new property definition that is now local
        // to this class.
        protected readonly ClassAnalyzer $analyzer = new Analyzer(),
        array $handlers = [],
        array $formatters = [],
        array $typeMaps = [],
    ) {
        // We just want to do this...
        $this->typeMapper = new TypeMapper($typeMaps, $this->analyzer);
        
        // ...
    }
}
</code>

With asymmetric visibility, the ''readonly'' usage here can be replaced with ''public protected(set)'' or ''readonly public protected(set)'', avoiding the need to double-declare properties.

==== Readonly is limited ====

''readonly'' offered the potential to have public properties that are guaranteed to not change unexpectedly.  This has been a major benefit, and allowed the removal of a lot of needless boilerplate code.  However, it also somewhat over-shoots: It prevents a property from changing //at all//, rather than just "unexpectedly."  While fully immutable objects have their place, they are not always the answer.  It is still often desireable to have a public property (for ease of read) without making it write-once.

For example:

<code php>
class Record
{
    private bool $dirty = false;
    
    private array $data = [];
    
    public set($key, $val): void
    {
        $this->data[$key] = $val;
        $this->dirty = true;
    }
    
    public isDirty(): bool
    {
        return $this->dirty;
    }
    
    public save(): void
    {
        if ($this->dirty) {
            // Do something to save the object.
            $this->dirty = false;
        }
    }
}
</code>

It's very tempting to make ''$dirty'' a public property, as the dirty status of the object is a "property" of it.  Especially with hooks, such a desire will become more common.  However, that cannot be done with ''public'' or ''readonly''.  Making the property ''public'' would open it up to modification from anyone at any time, whereas making it ''readonly'' would make it impossible to unset in ''save()'', and require using "uninitialized or true" as a quasi-boolean state.  Both options are bad.

With asymmetric visibility, it can be easily simplified to:

<code php>
class Record
{
    public private(set) bool $dirty = false;
    
    private array $data = [];
    
    public set($key, $val): void
    {
        $this->data[$key] = $val;
        $this->dirty = true;
    }
    
    public save(): void
    {
        if ($this->dirty) {
            // Do something to save the object.
            $this->dirty = false;
        }
    }
}
</code>

Which now offers a publicly-readable marker, internally modifiable, with no opportunity for it to change in an uncontrolled way, without any need for odd code contortions.

==== Hooks can be verbose ====

While every effort has been made to make hooks as compact as reasonable, there are some use cases that are still more clumsy than they need to be.  For example, asymmetric visibility can be emulated with hooks like so:

<code php>
class NamedThing
{
    private string $_name;
    
    public string $name { get => $this->_name; }

    public function __construct(string $name)
    {
        $this->name = $_name;
    }
}
</code>

But that's a lot of non-obvious work, and does have a small performance impact.  It is much more straightforward to do this:

<code php>
class NamedThing
{
    public function __construct(public private(set) string $name) {}
}
</code>

===== Backward Incompatible Changes =====

None.  This syntax would have been a parse error before.

===== Proposed PHP Version(s) =====

PHP 8.3

===== RFC Impact =====

===== Future Scope =====

This RFC is kept very simple.  However, it does allow for future expansion.

==== Alternate operations ====

At this time, there are only two possible operations to scope: read and write.  In concept, additional operations could be added with their own visibility controls.  Possible examples include:

  * ''init'' - Allows a property to be set only from initialization operations, such as <php>__construct</php>, <php>__clone</php>, <php>__unserialize</php>, etc.
  * ''unset'' - Allows a property to be unset from a different scope than it can be set to a real value.

This RFC does NOT include any of the above examples; they are listed only to show that this syntax supports future expansion should a use be found.

==== Additional visibility ====

Should PHP ever adopt packages and package-level visibility, this syntax would be fully compatible with it.  For example, ''public package(set)'' would be a natural syntax to use.

This RFC does NOT include any discussion of such expanded visibility definition, just notes that it in no way precludes such future developments.

==== readonly compatibility ====

As noted above, at this time asymmetric visibility cannot be combined with ''readonly'' properties.  While the implementation of interlacing the two features is not difficult, there are some edge cases that need to be sorted out.  For instance, it may require relaxing the "permitted visibility" rules in some cases.  We felt that was best pushed to a separate RFC to minimize controversy on this RFC.  The authors believe such interlacing can and should be done, just in a separate RFC.

==== Abbreviated form ====

It would be possible in the future to allow the ''get'' visibility to default to ''public'' if only a ''set'' visibility is specified.  That may help avoid long property declarations if combined with ''readonly'' or other features.  It has been omitted for now in the interest of explicitness, but could easily be reintroduced in the future.

===== Proposed Voting Choices =====

This is a simple yes-or-no vote to include this feature.  2/3 majority required to pass.

<doodle title="Include this RFC?" auth="crell" voteType="single" closed="true">
   * Yes
   * No
</doodle>


===== References =====

This syntax is borrowed directly from [[https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html|Swift's access control system]].

Syntax decisions in this RFC are supported by a poll conducted in September 2022.  The results were [[https://externals.io/message/118557#118628|posted to the Internals list]].