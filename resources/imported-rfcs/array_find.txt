====== PHP RFC: array_find ======
  * Version: 1.0.0
  * Date: 2024-04-07
  * Author: Joshua RÃ¼sweg, josh@php.net
  * Status: Under Discussion
  * First Published at: https://wiki.php.net/rfc/array_find

===== Introduction =====

This RFC proposes the addition of two new functions <php>array_find</php> and <php>array_find_key</php>, which return the first element for which a predicate callback returns <php>true</php>.

There are currently lots of functions in PHP for modifying or filtering arrays. However, there is no simple function to search an array with a callback and return the first result. Implementing this in userland is relatively simple (either via a loop or via array_filter combined with reset), but the function is often required, so this type of function is often built [1]. Therefore there is a reason to include this function as standard with the next PHP version. In addition, the implementation of the function is similar to <php>array_filter</php> and relatively trivial to implement, so the maintenance effort should be low. 

===== Proposal =====

This RFC proposes to add two new function, <php>array_find</php> and <php>array_find_key</php>.

==== array_find ====

<PHP>
function array_find(array $array, callable $callback): mixed {
    foreach ($array as $key => $value) {
        if ($callback($value, $key)) {
            return $value;
        }
    }
    
    return null;
}
</PHP>

=== Parameters ===

<php>array $array</php>

The array that should be searched.

<php>callable $callback</php>

The callback function to call to check each element. The first parameter contains the value, the second parameter contains the corresponding key. If this function returns true, the value is returned from <php>array_find</php> and the callback will not be called for further elements.

=== Return Value ===

The function returns the first array value for which the <php>$callback</php> returns <php>true</php>. If no matching entry is found, the function returns <php>NULL</php>.

=== Examples ===

<PHP>
$array = [
    'a' => 'dog',
    'b' => 'cat',
    'c' => 'cow',
    'd' => 'duck',
    'e' => 'goose',
    'f' => 'elephant'
];

// Find the first animal with a name longer than 4 characters.
var_dump(array_find($array, function (string $value) {
    return strlen($value) > 4;
})); // string(5) "goose"

// Find the first animal whose name begins with f. 
var_dump(array_find($array, function (string $value) {
    return str_starts_with($value, 'f'); 
})); // NULL

// Find the first animal where the array key is the first symbol of the animal.
var_dump(array_find($array, function (string $value, $key) {
   return $value[0] === $key;
})); // string(3) "cow"

// Find the first animal where the array key matching a RegEx.
var_dump(array_find($array, function ($value, $key) {
   return preg_match('/^([a-f])$/', $key);
})); // string(3) "dog"
</PHP>

==== array_find_key ====

<PHP>
function array_find_key(array $array, callable $callback): mixed {
    foreach ($array as $key => $value) {
        if ($callback($value, $key)) {
            return $key;
        }
    }
    
    return null;
}
</PHP>

=== Parameters ===

<php>array $array</php>

The array that should be searched.

<php>callable $callback</php>

The callback function to call to check each element. The first parameter contains the value, the second parameter contains the corresponding key. If this function returns true, the key is returned from <php>array_find_key</php> and the callback will not be called for further elements.

=== Return Value ===

The function returns the first array key for which the <php>$callback</php> returns <php>true</php>. If no matching entry is found, the function returns <php>NULL</php>.

=== Examples ===

<PHP>
$array = [
    'a' => 'dog',
    'b' => 'cat',
    'c' => 'cow',
    'd' => 'duck',
    'e' => 'goose',
    'f' => 'elephant'
];

// Find the first animal with a name longer than 4 characters.
var_dump(array_find_key($array, function (string $value) {
    return strlen($value) > 4;
})); // string(1) "e"

// Find the first animal whose name begins with f. 
var_dump(array_find_key($array, function (string $value) {
    return str_starts_with($value, 'f'); 
})); // NULL

// Find the first animal where the array key is the first symbol of the animal.
var_dump(array_find_key($array, function (string $value, $key) {
   return $value[0] === $key;
})); // string(1) "c"

// Find the first animal where the array key matching a RegEx.
var_dump(array_find_key($array, function (string $value, $key) {
   return preg_match('/^([a-f])$/', $key);
})); // string(1) "a"
</PHP>

===== Backward Incompatible Changes =====

Functions created by the user and named <php>array_find</php> or <php>array_find_key</php> lead to a PHP error with the new version. A quick GitHub search shows, that there a [[https://github.com/search?q=language%3Aphp%20symbol%3Aarray_find&type=code|656 results]] defining the symbol <php>array_find</php> for the language PHP. Looking at the search results I estimate about 30% of these results are functions that are not located in a namespace and are not part of a class. <php>array_find_key</php> is defined [[https://github.com/search?q=language%3Aphp%20symbol%3Aarray_find_key&type=code|28 times]] on GitHub.

===== Proposed PHP Version(s) =====

PHP 8.4

===== RFC Impact =====
==== To SAPIs ====

None.

==== To Existing Extensions ====

None.

==== To Opcache ====

None.

==== New Constants ====

None.

==== php.ini Defaults ====

None.

===== Open Issues =====

None. 

===== Unaffected PHP Functionality =====

This RFC only adds two new functions to PHP and only affects previously defined functions which are named as the proposed function. 


===== Implementation =====

https://github.com/joshuaruesweg/php-src/commit/9f3fc252b92f534d498e5f1e6a463e15f45da208


===== References =====

  * [1] GitHub currently has [[https://github.com/search?q=language%3Aphp%20symbol%3Aarray_find&type=code|656 results]] for array_find and Laravel implements this feature by default with [[https://laravel.com/docs/5.2/helpers#method-array-first|array_first]]. 
  * https://en.cppreference.com/w/cpp/algorithm/find
  * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
  * https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find