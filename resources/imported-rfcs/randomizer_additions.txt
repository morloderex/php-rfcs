====== PHP RFC: Randomizer Additions ======
  * Version: 1.0
  * Date: 2022-10-09
  * Author: Joshua Rüsweg, josh@wcflabs.de
  * Author: Tim Düsterhus, timwolla@php.net
  * Status: Under Discussion
  * First Published at: https://wiki.php.net/rfc/randomizer_additions

===== Introduction =====

This RFC proposes to add new “building block” methods to \Random\Randomizer that implement commonly useful operations that are either verbose or very hard to implement in userland.

Generating **a random string containing specific characters** is a common use case to generate random identifiers, voucher codes, numeric strings that exceed the range of an integer and more. Implementing this operation in userland requires selecting random offsets within an input string in a loop and thus requires multiple lines of code for what effectively is a very simple operation. It is also easy to introduce subtle bugs, for example by introducing an off-by-one error with regard to the maximum string index by forgetting to subtract one from the string length. The obvious implementation that uses <php>Randomizer::getInt()</php> to select the offsets is also inefficient as it requires at least one call to the engine per character, whereas a 64 Bit engine could generate randomness for 8 characters at once.

Generating a **random floating point value** is also a useful building block, for example to generate a random boolean with a specific chance. Doing this in userland correctly is somewhere between non-trivial and impossible. The obvious implementation, dividing a random integer retrieved using <php>Randomizer::getInt()</php> by another integer easily results in a bias, because of rounding errors and the decreasing density of floats for larger absolute values.

===== Proposal =====

Add three new methods to <php>\Random\Randomizer</php>:

<PHP>
namespace Random;

final class Randomizer {
    // […]
    public function getBytesFromString(string $alphabet, int $length): string {}
    public function nextFloat(): float {}
    public function getFloat(float $min, float $max): float {}
}
</PHP>

==== getBytesFromString() ==== 

The method allows you to generate a string with a given length that consists of randomly selected bytes from a given alphabet. 

=== Parameters ===

<php>string $alphabet</php>

The alphabet from which random bytes are selected.

Note:

The alphabet may contain duplicate bytes. When bytes are duplicated the chance of a value being selected is equal to its proportion within the alphabet. If each byte only appears once, the bytes will be uniformly selected.

<php>int $length</php>

The length of the output string. 

=== Return Value ===

A random string with the length of the parameter <php>$length</php> containing only bytes from the parameter <php>$alphabet</php>.

=== Examples === 

**1. A random domain name.**

<PHP>
<?php
$randomizer = new \Random\Randomizer();

var_dump(sprintf(
    "%s.example.com",
    $randomizer->getBytesFromString('abcdefghijklmnopqrstuvwxyz0123456789', 16)
)); // string(28) "xfhnr0z6ok5fdlbz.example.com"
</PHP>

**2. A numeric backup code for multi-factor authentication.**

<PHP>
<?php
$randomizer = new \Random\Randomizer();

var_dump(
    implode('-', str_split($randomizer->getBytesFromString('0123456789', 20), 5))
); // string(23) "09898-46592-79230-33336"
</PHP>

**3. An arbitrary precision decimal number.**

<PHP>
<?php
$randomizer = new \Random\Randomizer();

// Note that trailing zeros might be returned, but all
// possible decimals are distinct.
var_dump(sprintf(
    '0.%s',
    $randomizer->getBytesFromString('0123456789', 30)
)); // string(30) "0.217312509790167227890877670844"
</PHP>

**4. A random string where each character has a 75% chance of being 'a' and 25% chance of being 'b'.**

<PHP>
<?php
$randomizer = new \Random\Randomizer();

var_dump(
    $randomizer->getBytesFromString('aaab', 16)
); // string(16) "baabaaaaaaababaa"
</PHP>

**5. A random DNA sequence.**

<PHP>
<?php
$randomizer = new \Random\Randomizer();

var_dump(
    $randomizer->getBytesFromString('ACGT', 30)
); // string(30) "CGTAGATCGTTCTGATAGAAGCTAACGGTT"
</PHP>

==== getFloat() ==== 

The method returns a float between $min (including) and $max (excluding). The returned values are uniformly selected and evenly distributed within the [$min, $max) interval.

Evenly distributed means that each possible subinterval contains the same number of possible values as each other identically sized subinterval. As an example when calling <php>->getFloat(0, 1)</php> a return value less than <php>0.5</php> is equally likely as a return value that is at least <php>0.5</php>. A return value less than <php>0.1</php> will happen in 10% of the cases, as will a return value that is at least <php>0.9</php>.

The algorithm used is the γ-section algorithm as published in: Drawing Random Floating-Point Numbers from an Interval. Frédéric Goualard, ACM Trans. Model. Comput. Simul., 32:3, 2022. https://doi.org/10.1145/3503512

=== Parameters ===

<php>float $min</php>

The lower bound of the half-open interval of possible return values.

<php>float $max</php>

The uper bound of the half-open interval of possible return values. The value <php>$max</php> will not be returned.

=== Return Value ===

A random float, such that <php>$float >= $min && $float < $max</php>.

=== Examples === 

**1. Generate a random latitude and longitude:** 

<PHP>
<?php
$randomizer = new \Random\Randomizer();

// Note that the latitude granularity is double the
// longitude's granularity.
//
// The $max (i.e. 90 and 180) will not be returned.
var_dump(sprintf(
    "Lat: %+.6f Lng: %+.6f",
    $randomizer->getFloat(-90, 90),
    $randomizer->getFloat(-180, 180),
)); // string(32) "Lat: -54.671066 Lng: +140.774953"
</PHP>

==== nextFloat() ==== 

This method is equivalent to <php>->getFloat(0, 1)</php>. The internal implementation is simpler and faster and it does not require explicit parameters for the common case of the [0, 1) interval.

=== Return Value ===

A random float, such that <php>$float >= 0 && $float < 1</php>.

=== Examples === 

**1. Simulate a coinflip:** 

<PHP>
<?php
$randomizer = new \Random\Randomizer();

var_dump(
    $randomizer->nextFloat() < 0.5
); // bool(true)
</PHP>

**2. Get true at a 10% chance:** 

<PHP>
<?php
$randomizer = new \Random\Randomizer();

var_dump(
    $randomizer->nextFloat() < 0.1
); // bool(false)
</PHP>


===== Backward Incompatible Changes =====

None, since the current implementation of the Randomizer class is final and cannot be modified by the user. 

===== Proposed PHP Version(s) =====

Next PHP 8.x

===== RFC Impact =====

==== To SAPIs ====

None.

==== To Existing Extensions ====

None.

==== To Opcache ====

None.

==== New Constants ====

None.

==== php.ini Defaults ====

None.

===== Open Issues =====

  * Shall an option be added to getFloat() that changes the logic to select from [$min, $max] (i.e. allowing the maximum to be returned)?

===== Unaffected PHP Functionality =====

The only affected functionality is the Randomizer class that receives new methods. These methods might be visible with Reflection. Everything else is unaffected.

===== Patches and Tests =====

  * Implementation of <php>getBytesFromString()</php>: https://github.com/php/php-src/pull/9664
  * Implementation of <php>nextFloat()</php> and <php>getFloat()</php>: https://github.com/php/php-src/pull/9679

These implementations are fully functional. 

===== References =====

  * First discussion on the mailing list: https://externals.io/message/118762
  * RFC discussion: https://externals.io/message/118810