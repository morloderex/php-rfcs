====== PHP RFC: Randomizer Additions ======
  * Version: 1.0
  * Date: 2022-10-09
  * Author: Joshua Rüsweg, josh@wcflabs.de
  * Author: Tim Düsterhus, timwolla@php.net
  * Status: Draft
  * First Published at: https://wiki.php.net/rfc/randomizer_additions

===== Introduction =====

This RFC extends the Randomizer class with two useful building blocks. 

With PHP 8.2, the new random extension was introduced. The new class is a great way to get random values, but currently it is not possible to create random strings from a given set of characters to generate a random string from this input alphabet. This function is useful as a building block, as many use cases require generating random strings with a specified list of characters (e.g. random passwords, voucher codes, numeric strings larger than integers) and implementing this in userland requires multiple lines of code for what effectively is a very simple operation. Furthermore the obvious implementation based on ->getInt() is inefficient, as it requires at least one call to the engine per character, whereas a 64 Bit engine could generate randomness for 8 characters at once.

Furthermore the new random extension has also no method to generate a random float number. This is also a non-trivial method to implement with pure PHP. So that is also a useful building block to implement within the class. 

===== Proposal =====

Add two new methods to <php>\Random\Randomizer</php>:

<PHP>
namespace Random;

final class Randomizer {
    // […]
    public function getBytesFromAlphabet(string $alphabet, int $length): string {}
    public function nextFloat(): float {}
}
</PHP>

==== getBytesFromAlphabet() ==== 

The method allows you to generate a string with a given length that consists of randomly selected bytes from a given alphabet. 

=== Parameters ===

<php>string $alphabet</php>

The alphabet from which random bytes are selected.

Note:

The alphabet may contain duplicate bytes. When bytes are duplicated the chance of a value being selected is equal to its proportion within the alphabet. If each byte only appears once, the bytes will be uniformly selected.

<php>int $length</php>

The length of the output string. 

=== Return Value ===

A random string with the length of the parameter <php>$length</php> containing only bytes from the parameter <php>$alphabet</php>.

=== Examples === 

**1. A random domain name.**

<PHP>
<?php
$randomizer = new \Random\Randomizer();

var_dump(sprintf(
    "%s.example.com",
    $randomizer->getBytesFromAlphabet('abcdefghijklmnopqrstuvwxyz0123456789', 16)
)); // string(28) "xfhnr0z6ok5fdlbz.example.com"
</PHP>

**2. A numeric string that exceeds the range of 64 bit integers.**

<PHP>
<?php
$randomizer = new \Random\Randomizer();

// Note that leading zeros might be returned.
var_dump(
    $randomizer->getBytesFromAlphabet('0123456789', 30)
); // string(30) "217312509790167227890877670844"
</PHP>

**3. A random string where each character has a 75% chance of being 'a' and 25% chance of being 'b'.**

<PHP>
<?php
$randomizer = new \Random\Randomizer();

var_dump(
    $randomizer->getBytesFromAlphabet('aaab', 16)
); // string(16) "baabaaaaaaababaa"
</PHP>

**4. A random DNA sequence.**

<PHP>
<?php
$randomizer = new \Random\Randomizer();

var_dump(
    $randomizer->getBytesFromAlphabet('ACGT', 30)
); // string(30) "CGTAGATCGTTCTGATAGAAGCTAACGGTT"
</PHP>

==== nextFloat() ==== 

The method returns a float between 0 (including) and 1 (excluding). The returned values are uniformly selected and evenly distributed within the [0, 1) interval.

Evenly distributed means that each possible subinterval contains the same number of possible values as each other identically sized subinterval. As an example a return value less than <php>0.5</php> is equally likely as a return value that is at least <php>0.5</php>. A return value less than <php>0.1</php> will happen in 10% of the cases, as will a return value that is at least <php>0.9</php>.


=== Return Value ===

A random float, such that <php>$float >= 0 && $float < 1</php>.

=== Examples === 

**1. Simulate a coinflip:** 

<PHP>
<?php
$randomizer = new \Random\Randomizer();

var_dump(
    $randomizer->nextFloat() < 0.5
); // bool(true)
</PHP>

**2. Get true at a 10% chance:** 

<PHP>
<?php
$randomizer = new \Random\Randomizer();

var_dump(
    $randomizer->nextFloat() < 0.1
); // bool(false)
</PHP>

**3. Generate a random latitude and longitude:**

<PHP>
<?php
$randomizer = new \Random\Randomizer();

// Note that the longitude will have half the precision of the latitude.
var_dump(sprintf(
    "Lat: %+.6f Lng: %+.6f",
    (2 * $randomizer->nextFloat() - 1) * 90,
    (2 * $randomizer->nextFloat() - 1) * 180,
)); // string(32) "Lat: +35.661898 Lng: -164.227194"
</PHP>

===== Backward Incompatible Changes =====

None, since the current implementation of the Randomizer class is final and cannot be modified by the user. 

===== Proposed PHP Version(s) =====

Next PHP 8.x

===== RFC Impact =====
==== To SAPIs ====

None.

==== To Existing Extensions ====

None.

==== To Opcache ====

None.

==== New Constants ====

None.

==== php.ini Defaults ====

None.

===== Unaffected PHP Functionality =====

The only affected functionality is the Randomizer class that receives new methods. These methods might be visible with Reflection. Everything else is unaffected.

===== Patches and Tests =====

  * Implementation of <php>getBytesFromAlphabet()</php>: https://github.com/php/php-src/pull/9664
  * Implementation of <php>nextFloat()</php>: https://github.com/php/php-src/pull/9679

These implementations are fully functional. 

===== References =====

  * First discussion on the mailing list: https://externals.io/message/118762