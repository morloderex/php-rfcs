====== Request for Comments: Better benchmarks for PHP ======
  * Version: 1.0
  * Date: 2009-02-01
  * Author: Paul Biggar <paul.biggar@gmail.com>, Nuno Lopes <nlopess@php.net>
  * Status: Working on first draft

Replace PHP's current bench.php with a benchmark suite from which meaningful performance measurements can be taken.

===== Introduction =====

PHP's current bench.php is a micro-benchmark which tests a number of language features. Since it does not behave like a 'real' application, it cannot provide meaningful information about the performance of PHP in general. This RFC will attempt to replace bench.php with a better suite of benchmarks, upon which meaningful performance measurements can be taken.

===== What are we trying to measure =====

=== Performance impact of changes to PHP or its libraries ===

We need to be able to see how changes to the Zend engine affect real programs, not synthetic benchmarks.


=== Realistic profiling ===

We need realistic applications and workloads in order to get useful profiling info. Useful to know which pieces of the VM need optimization.

=== Performance improvement of other PHP implementations relative to PHP ===

There is a need for other PHP implementations to be able to measure their performance against the Zend engine.


===== What do we want in a benchmark =====

Benchmark applications should be straightforward to deploy, preferably with no manual setup, even when multiple machines are required.
  * preferably few or no external dependencies
  * DBs could possibly be changed to use a file-based engine like SQLite.
  * It must be possible to separate results for the language, the database, the webserver and the benchmarking client.

Basically we would like to see real-world apps tweaked so that automated deployment and testing is easy and simple. Each benchmark should also have a set of representative workload inputs (e.g. from real-world log files).

Benchmarks should be licensed under a liberal open-source license, so that they can be "safely" customized and redistributed for our needs.




===== What benchmarks currently exist =====

  * [[http://cvs.php.net/viewvc.cgi/ZendEngine2/bench.php?view=markup|Zend Engine's bench.php]]
    * The bench.php script just performs a few standard synthetic tests (e.g. ackermann, fibonacci, etc..). It also performs some tests on the areas that were optimized in Zend Engine 2 (so it's a little biased). However, it doesn't perform any 'real' work.
    * There are many language features that it does not use, that might be used (perhaps sporadically) in a larger application:
      * OO
      * Variable-variables
      * Variable-function or -method calls (in fact, the call-graph is entirely static, and very shallow -- although there are at least cycles).
      * References
      * call-time pass-by-ref
      * dynamic function/class definition
      * eval
      * include (etc)
      * extract/compact

  * [[http://www.pureftpd.org/project/phpbench|PHPBench]]
    * It seems that this test really only tests language features, and doesnt actually do any work.

  * [[http://phplens.com/benchmark_suite/|PHP BS]]
    * only performs a few synthectic micro tests to compare different ways of doing the same. e.g. benchmark the usage of '$a += $b' vs '$a = $a + $b'

  * [[http://alioth.debian.org/scm/?group_id=30402|Debian Language Shootout]]
    * Provides a large number of small benchmarks
    * Tests OO, and references
    * Most of the benchmarks are very short (program length, not run-time) - the longest is 481 lines, and only 8 are longer than 100 lines.

  * [[http://www.roadsend.com/home/index.php?pageID=benchmarks|Roadsend]]
    * Short, doesnt take command line parameters, is varied, but simple.
    * This seems to be the only test with data that needs to be run-through. This makes it a somewhat better test than the others, it seems.

  * [[http://www.spec.org/web2005/|SPECweb2005]]
    * very complete but very expensive
    * contains 3 applications: banking website, e-commerce website and a vendor support website
    * workload based on real data. more details at [[http://www.spec.org/web2005/docs/1.20/design/SPECweb2005_Design.html]]
    * Requires a number of machines: for DB, front-end and clients. Difficult to deploy. Results difficult to replicate for other developers.
    * This benchmarks the entire stack, not just PHP. If PHP is not the bottleneck, then the 'improvements' being tested will not appear. This can be an advantage - small improvements may not increase the speed of an web application in real life. However, it obscures what we are trying to measure - the speed of the PHP implementation.

  * [[http://jmob.objectweb.org/rubbos.html|RUBBoS: Bulletin Board Benchmark]]
    * Written in PHP 4 - no OO. Only minor changes required to make it run in PHP5.
    * Difficult to deploy. Requires at least 3 machines (it can be deployed on a single machine, but the results would be worthless).
    * Like SPECweb2005, the benchmarks the entire stack, not just PHP.

  * [[http://www.phpspeed.com/php-benchmark-f5/|PHPSpeed]]
    * TODO - this looks like a benchmark
    * http://www.phpspeed.com/download2.php?file=phpspeed_v1_beta3.zip

===== Applications which could make good benchmarks =====


  * [[http://j4p5.sourceforge.net/|j4p5]]
    *  A Javascript interpreter written in PHP

>> A colleague, lacking good Lua benchmarks, ported the V8/spidermonkey javascript apps in a few days. That's not a bad idea.


===== Benchmarks we'd like to see =====
TODO
