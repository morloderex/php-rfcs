====== PHP RFC: Arrays starting with a negative index ======
  * Version: 0.3
  * Date: 2017-04-20
  * Author: Pedro MagalhÃ£es, mail at pmmaga dot net
  * Status: Voting
  * First Published at: http://wiki.php.net/rfc/negative_array_index

===== Introduction =====
On the documentation for ''[[http://php.net/manual/en/function.array-fill.php|array_fill]]'' the ''start_index'' description mentions: "If ''start_index'' is negative, the first index of the returned array will be ''start_index'' and the following indices will start from zero." This is consistent everywhere when an explicit negative key is used and implicit keys are used afterwards.

===== Proposal =====
In other words, any array that has a number ''n'' as it's first numeric key will have for it's next implicit key either ''n+1'' if ''n >= 0'' or ''0'' if ''n < 0''. This RFC proposes to make this consistent by always using ''n+1'' regardless of the sign of ''n''.

As also mentioned on the relevant part of the [[http://php.net/manual/en/language.types.array.php|arrays documentation]]:
> if no key is specified, the maximum of the existing integer indices is taken, and the new key will be that maximum value plus 1 (but at least 0).

This RFC proposes to eliminate the parenthesis part of that sentence. Which is an exception to a rule, that people have to learn one way or the other.

All the variables in this code:

<code php>
<?php

$a = array_fill(-2, 3, true);
$b = [-2 => true, true, true];
$c = ["string" => true, -2 => true, true, true];
unset($c["string"]);
$d[-2] = true;
$d[] = true;
$d[] = true;
</code>

Result in the array:

<code php>
array(3) {
  [-2]=>
  bool(true)
  [0]=>
  bool(true)
  [1]=>
  bool(true)
}
</code>

<blockquote>
NOTE: During the deprecation phase the following ''E_DEPRECATED'' notice will be emitted in cases where the behavior will change:

<code>
Deprecated: In the next major version of PHP the implicit keys of this array will start from -1 instead of 0 in ...
</code>
</blockquote>

With the implementation of this RFC, they will all result in:

<code php>
array(3) {
  [-2]=>
  bool(true)
  [-1]=>
  bool(true)
  [0]=>
  bool(true)
}
</code>

===== Backward Incompatible Changes =====
Code that relies on the current behavior to access array elements with an explicit key after that array has been started with a negative index and used implicit keys afterwards will change it's behavior. Example:

<code php>
<?php

$a[-2] = true;
$a[] = true;
$a[] = true;

if ($a[1] === true) {
    echo 'Save the world.';
}
</code>

Will no longer save the world.

===== Proposed PHP Version(s) =====
PHP 8.0

===== Unaffected PHP Functionality =====
Arrays with explicit keys, string keys, or an initial numeric index ''>= 0'' are not affected. This also means that arrays that never use explicit keys will still start with ''0''.

Furthermore, iterating over arrays without explicit keys (ie. ''foreach'') is not affected.

===== Voting Choices =====
This RFC requires a 2/3 majority.

Voting opened on 13/6/2017 19:00 UTC and will close on 28/6/2017 19:00 UTC.

<doodle title="Arrays starting with a negative index for PHP 8.0" auth="pmmaga" voteType="single" closed="false">
   * Yes
   * No
</doodle>

===== Patches and Tests =====
This RFC is implemented by the following patches:
  - Implementation: https://github.com/php/php-src/pull/2383
  - Documentation: //WIP//

===== References =====
Discussion on the mailing list:https://externals.io/thread/712
