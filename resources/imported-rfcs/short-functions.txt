====== PHP RFC: Short Functions ======
  * Version: 1.0
  * Date: 2020-09-26
  * Author: Larry Garfield (larry@garfieldtech.com)
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/short-functions

===== Introduction =====

Short lambdas / arrow functions offer a convenient, compact way to write simple closures as a single expression.  This RFC offers the same convenience for named functions and methods that are simple return expressions.

===== Proposal =====

This RFC provides an alternate, abbreviated syntax for functions and methods, designed to mimic the syntax of short lambdas.  Specifically, the first function below is semantically identical to the second:

<code php>
function add(int $a, int $b): int => $a + $b;

function add(int $a, int $b): int 
{
    return $a + b;
}
</code>

The same abbreviated form is also available for methods.  Both of the following methods are semantically identical.

<code php>
class Adder
{
    public function __construct(private int $val) {}
    
    public function add(int $in): int => $in + $this->val;

    public function add(int $in): int {
        return $in + $this->val;
    }
}
</code>

Functions are simpler than lambdas, as there is no need for closing over variables contextually.  Therefore this patch is implemented 100% in the lexer, and thus should have no performance impact whatsoever.

==== Reasoning ====

Many functions and methods are, in practice, simple expressions.  They take input and return some simple output that can be computed in a single expression (of arbitrary complexity).  When anonymous, short lambdas offer a compact way to express that function as a literal expression.  Named functions, however, currently still require writing them as if they would be a long block of statements.  That provides extra visual clutter (especially when there are several such methods in one class).  It also forces you to code in "statement headspace" rather than "expression headspace".  Allowing functions to be written in a more expression-y way helps with conceptualizing a program as evaluating expressions, not statement steps.

Expressions are becoming increasingly capable, too.  match() expressions and throw expressions in PHP 8.0, plus proposals such as [[rfc:pipe-operator-v2|PHP RFC: Pipe Operator v2]], are collectively making it easier to write expressive expressions.  This improvement is a part of that larger trend.  For example, this code would become entirely legal:

<code php>
function pick_one(int $a) => match($a) {
    1 => 'One',
    2 => 'Two',
    3 => 'Three',
    default => 'More',
};

print pick_one(1) . PHP_EOL;
</code>

Making functions that just "fan out" to other routines simple to write in the most compact way possible.

===== Backward Incompatible Changes =====

None.  This would have been a syntax error in the past.

===== Proposed PHP Version(s) =====

PHP 8.1.


===== Open Issues =====

None?

===== Proposed Voting Choices =====

This is a simple up-or-down vote, requiring 2/3 approval to pass.

===== Patches and Tests =====

[[https://github.com/php/php-src/pull/6221|Pull request with the code.]]

Pull request for the spec still to come.

===== Implementation =====
After the project is implemented, this section should contain 
  - the version(s) it was merged into
  - a link to the git commit(s)
  - a link to the PHP manual entry for the feature
  - a link to the language specification section (if any)

===== References =====
Links to external references, discussions or RFCs

===== Rejected Features =====
Keep this updated with features that were discussed on the mail lists.